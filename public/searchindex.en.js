var relearn_searchindex = [
  {
    "breadcrumb": "Introduction à la programmation \u003e Structures De Controles \u003e Boucles",
    "content": "🔁 Les boucles for en Java La boucle for est utilisée pour répéter une série d’instructions un certain nombre de fois. C’est un outil fondamental pour parcourir des suites de valeurs, des tableaux, ou exécuter du code un nombre précis de fois.\n🧱 Structure d’une boucle for for (initialisation; condition; incrémentation) { // instructions à répéter } Partie Rôle initialisation Déclare et initialise une variable de boucle condition Détermine si la boucle continue ou s’arrête incrémentation Modifie la variable de boucle à chaque itération 🔂 Exemple de base for (int i = 0; i \u003c 5; i++) { System.out.println(\"i vaut : \" + i); } 🔎 Ce code va afficher :\ni vaut : 0 i vaut : 1 i vaut : 2 i vaut : 3 i vaut : 4 💡 Ici :\nint i = 0; → On commence à 0 i \u003c 5; → Tant que i est strictement inférieur à 5 i++ → On incrémente i de 1 à chaque tour 🎯 Quand utiliser une boucle for ? Utilise for quand :\nLe nombre d’itérations est connu à l’avance Tu veux parcourir une suite de valeurs Tu veux répéter une action un nombre précis de fois 🔁 Boucles décroissantes Tu peux faire une boucle en sens inverse :\nfor (int i = 5; i \u003e 0; i--) { System.out.println(\"Compte à rebours : \" + i); } 🔎 Exemples pratiques 🔢 Afficher les nombres de 1 à 10 for (int i = 1; i \u003c= 10; i++) { System.out.print(i + \" \"); } // Résultat : 1 2 3 4 5 6 7 8 9 10 🟰 Afficher uniquement les nombres pairs for (int i = 0; i \u003c= 10; i += 2) { System.out.println(i); } ⚠️ Attention aux pièges Si tu oublies de mettre à jour la variable de boucle (i++), tu risques une boucle infinie. La condition est évaluée à chaque tour. Dès qu’elle est fausse, la boucle s’arrête. 🧠 À retenir La boucle for est idéale pour les répétitions contrôlées. Elle comporte 3 parties : initialisation, condition, incrémentation. Elle est souvent utilisée avec des compteurs, des indices de tableaux, ou pour générer des suites. 🔹 Exercice 1 : Afficher les entiers de 1 à 5 Utilise une boucle for pour afficher les nombres de 1 à 5, chacun sur une nouvelle ligne.\npublic class Exo1 { public static void main(String[] args) { // Boucle de 1 à 5 } } Sortie attendue 1 2 3 4 5 🔹 Exercice 2 : Nombres pairs entre 0 et 10 Utilise une boucle for pour afficher uniquement les nombres pairs de 0 à 10.\npublic class Exo2 { public static void main(String[] args) { // Boucle pour les nombres pairs } } Sortie attendue 0 2 4 6 8 10 🔹 Exercice 3 : Compte à rebours Utilise une boucle for pour faire un compte à rebours de 5 à 1, puis affiche \"Go !\" à la fin.\npublic class Exo3 { public static void main(String[] args) { // Compte à rebours } } Sortie attendue 5 4 3 2 1 Go ! 🔹 Exercice 4 : Afficher un tableau Utilise une boucle for pour afficher le tableau suivant : {43,256,3,796,35,67}\npublic class Exo3 { public static void main(String[] args) { // Compte à rebours } } Sortie attendue 43 256 3 796 35 67 🔹 Exercice 5 : Afficher un tableau sexy Utilise une boucle for pour afficher le tableau suivant : {43,256,3,796,35,67}\npublic class Exo3 { public static void main(String[] args) { // Compte à rebours } } Sortie attendue [43,256,3,796,35,67]",
    "description": "🔁 Les boucles for en Java La boucle for est utilisée pour répéter une série d’instructions un certain nombre de fois. C’est un outil fondamental pour parcourir des suites de valeurs, des tableaux, ou exécuter du code un nombre précis de fois.\n🧱 Structure d’une boucle for for (initialisation; condition; incrémentation) { // instructions à répéter } Partie Rôle initialisation Déclare et initialise une variable de boucle condition Détermine si la boucle continue ou s’arrête incrémentation Modifie la variable de boucle à chaque itération 🔂 Exemple de base for (int i = 0; i \u003c 5; i++) { System.out.println(\"i vaut : \" + i); } 🔎 Ce code va afficher :",
    "tags": [],
    "title": "For",
    "uri": "/420-111/9-structures-de-controles/boucles/1-for/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Structures De ControlesConditionnelles",
    "content": "🧩 Les conditions if, else if et else en Java Les structures conditionnelles permettent de prendre des décisions dans le programme : on peut exécuter certains blocs de code uniquement si une condition est vraie.\nC’est fondamental pour écrire des programmes intelligents, interactifs et dynamiques !\n❓ La structure if La condition if permet de tester si l’expression qui est entre parenthèse est vraie (true). Si c’est le cas, le bloc de code associé est exécuté.\nif (âge \u003e= 18) { System.out.println(\"Majeur\"); } 📌 Si la condition est fausse (false), le code dans les {} est ignoré.\n🔀 Ajouter une alternative : else On peut ajouter un else pour exécuter un autre bloc si la condition est fausse.\nif (note \u003e= 60) { System.out.println(\"Réussi\"); } else { System.out.println(\"Échoué\"); } 🔁 Plusieurs cas : else if Quand on veut tester plusieurs conditions différentes, on utilise else if.\nif (note \u003e= 90) { System.out.println(\"Excellent\"); } else if (note \u003e= 75) { System.out.println(\"Très bien\"); } else if (note \u003e= 60) { System.out.println(\"Passable\"); } else { System.out.println(\"Échec\"); } 💡 Le programme s’arrête dès qu’une condition est vraie. Les blocs suivants ne sont pas évalués.\n⚠️ Syntaxe à respecter if (condition) { // Bloc 1 } else if (autreCondition) { // Bloc 2 } else { // Bloc 3 } ✅ Toujours : Des parenthèses autour de la condition. Des accolades {} autour du bloc de code (même si une seule ligne, c’est plus clair et plus sûr !). 🧠 Exemples simples int age = 17; if (age \u003e= 18) { System.out.println(\"Adulte\"); } else { System.out.println(\"Mineur\"); } int score = 82; if (score \u003e= 90) { System.out.println(\"A\"); } else if (score \u003e= 80) { System.out.println(\"B\"); } else if (score \u003e= 70) { System.out.println(\"C\"); } else { System.out.println(\"Échec\"); } 🔥 À retenir if teste une condition : si elle est vraie, le bloc est exécuté. else permet d’exécuter un bloc si la condition est fausse. else if permet d’enchaîner plusieurs cas différents. Une seule branche est exécutée, même si plusieurs conditions sont vraies. N’oublie pas les accolades {} et les parenthèses () ! 🔹 Exercice 1 : Majeur ou mineur Crée une variable age, puis affiche \"Majeur\" si la personne a 18 ans ou plus, sinon affiche \"Mineur\".\npublic class Exo1 { public static void main(String[] args) { // Déclaration de l’âge // Vérification de la majorité } } Sortie attendue (si age = 17) Mineur 🔹 Exercice 2 : Résultat d’un examen Crée une variable note, puis affiche :\n\"Excellent\" si la note ≥ 90 \"Très bien\" si la note ≥ 75 \"Passable\" si la note ≥ 60 \"Échec\" sinon public class Exo2 { public static void main(String[] args) { // Déclaration de la note // Conditions selon la note } } Sortie attendue (si note = 78) Très bien 🔹 Exercice 3 : Type de personnage Crée une variable niveau, puis affiche :\n\"Débutant\" si le niveau \u003c 10 \"Intermédiaire\" si le niveau est entre 10 et 19 \"Avancé\" si le niveau est entre 20 et 29 \"Maître\" à partir de 30 public class Exo3 { public static void main(String[] args) { // Déclaration du niveau // Classification du personnage } } Sortie attendue (si niveau = 25) Avancé",
    "description": "🧩 Les conditions if, else if et else en Java Les structures conditionnelles permettent de prendre des décisions dans le programme : on peut exécuter certains blocs de code uniquement si une condition est vraie.\nC’est fondamental pour écrire des programmes intelligents, interactifs et dynamiques !\n❓ La structure if La condition if permet de tester si l’expression qui est entre parenthèse est vraie (true). Si c’est le cas, le bloc de code associé est exécuté.",
    "tags": [],
    "title": "If Else",
    "uri": "/420-111/9-structures-de-controles/conditionnelles/if-else/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Structures De Controles",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Conditionnelles",
    "uri": "/420-111/9-structures-de-controles/conditionnelles/if-else/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Opérateurs",
    "content": "Les opérateurs arithmétiques permettent d’effectuer des calculs mathématiques de base sur des valeurs numériques (int, double, etc.).\nIls sont très souvent utilisés pour manipuler les nombres entiers ou à virgule, que ce soit pour additionner des scores, calculer des moyennes, ajuster des quantités, etc.\n✋ Les opérateurs de base Voici les 5 opérateurs arithmétiques principaux :\nOpérateur Nom Exemple Résultat (si a = 10, b = 3) + Addition a + b 13 - Soustraction a - b 7 * Multiplication a * b 30 / Division a / b 3 (entier !) % Modulo a % b 1 (reste de la division) 💡 En Java :\nSi les deux opérandes sont des entiers, la division (/) retourne un entier. Pour avoir un résultat décimal, au moins un des deux nombres doit être un float ou un double. int a = 10; int b = 3; System.out.println(a / b); // 3 double x = 10; double y = 3; System.out.println(x / y); // 3.333333... ⛏️ Modulo : C’est quoi ce truc % ? L’opérateur modulo % donne le reste d’une division.\nint reste = 15 % 8; // 7 Très utile pour :\nVérifier si un nombre est pair ou impair : n % 2 == 0 Créer des cycles (i % 5 retourne un nombre de 0 à 4) 🔄 Raccourcis utiles Tu peux combiner une opération avec une affectation grâce à ces raccourcis :\nOpération normale Version raccourcie x = x + 1; x += 1; x = x - 5; x -= 5; x = x * 3; x *= 3; x = x / 2; x /= 2; x = x % 4; x %= 4; 💡 Ces raccourcis rendent le code plus compact et plus clair.\n🔁 Incrémentation et décrémentation Java propose aussi deux opérateurs spéciaux pour ajouter ou soustraire 1 :\nOpérateur Nom Exemple Effet ++ Incrémentation x++ ou ++x Ajoute 1 à x -- Décrémentation x-- ou --x Soustrait 1 à x ⚠️ La différence entre x++ et ++x est subtile et ne compte qu’en contexte d’expression :\nint x = 5; int y = x++; // y = 5, x devient 6 int a = 5; int b = ++a; // a devient 6, b = 6 🧪 Exemples simples int a = 8; int b = 5; int somme = a + b; // 13 int produit = a * b; // 40 int quotient = a / b; // 1 (car division entière) int reste = a % b; // 3 🔥 À retenir / fait une division entière si les deux opérandes sont entiers. % donne le reste de la division. Les raccourcis +=, -=, etc., simplifient l’écriture du code. Pour des calculs précis avec des nombres décimaux, utilise double ou float. 🔢 Exercice – Calculette Java 🎯 Objectif : S’entraîner à utiliser les opérateurs arithmétiques, le modulo, les raccourcis et l’incrémentation.\n📝 Consignes : Écris un programme Java qui fait les étapes suivantes :\n🧩 Partie 1 : Opérations de base Crée deux entiers a = 17 et b = 4.\nCalcule et affiche :\nLa somme La différence Le produit Le quotient entier Le reste (modulo) 🧩 Partie 2 : Utilisation des raccourcis Déclare une variable x = 10.\nApplique successivement :\nx += 5; x *= 2; x %= 7; Affiche x après chaque étape.\n🧩 Partie 3 : Incrémentation et décrémentation Crée une variable int n = 5;\nApplique et affiche les résultats :\nint a = n++; int b = ++n; Affiche les valeurs de a, b et n. 🧪 Exemple de sortie attendue (abrégée) : Somme : 21 Différence : 13 Produit : 68 Quotient entier : 4 Reste : 1 x après += 5 : 15 x après *= 2 : 30 x après %= 7 : 2 a = 5 b = 7 n = 7",
    "description": "Les opérateurs arithmétiques permettent d’effectuer des calculs mathématiques de base sur des valeurs numériques (int, double, etc.).\nIls sont très souvent utilisés pour manipuler les nombres entiers ou à virgule, que ce soit pour additionner des scores, calculer des moyennes, ajuster des quantités, etc.\n✋ Les opérateurs de base Voici les 5 opérateurs arithmétiques principaux :\nOpérateur Nom Exemple Résultat (si a = 10, b = 3) + Addition a + b 13 - Soustraction a - b 7 * Multiplication a * b 30 / Division a / b 3 (entier !) % Modulo a % b 1 (reste de la division) 💡 En Java :",
    "tags": [],
    "title": " 🧮 Les opérateurs arithmétiques en Java",
    "uri": "/420-111/5-operateurs/arithmetique/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Variables \u0026 Types \u003e Variables",
    "content": "En Java, une constante est une variable dont la valeur ne peut plus être modifiée après son initialisation.\nElles sont utilisées pour représenter des valeurs fixes (comme un taux de taxe, un seuil, une unité de mesure, etc.) qui ne doivent pas changer pendant l’exécution du programme.\n✅ Comment déclarer une constante ? Pour déclarer une constante, on utilise le mot-clé final. Cela indique que la valeur ne pourra être assignée qu’une seule fois.\npublic class ExempleConstantes { public static void main(String[] args) { // Déclaration d'une constante locale final double TAUX_TPS = 0.20; System.out.println(TAUX_TPS); // Affiche : 0.20 } } 📝 Remarque : Par convention, on écrit les noms de constantes en majuscules, avec des underscores _ pour séparer les mots.\n❓ Pourquoi utiliser des constantes ? Utiliser des constantes a plusieurs avantages :\n💡 Cela rend le code plus clair : on comprend que la valeur ne changera pas. ✅ Cela évite les erreurs involontaires en empêchant toute modification de la valeur. 📚 C’est aussi une bonne pratique pour centraliser et réutiliser des valeurs fixes. ⚠️ Que se passe-t-il si on essaie de modifier une constante ? Le compilateur Java lève une erreur si on tente de modifier une constante après son initialisation :\npublic class ExempleConstantes { public static void main(String[] args) { final double TAUX_TPS = 0.20; // ❌ Erreur de compilation : impossible de modifier une constante TAUX_TPS = 0.30; System.out.println(TAUX_TPS); } } 🎯 Exercice 1 🔧 Consigne :\nDéclare une constante nommée PI de type double avec la valeur 3.1416. Affiche la valeur de cette constante avec System.out.println. Ensuite, essaie de modifier la valeur de PI en 3.14 pour voir ce que Java affiche. 📝 Exemple attendu à l’écran si on ne modifie pas la constante :\n3.1416 🔍 Tu devrais aussi voir une erreur de compilation si tu essaies de modifier la constante.\nRéponse public class ExempleConstante { public static void main(String[] args) { final double PI = 3.1416; System.out.println(PI); // PI = 3.14; // ❌ Erreur : impossible de modifier une constante } }",
    "description": "En Java, une constante est une variable dont la valeur ne peut plus être modifiée après son initialisation.\nElles sont utilisées pour représenter des valeurs fixes (comme un taux de taxe, un seuil, une unité de mesure, etc.) qui ne doivent pas changer pendant l’exécution du programme.\n✅ Comment déclarer une constante ? Pour déclarer une constante, on utilise le mot-clé final. Cela indique que la valeur ne pourra être assignée qu’une seule fois.",
    "tags": [],
    "title": "Constantes",
    "uri": "/420-111/3-variables-types/variables/constantes/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Variables \u0026 Types",
    "content": "Une variable, c’est comme une boîte dans laquelle on range une valeur. Elle a toujours trois éléments essentiels :\n👉 type nom = valeur;\nPar exemple :\nint var1 = 42; Ici :\n🧾 int → le type de la variable (entier) 🏷️ var1 → le nom de la variable 🎁 42 → la valeur qu’elle contient 📢 Afficher une variable Tu peux afficher une variable comme tu afficherais n’importe quelle valeur :\nint var1 = 42; System.out.println(var1); // affiche 42 🛠️ Déclaration \u0026 Initialisation Quand on écrit int var1 = 42;, on fait deux choses :\n✅ Déclaration (on dit que var1 existe et qu’elle est de type int) ✅ Initialisation (on lui donne la valeur 42) -\u003e L’initialisation c’est la première attribution d’une valeur à une variable. C’est ce qui rend une variable déclarée utilisable. Mais on peut aussi déclarer d’abord, et initialiser plus tard :\n//Déclaration int var1; //initialisation var1 = 3; System.out.println(var1); // affiche 3 ⚠️ Attention à l’utilisation avant l’initialisation Si tu déclares une variable mais que tu essaies de l’utiliser sans lui avoir donné de valeur, Java ne sera pas content :\nint var1; System.out.println(var1); 🔴 Résultat :\nerror: variable var1 might not have been initialized System.out.println(var1); ^ 1 error Java exige que chaque variable soit initialisée avant son utilisation. Sinon, il refusera de compiler le programme.\n🎯 Exercice 1 🔧 Consigne :\nDéclare trois variables entières :\nage taille anneeNaissance Initialise-les avec 16, 170 et 2008 respectivement.\nAffiche chaque variable avec System.out.println.\n📝 Exemple attendu à l’écran :\n16 170 2008 Réponse int age = 16; int taille = 170; int anneeNaissance = 2008; System.out.println(age); System.out.println(taille); System.out.println(anneeNaissance);",
    "description": "Une variable, c’est comme une boîte dans laquelle on range une valeur. Elle a toujours trois éléments essentiels :\n👉 type nom = valeur;\nPar exemple :\nint var1 = 42; Ici :\n🧾 int → le type de la variable (entier) 🏷️ var1 → le nom de la variable 🎁 42 → la valeur qu’elle contient 📢 Afficher une variable Tu peux afficher une variable comme tu afficherais n’importe quelle valeur :",
    "tags": [],
    "title": "Variables",
    "uri": "/420-111/3-variables-types/variables/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation",
    "content": "This is a new chapter.",
    "description": "This is a new chapter.",
    "tags": [],
    "title": "Intro",
    "uri": "/420-111/intro/java/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Intro",
    "content": "Introduction C’est quoi un language de programmation? Java est l’un des langages les plus populaires en 2025 selon TIOBE https://www.tiobe.com/tiobe-index/\nJava fonctionne sur plusieurs systèmes d’exploitation (Windows, Mac, Linux, Raspberry Pi, etc.) Java est assez facile à apprendre, surtout pour les débutants, et il est agréable à utiliser.\nSi vous connaissez déjà un peu C++ ou C#, passer à Java est simple, et l’inverse aussi. Il facilite donc la transition pour les développeurs entre ces langages\nComme Java est un langage orienté objet, il permet d’écrire du code bien organisé et réutilisable, ce qui facilite la création de programmes.\nIl peut être utilisé pour:\ncréer des applications mobiles, surtout sur les téléphones Android ; développer des logiciels pour ordinateur (Windows, Mac, etc.) ; concevoir des applications web, comme les sites internet interactifs ; mettre en place des serveurs web et des serveurs d’applications ; programmer des jeux vidéo ; se connecter à des bases de données pour lire ou sauvegarder des informations ; et bien d’autres choses encore ! Qu’est-ce que Java ? Java est un langage de programmation orienté objet et indépendant de la plateforme, ce qui signifie que vous pouvez écrire du code Java sur un système d’exploitation (par exemple Windows) et l’exécuter sur n’importe quel autre système (par exemple Linux, Mac) sans modification. Java suit le principe du “write once, run anywhere”.\nIntroduction_à_l’environnement_Java POUR LINUX wget https://www.oracle.com/java/technologies/downloads/?er=221886 sudo dpkg -i Downloads/jdk-23_linux-x64_bin.deb OU\nsudo apt update sudo apt install openjdk-11-jdk POUR WINDOWS Aller sur le site officiel de oracle\nNotepad++ Jusqu’à nouvel ordre vous ne pourrez coder exclusivement qu’avec Notepad++ dans mon cours.\nVous pouvez changer les couleurs. Je suggère DansLeRush-Dark, mais vous pouvez le personnaliser comme vous voulez.",
    "description": "Introduction C’est quoi un language de programmation? Java est l’un des langages les plus populaires en 2025 selon TIOBE https://www.tiobe.com/tiobe-index/\nJava fonctionne sur plusieurs systèmes d’exploitation (Windows, Mac, Linux, Raspberry Pi, etc.) Java est assez facile à apprendre, surtout pour les débutants, et il est agréable à utiliser.",
    "tags": [],
    "title": "Java",
    "uri": "/420-111/1-intro/java/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Exercices",
    "content": "Exo 1 Objectif : Créer un programme Java qui affiche ceci.\n➡️ Sortie attendu :\nNom : Alice Âge : 23 Ville : Toulouse Instructions :\nUtilise System.out.println(). Respecte l’indentation. N’oublie pas le point-virgule ; à chaque ligne. Exo 2 Objectif : Reproduis le même affichage que l’exercice 1, mais sur une seule ligne.\n➡️ Exemple attendu :\nNom : Alice | Âge : 23 | Ville : Toulouse Instructions :\nUtilise System.out.print() (sans println()). Utilise \\n si besoin. Respecte les espaces entre les mots (convention d’espacement). Exo 3 Objectif : Créer un programme qui affiche les lignes suivantes :\nNom : \"Alice\" Chemin du fichier : C:\\Users\\Alice Instructions :\nUtilise System.out.println(). Utilise les caractères \\\" et \\\\. Exo 4 Question écrite (pas de code) :\nDans le programme ci-dessous, relève 5 erreurs de convention de nommage ou d’espacement, puis corrige-les.\npublic class profilUtilisateur{ public static void main(String[]args){ int AgeUtilisateur=25; System.out.println( \"Age :\"+AgeUtilisateur ); } } Exo 5 Réécris proprement le programme suivant avec une indentation correcte, sans modifier le code fonctionnel :\npublic class Bonjour{ public static void main(String[]args){ System.out.println(\"Bonjour\"); if(true){ System.out.println(\"Ceci est un test\"); } } } Exo 6 Objectif : Créer et compiler ton fichier Java dans ton terminal (Notepad++ + commande).\nCrée un fichier nommé Bienvenue.java. Écris un programme qui affiche : Bienvenue dans le monde de Java ! Compile avec : javac Bienvenue.java Exécute avec : java Bienvenue Exo 7 Objectif : Affiche un profil formaté et aligné grâce à System.out.printf() :\n➡️ Exemple attendu :\nNom complet : Julie MARTIN Âge : 28 Ville : Lyon Instructions :\nUtilise une chaîne multiligne (\"\"\") Exo 8 Réécris proprement le programme suivant\nimport java.util.Scanner; public class solution1_8{ /* * 0 1 2 * 3 4 5 * 6 7 8 */ public static void main(String[] args) { Scanner scan = new Scanner(System.in); char curPlayer ='y'; int nbTours = 0; char[][] grille ={ {' ', ' ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '} }; while (!checkIfCharWon(curPlayer, grille)\u0026\u0026 nbTours \u003c 9){ afficherGrille(grille); if (curPlayer == 'x') { curPlayer= 'o'; } else{ curPlayer = 'x'; } System.out.println(\"C'est au tour de : \"+curPlayer); System.out.print(\"Choisissez une case : \"); int choix = scan.nextInt(); scan.nextLine(); grille[choix/3][choix % 3] = curPlayer; nbTours++; } afficherGrille(grille); if (checkIfCharWon(curPlayer, grille)){ System.out.println(\"Le gagnant est : \" + curPlayer); } else { System.out.println(\"Draw\"); } } public static void afficherGrille(char[][] grille) { System.out.println(); for (int i= 0; i \u003c grille.length; i++) { for (int j = 0; j\u003cgrille.length; j++) { System.out.print(\" \" + grille[i][j]); if (j % 3 != 2) { System.out.print(\" |\"); } else{ System.out.print(\"\\n\"); } } if(i % 3 != 2){ System.out.println(\"-----------\"); } } System.out.println(); } public static boolean checkIfCharWon(char joueur, char[][] grille) { int somme; for (int i = 0; i \u003c grille.length; i++) { somme = 0; for (int j = 0; j \u003c grille.length; j++) { if (grille[i][j] == joueur){ somme++; } } if (somme == 3) { return true; } } for (int i = 0; i \u003c grille.length; i++) { somme = 0; for (int j = 0; j \u003c grille.length; j++) { if (grille[j][i]==joueur){ somme ++; } } if(somme == 3) { return true; } } if (grille[0][0] == joueur \u0026\u0026 grille[1][1] == joueur \u0026\u0026 grille[2][2] == joueur){ return true; } if (grille[2][0] == joueur \u0026\u0026 grille[1][1]==joueur \u0026\u0026 grille[0][2] == joueur) { return true; } return false; } } Exo 9 Écris un code, sans copier-coller de nulle part, qui affiche Hello World. Idéalement, ne regarde pas les notes de cours.\nSolutions",
    "description": "Exo 1 Objectif : Créer un programme Java qui affiche ceci.\n➡️ Sortie attendu :\nNom : Alice Âge : 23 Ville : Toulouse Instructions :\nUtilise System.out.println(). Respecte l’indentation. N’oublie pas le point-virgule ; à chaque ligne. Exo 2 Objectif : Reproduis le même affichage que l’exercice 1, mais sur une seule ligne.\n➡️ Exemple attendu :\nNom : Alice | Âge : 23 | Ville : Toulouse Instructions :\nUtilise System.out.print() (sans println()). Utilise \\n si besoin. Respecte les espaces entre les mots (convention d’espacement). Exo 3 Objectif : Créer un programme qui affiche les lignes suivantes :",
    "tags": [],
    "title": "Série 1",
    "uri": "/420-111/exercices/serie1/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Structures De Controles \u003e Boucles",
    "content": "🔁 La boucle while en Java La boucle while permet de répéter des instructions tant qu’une condition est vraie. C’est une structure de contrôle très utile quand on ne connaît pas à l’avance le nombre d’itérations.\n🧱 Structure d’une boucle while while (condition) { // instructions à exécuter } Élément Rôle condition Tant qu’elle est vraie, la boucle continue bloc de code Ce qui est exécuté à chaque tour 🔂 Exemple simple int i = 0; while (i \u003c 5) { System.out.println(\"i vaut : \" + i); i++; } 🔎 Ce code va afficher :\ni vaut : 0 i vaut : 1 i vaut : 2 i vaut : 3 i vaut : 4 💡 La condition est testée avant chaque itération. Dès qu’elle devient fausse, la boucle s’arrête.\n🎯 Quand utiliser une boucle while ? Utilise while quand :\nTu ne sais pas à l’avance combien de fois tu vas répéter l’action Tu veux réagir à une condition dynamique, par exemple une entrée utilisateur Tu veux attendre qu’une certaine situation se produise ⚠️ Attention à la condition ! Si la condition ne devient jamais fausse, la boucle tourne à l’infini :\nint i = 0; while (i \u003c 5) { System.out.println(i); // i++; ← Oublié ! Boucle infinie } 🧯 Toujours vérifier que la condition peut devenir fausse à un moment donné.\n🔁 Exemples pratiques 🧮 Lire jusqu’à ce que l’utilisateur tape 0 Scanner scanner = new Scanner(System.in); int n = -1; while (n != 0) { System.out.print(\"Entrez un nombre (0 pour arrêter) : \"); n = scanner.nextInt(); } ⏳ Boucle d’attente boolean telechargeFini = false; while (!telechargeFini) { // Vérifie l'état du téléchargement // ... } 🧠 À retenir La boucle while teste la condition avant chaque tour. Elle est parfaite pour les répétitions indéterminées. Toujours s’assurer qu’un élément fait évoluer la condition, sinon boucle infinie ! 🔹 Exercice 1 : Compter jusqu’à 5 Utilise une boucle while pour afficher les nombres de 1 à 5.\npublic class Exo1 { public static void main(String[] args) { // Initialisation de la variable // Boucle while de 1 à 5 } } Sortie attendue 1 2 3 4 5 🔹 Exercice 2 : Compte à rebours Utilise une boucle while pour afficher un compte à rebours de 5 à 1, puis affiche \"Go !\"\npublic class Exo2 { public static void main(String[] args) { // Initialisation de la variable // Boucle de décompte } } Sortie attendue 5 4 3 2 1 Go ! 🔹 Exercice 3 : Somme cumulée jusqu’à un seuil Utilise une boucle while pour additionner des nombres jusqu’à ce que la somme dépasse 20. À chaque tour, ajoute 5 et affiche la somme actuelle.\npublic class Exo3 { public static void main(String[] args) { // Initialisation de la somme // Boucle tant que la somme est ≤ 20 } } Sortie attendue Somme : 5 Somme : 10 Somme : 15 Somme : 20 Somme : 25 🔹 Exercice 4 : Afficher un tableau Utilise une boucle while pour afficher le tableau suivant : {43,256,3,796,35,67}\npublic class Exo3 { public static void main(String[] args) { // Compte à rebours } } Sortie attendue 43 256 3 796 35 67 🔹 Exercice 5 : Afficher un tableau sexy Utilise une boucle while pour afficher le tableau suivant : {43,256,3,796,35,67}\npublic class Exo3 { public static void main(String[] args) { // Compte à rebours } } Sortie attendue [43,256,3,796,35,67]",
    "description": "🔁 La boucle while en Java La boucle while permet de répéter des instructions tant qu’une condition est vraie. C’est une structure de contrôle très utile quand on ne connaît pas à l’avance le nombre d’itérations.\n🧱 Structure d’une boucle while while (condition) { // instructions à exécuter } Élément Rôle condition Tant qu’elle est vraie, la boucle continue bloc de code Ce qui est exécuté à chaque tour 🔂 Exemple simple int i = 0; while (i \u003c 5) { System.out.println(\"i vaut : \" + i); i++; } 🔎 Ce code va afficher :",
    "tags": [],
    "title": "While",
    "uri": "/420-111/9-structures-de-controles/boucles/2-while/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Structures De Controles",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Boucles",
    "uri": "/420-111/9-structures-de-controles/boucles/1-for/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Structures De ControlesConditionnelles",
    "content": "❓ L’opérateur ternaire en Java L’opérateur ternaire est une forme abrégée du if...else, qui permet d’écrire des conditions simples en une seule ligne.\nIl est souvent utilisé pour rendre le code plus concis, surtout lorsqu’on veut affecter une valeur selon une condition.\n🧰 Syntaxe de base (condition) ? valeurSiVrai : valeurSiFaux; C’est comme dire : “Si la condition est vraie, retourne ceci ; sinon, retourne cela.”\n📦 Exemple simple int âge = 20; String statut = (âge \u003e= 18) ? \"Majeur\" : \"Mineur\"; System.out.println(statut); // Affiche : Majeur ✳️ C’est équivalent à :\nString statut; if (âge \u003e= 18) { statut = \"Majeur\"; } else { statut = \"Mineur\"; } ⚙️ Utilisation typique L’opérateur ternaire est très utilisé pour affecter une valeur selon une condition :\ndouble note = 85; String résultat = (note \u003e= 60) ? \"Réussi\" : \"Échoué\"; On peut aussi l’utiliser directement dans un System.out.println() :\nSystem.out.println((note \u003e= 90) ? \"Excellent\" : \"À améliorer\"); 🛑 À éviter pour les cas complexes Même si l’opérateur ternaire est pratique, il devient illisible si la condition ou les valeurs sont longues :\n// Trop compliqué ! String grade = (score \u003e= 90) ? \"A\" : (score \u003e= 75) ? \"B\" : \"C\"; // 🤯 Difficile à lire et à maintenir ➡️ Dans ces cas-là, préfère une structure if...else classique.\n🔥 À retenir L’opérateur ternaire est une forme courte de if...else. Il s’écrit : (condition) ? valeurSiVrai : valeurSiFaux; Très utile pour initialiser une variable selon une condition. À éviter si la logique devient trop complexe ou trop imbriquée. Rends le code plus compact, mais pas toujours plus clair. 🔹 Exercice 1 : Adulte ou non Crée une variable int age et utilise l’opérateur ternaire pour initialiser une variable String statut :\n\"Majeur\" si l’âge est supérieur ou égal à 18 \"Mineur\" sinon Puis affiche la variable statut.\npublic class Exo1 { public static void main(String[] args) { // Déclaration de l’âge // Utilisation du ternaire pour déterminer le statut // Affichage } } Sortie attendue (si age = 15) Mineur 🔹 Exercice 2 : Résultat de l’élève Crée une variable int note, et utilise un opérateur ternaire pour afficher :\n\"Réussi\" si la note est supérieure ou égale à 60 \"Échoué\" sinon Astuce : Tu peux afficher directement dans le System.out.println().\npublic class Exo2 { public static void main(String[] args) { // Déclaration de la note // Affichage immédiat avec ternaire } } Sortie attendue (si note = 72) Réussi 🔹 Exercice 3 : Nombre pair ou impair Crée une variable int nombre, puis utilise un ternaire pour afficher :\n\"Pair\" si le nombre est divisible par 2 \"Impair\" sinon public class Exo3 { public static void main(String[] args) { // Déclaration du nombre // Affichage avec ternaire } } Sortie attendue (si nombre = 7) Impair",
    "description": "❓ L’opérateur ternaire en Java L’opérateur ternaire est une forme abrégée du if...else, qui permet d’écrire des conditions simples en une seule ligne.\nIl est souvent utilisé pour rendre le code plus concis, surtout lorsqu’on veut affecter une valeur selon une condition.\n🧰 Syntaxe de base (condition) ? valeurSiVrai : valeurSiFaux; C’est comme dire : “Si la condition est vraie, retourne ceci ; sinon, retourne cela.”\n📦 Exemple simple int âge = 20; String statut = (âge \u003e= 18) ? \"Majeur\" : \"Mineur\"; System.out.println(statut); // Affiche : Majeur ✳️ C’est équivalent à :",
    "tags": [],
    "title": "Ternaire",
    "uri": "/420-111/9-structures-de-controles/conditionnelles/ternaire/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Opérateurs \u003e Arithmétique",
    "content": "L’opérateur modulo (%) calcule le reste d’une division entière.\nint reste = 10 % 3; // Résultat : 1 Pourquoi ? 👉 Parce que 10 ÷ 3 = 3, reste 1. Le modulo, c’est donc ce qui reste après la division entière.\n📘 Comment il faut le lire int var = a % b; Cela renvoie le reste de la division de a par b.\n🔍 Le modulo côté mathématique 📐 1. Définition formelle En mathématiques, pour deux entiers a (le dividende) et b ≠ 0 (le diviseur), on peut écrire la division euclidienne ainsi :\n$$ a = b \\times q + r $$\noù :\nq est le quotient entier de la division (a / b) r est le reste, c’est ce que a % b retourne avec la contrainte : $$ 0 \\le r \u003c |b| $$\nDonc le modulo est ce reste r après avoir enlevé autant de fois que possible des multiples de b.\n🧮 2. Exemples concrets Exemple 1 : 17 % 5 On cherche combien de fois on peut mettre 5 dans 17, sans dépasser.\n$$ 17 = 5 \\times 3 + 2 $$\nDonc :\nQuotient q = 3 Reste r = 2 → 17 % 5 = 2 Exemple 2 : -13 % 4 Java retourne un reste qui a le même signe que le numérateur (ici -13), donc :\n$$ -13 = 4 \\times (-4) + 3 \\Rightarrow \\text{mais Java dira} \\quad -13 % 4 = -1 $$\nCar :\n$$ -13 = 4 \\times (-3) + (-1) $$\nJava choisit q = -3, r = -1\n🧠 Pourquoi c’est utile ? Le concept de modulo est fondamental en arithmétique, mais il est aussi omniprésent en informatique :\nDomaine Exemple d’usage Horloges Heure actuelle : (heure + durée) % 24 Couleurs Alterner 3 couleurs : index % 3 Cryptographie Chiffrement modulaire (a^b mod n) Maths discrètes Nombres premiers, congruences, théorèmes Programmation Boucles cycliques, alternance, etc. 📌 Résumé mathématique Terme Signification Division Trouver combien de fois b entre dans a Quotient q Partie entière de la division Reste r Ce qu’il reste après avoir soustrait q × b à a Modulo Le reste r → toujours entre 0 et b - 1 en math (Java va donner négatif ou 0 si a est négatif) 🎯 Cas concrets d’utilisation Le modulo peut paraître mystérieux au début, mais il est super utile dans beaucoup de cas pratiques :\n✅ 1. Savoir si un nombre est pair ou impair Un nombre pair donne un reste de 0 lorsqu’il est divisé par 2.\nint n = 12; if (n % 2 == 0) { System.out.println(\"Nombre pair\"); } else { System.out.println(\"Nombre impair\"); } 🔁 2. Créer des cycles / boucles périodiques Le modulo est parfait pour revenir à 0 après un certain nombre.\nExemple : afficher les jours de la semaine (0 à 6) en boucle :\nint i = 0; for (int tour = 0; tour \u003c 10; tour++) { System.out.println(\"Jour : \" + (i % 7)); i++; } ➡️ Affiche : 0, 1, 2, 3, 4, 5, 6, 0, 1, 2\n🧮 3. Découper en groupes ou colonnes Exemple : afficher les éléments d’un tableau 3 par 3 sur chaque ligne :\nfor (int i = 0; i \u003c 9; i++) { System.out.print(i + \" \"); if ((i + 1) % 3 == 0) { System.out.println(); // sauter à la ligne } } ➡️ Affiche :\n0 1 2 3 4 5 6 7 8 🧩 4. Alterner une action un coup sur deux for (int i = 0; i \u003c 6; i++) { if (i % 2 == 0) { System.out.println(i + \" → visible\"); } else { System.out.println(i + \" → caché\"); } } ❗ À savoir : Modulo avec nombres négatifs En Java, le signe du résultat du modulo suit le premier opérande (le numérateur).\nSystem.out.println( 10 % 3); // 1 System.out.println(-10 % 3); // -1 System.out.println( 10 % -3); // 1 System.out.println(-10 % -3); // -1 👉 Cela peut avoir un impact si tu utilises % pour des positions dans un tableau ou des cycles — il faut parfois ajuster :\nint mod = ((-1 % 7) + 7) % 7; // renvoie 6 au lieu de -1 🧪 Exemples à tester System.out.println(15 % 4); // 3 System.out.println(20 % 5); // 0 System.out.println(13 % 10); // 3 Exercices Quelle est la solution à ce calcul : 45 % 12?\nQuelle est la solution à ce calcul : 234 % 33?\nQuelle est la solution à ce calcul : 2345765432 % 3242?\nMentalement, faites le calcul suivant : 1234123536432435646734235523532 % 2\nRéaliser un programme qui écrit tous les chiffres non divisible par 6 entre 1 et 100",
    "description": "L’opérateur modulo (%) calcule le reste d’une division entière.\nint reste = 10 % 3; // Résultat : 1 Pourquoi ? 👉 Parce que 10 ÷ 3 = 3, reste 1. Le modulo, c’est donc ce qui reste après la division entière.\n📘 Comment il faut le lire int var = a % b; Cela renvoie le reste de la division de a par b.\n🔍 Le modulo côté mathématique 📐 1. Définition formelle En mathématiques, pour deux entiers a (le dividende) et b ≠ 0 (le diviseur), on peut écrire la division euclidienne ainsi :",
    "tags": [],
    "title": "⛏️ Le modulo `%` : Le reste utile",
    "uri": "/420-111/5-operateurs/arithmetique/modulo/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Opérateurs",
    "content": "Les opérateurs de comparaison permettent de comparer deux valeurs pour savoir si elles sont égales, différentes, plus grandes, etc.\n🎯 Ils sont essentiels dans les conditions (if, while, etc.) car ils renvoient toujours un résultat de type boolean (true ou false).\n🧪 Les 6 opérateurs de comparaison de base Opérateur Signification Exemple (a = 5, b = 8) Résultat == Égal à a == b false != Différent de a != b true \u003c Inférieur à a \u003c b true \u003e Supérieur à a \u003e b false \u003c= Inférieur ou égal à a \u003c= b true \u003e= Supérieur ou égal à a \u003e= b false 🧠 Important à retenir == ne signifie pas “affecter une valeur”, mais “comparer l’égalité”. Ne confonds pas = (affectation) et == (comparaison). int x = 10; // OK : on donne la valeur 10 à x if (x == 10) { // OK : on teste si x est égal à 10 System.out.println(\"x vaut 10 !\"); } 🧠 Comparaison entre différents types Tu peux comparer :\nDeux int, double, char, etc. Un int avec un double → Java fait une conversion automatique. int a = 5; double b = 5.0; System.out.println(a == b); // true 💡 Comparaison de char Les char peuvent aussi être comparés : en fait, ils sont traités comme des nombres Unicode.\nchar a = 'A'; char b = 'B'; System.out.println(a \u003c b); // true (car 'A' = 65, 'B' = 66) 🚫 Comparer des objets (comme String) avec == ❌ ⚠️ En Java, == compare les adresses mémoire pour les objets. Il ne faut jamais l’utiliser pour comparer des chaînes de caractères (String).\nUtilise plutôt .equals() :\nString nom = \"Java\"; System.out.println(nom == \"Java\"); // ⚠️ parfois true, parfois false System.out.println(nom.equals(\"Java\")); // ✅ toujours true si les textes sont égaux 🧪 Exemples concrets int age = 18; if (age \u003e= 18) { System.out.println(\"Tu peux voter !\"); } else { System.out.println(\"Trop jeune 😅\"); } int a = 10; int b = 15; boolean test1 = a != b; // true boolean test2 = a == 10; // true boolean test3 = a \u003e b; // false 🔍 Résumé visuel Symbole Teste si… Résultat boolean == Deux valeurs sont égales true ou false != Différentes true ou false \u003c Inférieure true ou false \u003e Supérieure true ou false \u003c= Inférieure ou égale true ou false \u003e= Supérieure ou égale true ou false 🎯 Astuce 💡 En Java, toute comparaison renvoie un boolean, ce qui permet de l’utiliser directement dans une condition :\nif (score \u003e= 60) { System.out.println(\"Réussi !\"); } 🧠 Exercices – Les opérateurs de comparaison en Java 📘 Partie 1 : Théorie – Vrai ou Faux ? Consigne : Indique si chaque expression retourne true ou false en Java.\n7 == 7 → ❓ 5 != 10 → ❓ 4 \u003e 9 → ❓ 12 \u003c= 12 → ❓ 3.0 == 3 → ❓ 'A' \u003c 'Z' → ❓ 'a' == 'A' → ❓ 🧠 Partie 2 : Lecture de code Consigne : Que va afficher ce programme ?\nchar c1 = 'B'; char c2 = 'b'; System.out.println(c1 \u003c c2);",
    "description": "Les opérateurs de comparaison permettent de comparer deux valeurs pour savoir si elles sont égales, différentes, plus grandes, etc.\n🎯 Ils sont essentiels dans les conditions (if, while, etc.) car ils renvoient toujours un résultat de type boolean (true ou false).\n🧪 Les 6 opérateurs de comparaison de base Opérateur Signification Exemple (a = 5, b = 8) Résultat == Égal à a == b false != Différent de a != b true \u003c Inférieur à a \u003c b true \u003e Supérieur à a \u003e b false \u003c= Inférieur ou égal à a \u003c= b true \u003e= Supérieur ou égal à a \u003e= b false 🧠 Important à retenir == ne signifie pas “affecter une valeur”, mais “comparer l’égalité”. Ne confonds pas = (affectation) et == (comparaison). int x = 10; // OK : on donne la valeur 10 à x if (x == 10) { // OK : on teste si x est égal à 10 System.out.println(\"x vaut 10 !\"); } 🧠 Comparaison entre différents types Tu peux comparer :",
    "tags": [],
    "title": "🍯 Les opérateurs de comparaison en Java",
    "uri": "/420-111/5-operateurs/comparaison/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation",
    "content": "Installation Lien d’instalation\nInstallation des extensions** Ouvrez la barre latérale de gauche dans VSCode. Cliquez sur l’icône des extensions ou utilisez le raccourci clavier Ctrl + Shift + X. Recherchez Language Support for Java(TM) by Red Hat et installez l’extension. Recherchez Debugger for Java et installez l’extension. Racourci clavier utilie Je n’ai pas testé la version Mac.\n🖱️ Raccourcis de base Action Windows/Linux Mac Copier Ctrl + C Cmd (⌘) + C Coller Ctrl + V Cmd (⌘) + V Annuler (Undo) Ctrl + Z Cmd (⌘) + Z 🔍 Édition avancée Action Windows/Linux Mac Sélectionner prochaine occurrence Ctrl + D Cmd (⌘) + D Ajouter plusieurs curseurs (haut/bas) Ctrl + Alt + ↑ / ↓ Option (⌥) + Cmd (⌘) + ↑ / ↓ Copier ligne vers le haut ou le bas Shift + Alt + ↑ / ↓ Shift + Option (⌥) + ↑ / ↓ Commenter rapidement des lignes ctrl + é Surligner un String dont on oublié les \", faites le \"et il s’ajoutera des deux côtés.",
    "description": "Installation Lien d’instalation\nInstallation des extensions** Ouvrez la barre latérale de gauche dans VSCode. Cliquez sur l’icône des extensions ou utilisez le raccourci clavier Ctrl + Shift + X. Recherchez Language Support for Java(TM) by Red Hat et installez l’extension. Recherchez Debugger for Java et installez l’extension. Racourci clavier utilie Je n’ai pas testé la version Mac.\n🖱️ Raccourcis de base Action Windows/Linux Mac Copier Ctrl + C Cmd (⌘) + C Coller Ctrl + V Cmd (⌘) + V Annuler (Undo) Ctrl + Z Cmd (⌘) + Z 🔍 Édition avancée Action Windows/Linux Mac Sélectionner prochaine occurrence Ctrl + D Cmd (⌘) + D Ajouter plusieurs curseurs (haut/bas) Ctrl + Alt + ↑ / ↓ Option (⌥) + Cmd (⌘) + ↑ / ↓ Copier ligne vers le haut ou le bas Shift + Alt + ↑ / ↓ Shift + Option (⌥) + ↑ / ↓ Commenter rapidement des lignes ctrl + é Surligner un String dont on oublié les \", faites le \"et il s’ajoutera des deux côtés.",
    "tags": [],
    "title": "VSCode",
    "uri": "/420-111/2-vscode/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Variables \u0026 Types \u003e Variables",
    "content": "En Java, il existe trois grands types de variables qu’on peut rencontrer dans une classe :\nLes variables d’instance Les variables de classe Les variables locales (dans les méthodes) 👤 Variables d’instance(Sera vue dans le cours de programmation orientée objet) Voir la théorie quand même Une variable d’instance est propre à chaque objet créé à partir d’une classe. Elle est déclarée dans la classe, mais en dehors des méthodes.\npublic class Voiture { int vitesse; // Variable d’instance } ➕ Caractéristiques : Chaque objet a sa propre copie. Sert à stocker des caractéristiques propres à un objet. Accessible dans la classe avec this.vitesse. 🏛️ Variables de classe Une variable de classe est partagée par tous les objets d’une classe. Elle est déclarée avec le mot-clé static.\npublic class Voiture { static int nombreDeVoitures = 0; // Variable de classe } ➕ Caractéristiques : Une seule copie partagée entre tous les objets. Sert à des valeurs communes à toute la classe. Accessible avec NomDeLaClasse.nomDeLaVariable. 🧪 Variables locales (dans une méthode) Une variable locale est déclarée à l’intérieur d’une méthode. Elle n’existe que pendant l’exécution de cette méthode.\npublic class Exemple { public static void main(String[] args) { int x = 5; // Variable locale System.out.println(x); } } ➕ Caractéristiques : Elle n’est accessible que dans la méthode où elle est déclarée. Elle n’est pas connue du reste de la classe. Elle est créée quand la méthode s’exécute, puis supprimée à la fin. 🔍 Comparatif complet Type de variable Où ? Mots-clés Accessible par Durée de vie Instance Dans la classe (aucun) l’objet Tant que l’objet existe Classe Dans la classe static la classe Tant que le programme tourne Locale (méthode) Dans une méthode (aucun) la méthode Pendant l’exécution de la méthode 🎯 Exercice 1 🔧 Consigne :\nCrée une classe Compteur.\nAjoute une variable de classe total de type int.\nDans main :\nDéclare une variable locale total et donne-lui la valeur 5, Affiche cette variable locale, Puis affiche la variable de classe en utilisant Compteur.total. 📝 Exemple attendu à l’écran :\n5 0 Réponse public class Compteur { static int total = 0; // variable de classe public static void main(String[] args) { int total = 5; // variable locale System.out.println(total); // locale System.out.println(Compteur.total); // de classe } } 🎯 Exercice 2 🔧 Consigne :\nCrée une classe Compteur.\nAjoute une variable de classe nombreAppels de type int.\nÉcris une méthode compter() qui :\ndéclare une variable locale appel de type int et l’initialise à 0, incrémente appel et nombreAppels, affiche les deux variables. Appelle compter() deux fois depuis main.\n📝 Exemple attendu à l’écran :\nappel = 1 nombreAppels = 1 appel = 1 nombreAppels = 2 Réponse public class Compteur { static int nombreAppels = 0; // variable de classe public static void compter() { int appel = 0; // variable locale : recréée à chaque appel appel++; nombreAppels++; System.out.println(\"appel = \" + appel); System.out.println(\"nombreAppels = \" + nombreAppels); } public static void main(String[] args) { compter(); compter(); } } --- 🎯 Exercice 3 🔧 Consigne :\nCrée une classe Score. Déclare une variable de classe points de type int, initialisée à 10. Dans main, déclare une variable locale qui porte le même nom : points, et initialise-la à 50. Affiche d’abord la variable locale, puis la variable de classe. 📝 Exemple attendu à l’écran :\n50 10 Réponse public class Score { static int points = 10; // variable de classe public static void main(String[] args) { int points = 50; // variable locale qui masque celle de classe System.out.println(points); // affiche 50 (locale) System.out.println(Score.points); // affiche 10 (de classe) } } 🧠 À retenir : Quand une variable locale a le même nom qu’une variable de classe, elle la masque dans le bloc où elle est déclarée. Pour accéder à la variable de classe malgré tout, on doit utiliser le nom de la classe (Score.points ici).\n🧪 Exercice 1 : Utilitaire static pour afficher un tableau Crée une méthode static qui prend un tableau d’entiers en paramètre et l’affiche ligne par ligne.\npublic class Exo1 { public static void main(String[] args) { int[] valeurs = {43, 256, 3, 796, 35, 67}; afficherTableau(valeurs); } } ✅ Objectif Comprendre comment appeler une méthode static sans créer d’objet. Utiliser une boucle for. 🎯 Sortie attendue 43 256 3 796 35 67 🧪 Exercice 1 (nouveau) : Variable static et calcul de moyenne Crée une classe avec :\nUne variable de classe static int total initialisée à 0, Une variable de classe static int compte initialisée à 0, Une méthode static ajouterNote(int note) qui ajoute la note à total, incrémente compte, Une méthode static afficherMoyenne() qui calcule la moyenne (total / compte) et l’affiche avec deux décimales. public class Exercice1 { // Déclare total et compte ici public static void ajouterNote(int note) { // Ajoute note à total, incrémente compte } public static void afficherMoyenne() { // Calcule et affiche la moyenne avec deux décimales } public static void main(String[] args) { ajouterNote(12); ajouterNote(15); ajouterNote(18); afficherMoyenne(); // Affiche : Moyenne : 15.00 } } 🧪 Exercice 2 (nouveau) : Variable locale dans une méthode static — calcul de la puissance Complète la méthode static calculerPuissance(int base, int exposant) qui calcule la puissance en utilisant une variable locale resultat initialisée à 1, et une boucle for.\npublic class Exercice2 { public static void calculerPuissance(int base, int exposant) { // Déclare resultat = 1 // Utilise une boucle for pour multiplier resultat par base exposant fois // Affiche le résultat } public static void main(String[] args) { calculerPuissance(2, 3); // Affiche : 8 calculerPuissance(5, 4); // Affiche : 625 } } 🧪 Exercice 3 : Variable static pour stocker un compteur d’appels Dans cette classe, crée une variable static qui compte le nombre de fois où la méthode direBonjour est appelée.\nLa méthode direBonjour affiche \"Bonjour !\" puis affiche le nombre d’appels effectués. public class Exercice3 { // Déclare la variable compteur ici public static void direBonjour() { // Incrémente compteur, affiche \"Bonjour !\" et le nombre d'appels } public static void main(String[] args) { direBonjour(); // Affiche Bonjour ! Nombre d’appels : 1 direBonjour(); // Affiche Bonjour ! Nombre d’appels : 2 direBonjour(); // Affiche Bonjour ! Nombre d’appels : 3 } }",
    "description": "En Java, il existe trois grands types de variables qu’on peut rencontrer dans une classe :\nLes variables d’instance Les variables de classe Les variables locales (dans les méthodes) 👤 Variables d’instance(Sera vue dans le cours de programmation orientée objet) Voir la théorie quand même Une variable d’instance est propre à chaque objet créé à partir d’une classe. Elle est déclarée dans la classe, mais en dehors des méthodes.\npublic class Voiture { int vitesse; // Variable d’instance } ➕ Caractéristiques : Chaque objet a sa propre copie. Sert à stocker des caractéristiques propres à un objet. Accessible dans la classe avec this.vitesse. 🏛️ Variables de classe Une variable de classe est partagée par tous les objets d’une classe. Elle est déclarée avec le mot-clé static.",
    "tags": [],
    "title": "Locale/Instance/Classe",
    "uri": "/420-111/3-variables-types/variables/locale-instance-classe/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Variables \u0026 Types",
    "content": "En Java, les types de données sont divisés en deux grandes familles :\n🧱 Les types primitifs (8 types) 🧩 Les types références (classes comme String, Scanner, etc.) Les types primitifs sont les briques de base de tout programme Java. Ils permettent de représenter les informations simples : nombres, caractères, booléens.\n🎁 Pourquoi différents types de “boîtes” ? En Java (et dans la plupart des langages), il existe plusieurs types de variables — ou “boîtes” — pour deux raisons principales :\n🧬 1. L’encodage est différent selon le contenu Un nombre entier (int, long, etc.) et un nombre à virgule (float, double) sont encodés différemment en mémoire.\nPar exemple, un int ne peut pas stocker de virgule, car son encodage ne prévoit que des nombres entiers. Un float ou un double, eux, utilisent un encodage spécial (norme IEEE 754) pour stocker les parties entière et décimale. 👉 Tu ne peux donc pas mettre un nombre à virgule dans une boîte faite pour des entiers — ça reviendrait à mettre de la soupe dans une boîte avec des trous : ça ne marche pas 😄.\n📦 2. La taille de la boîte varie selon les besoins Chaque type occupe une taille différente en mémoire (1, 2, 4 ou 8 octets). C’est important car :\nPlus la boîte est grosse, plus elle prend de place 🏋️‍♂️ Plus elle est petite, plus tu peux en stocker dans la mémoire 🪶 💡 Un exemple simple Imaginons que tu disposes de 128 bits de mémoire.\nVoici quelques façons de les remplir :\nCombinaison Total utilisé 2 long (2 × 64 bits) 128 bits 1 long (64) + 2 int (2 × 32) 128 bits 3 int (3 × 32) + 1 short (16) + 16 boolean (16 × 1) 128 bits Tu choisis donc le type selon :\n🧠 Ce que tu veux représenter 💾 Et l’espace mémoire que tu veux ou peux utiliser Nombres entiers :\nbyte, short, int, long Nombres à virgule flottante (Des approximations des Réels ou chiffres à virgules) :\nfloat, double Caractères :\nchar (représente un caractère Unicode sur 16 bits) Booléens :\nboolean (valeurs true ou false) 🧮 1. Les nombres entiers Ils servent à stocker des valeurs sans virgule, positives ou négatives. Chaque type utilise un certain nombre d’octets et a une plage de valeurs définie :\nType Taille (bits / octets) Valeur minimale Valeur maximale Exemple byte 8 bits (1 octet) -128 127 byte b = 10; short 16 bits (2 octets) -32 768 32 767 short s = 1000; int 32 bits (4 octets) -2 147 483 648 2 147 483 647 int i = 42; long 64 bits (8 octets) -9 223 372 036 854 775 808 9 223 372 036 854 775 807 long l = 100L; 🧠 Il existe des constantes utiles comme Integer.MAX_VALUE ou Long.MIN_VALUE pour obtenir ces limites sans les retenir.\n➕ Exemples de codage (positifs) : Décimal Binaire (16 bits) Hexadécimal 1 00000000 00000001 0001 2 00000000 00000010 0002 127 00000000 01111111 007F 255 00000000 11111111 00FF 🌊 2. Les nombres à virgule (flottants) Ils permettent de représenter des valeurs décimales (≈ des réels), avec une approximation en base 2.\nType Taille (bits / octets) Précision Valeur min / max Exemple float 32 bits (4 octets) ~7 chiffres significatifs ±1.4×10⁻⁴⁵ → ±3.4×10³⁸ float f = 3.14f; double 64 bits (8 octets) ~15-16 chiffres significatifs ±4.9×10⁻³²⁴ → ±1.8×10³⁰⁸ double d = 2.718; 💡 En Java, les littéraux décimaux sont des double par défaut. Pour un float, on ajoute un f à la fin.\n🔤 3. Le caractère Le type char représente un seul caractère Unicode (lettre, symbole, emoji, etc.) :\nType Taille (bits) Plage Unicode Exemple char 16 bits 0 à 65 535 (U+0000 à U+FFFF) char c = 'A'; 🎨 Les caractères sont entourés de quotes simples ('A') et peuvent contenir aussi des caractères spéciaux ou emojis :\nchar emoji = '💡'; char lettre = 'f'; 🔘 4. Le booléen Un boolean est un type logique qui représente vrai ou faux, souvent utilisé dans les conditions :\nType Valeurs possibles Exemple boolean true ou false boolean actif = false; 💬 Très utile pour représenter des états binaires : activé/désactivé, visible/caché, connecté/non connecté…\nboolean estPret = true; boolean estFini = false; ✨ Récap visuel Catégorie Types Rôle principal 🧮 Entiers byte, short, int, long Stocker des nombres sans virgule 🌊 Flottants float, double Représenter des valeurs décimales 🔤 Caractères char Représenter un caractère Unicode 🔘 Booléens boolean Représenter une valeur vraie ou fausse 🎯 Exercice 1 🔧 Consigne :\nCréer et afficher les variables avec le meilleur type possible\nVariable contenant l’âge d’une personne (moins de 123)\nPopulation du cégep Marie-Victorin (Environ 7 500)\nVariable comptant la population au Qc (Environ 9 millions)\nVariable pour calculer le revenu d’un individu normal\nNombre de gouttes d’eau dans une piscine (environ 960 000 000 gouttes).\nUne variable qui se rappelle si le prof était bon ou pas (true?)\nNote en lettre qu’un étudiant obtient au cours (A)\n📝 Exemple attendu à l’écran :\n32 7512 8905430 45000.25 960540388 true A Réponse byte age = 32; short populationMV = 7512; int populationQC = 8_905_430; float revenu = 45000.25f; int nbGoutteEau = 960_540_388 //Un argument pourrait être fait pour utiliser un long en suggérant que la piscine pourrait possiblement être beaucoup plus grande et un long pourrait être plus sécuritaire. boolean leProfEstBon = true; char noteEleve = 'A'; 🎯 Exercice 2 🔧 Consigne :\nCréer et afficher les variables avec le meilleur type possible\nÂge d’un chat domestique (environ 8 ans)\nNombre d’étudiants dans une petite école secondaire (environ 420)\nNombre d’habitants à Montréal (environ 1.7 million)\nSalaire annuel d’un développeur junior (~52 000.75 $)\nNombre de grains de sable dans un seau (~25 000 000)\nUne variable indiquant si une lumière est allumée (false)\nLa lettre de la section d’un cours (par exemple B)\n📝 Exemple attendu à l’écran :\n8 420 1700000 52000.75 25000000 false B Réponse byte ageChat = 8; short nbElevesEcole = 420; int populationMontreal = 1_700_000; float salaireAnnuel = 52000.75f; int nbGrainsSable = 25_000_000; boolean lumiereAllumee = false; char sectionCours = 'B'; 🎯 Exercice 3 🔧 Consigne :\nCréer et afficher les variables avec le meilleur type primitif possible, dans l’ordre ci-dessous :\nUne lettre qui représente une réponse à un quiz (par exemple C) Est-ce que l’alarme est activée (true) ? Le nombre d’habitants dans un petit village (environ 1 200) Âge d’un enfant (environ 5 ans) Le revenu annuel d’un dentiste (~98 500.95 $) Le nombre d’étoiles visibles à l’œil nu (~6 000) Estimation du nombre de cellules dans un corps humain (environ 37 000 000 000 000) 📝 Exemple attendu à l’écran :\nC true 1200 5 98500.95 6000 37000000000000 Réponse char reponseQuiz = 'C'; boolean alarmeActivee = true; short populationVillage = 1200; byte ageEnfant = 5; float revenuDentiste = 98500.95f; short nbEtoilesVisibles = 6000; long nbCellulesHumain = 37_000_000_000_000L;",
    "description": "En Java, les types de données sont divisés en deux grandes familles :\n🧱 Les types primitifs (8 types) 🧩 Les types références (classes comme String, Scanner, etc.) Les types primitifs sont les briques de base de tout programme Java. Ils permettent de représenter les informations simples : nombres, caractères, booléens.\n🎁 Pourquoi différents types de “boîtes” ? En Java (et dans la plupart des langages), il existe plusieurs types de variables — ou “boîtes” — pour deux raisons principales :",
    "tags": [],
    "title": "Types Primitifs",
    "uri": "/420-111/3-variables-types/types-primitifs/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Intro",
    "content": "☕ Créer son tout premier programme en Java Avant de plonger dans le code, il est important de savoir qu’en Java, tout le code source doit être enregistré dans un fichier avec l’extension .java.\nEN ligne Si java n’est malheureusement pas installé sur votre ordinateur et que vous ne pouvez pas le faire, vous pouvez tout de même programmer directement sur le web ici\n🔧 Étapes : Crée un nouveau fichier et nomme-le Main.java. Tape (de préférence manuellement) le code suivant dans ce fichier : public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } } 💡 Astuce : Prends le temps de taper le code au lieu de simplement le copier-coller. Cela t’aidera à bien comprendre chaque ligne.\n🧩 Comprendre la notion de classe En Java, tout le code exécutable doit être contenu dans une classe.\nCe concept sera expliqué en détail plus tard, mais retiens pour l’instant qu’une classe est indispensable. Dans notre exemple, cela correspond à la ligne public class Main. Par convention, le nom d’une classe commence par une majuscule (ce n’est pas obligatoire, mais recommandé). Le nom du fichier doit être identique au nom de la classe, suivi de l’extension .java. Ici, la classe s’appelle Main, donc le fichier s’appelle Main.java. Le mot-clé public est un modificateur d’accès indiquant que cette classe est accessible depuis d’autres classes (nous y reviendrons plus tard). 🏁 La méthode main() La méthode main() est le point d’entrée de tout programme Java. Tout le code à l’intérieur de cette méthode sera exécuté au lancement du programme. 🔍 Ne t’inquiète pas pour le moment des autres mots-clés comme static ou void. Tu les comprendras avec le temps.\n🔄 Résumé ligne par ligne Ligne de code Explication public class Main Déclare une classe publique appelée Main. public static void main(String[] args) Déclare la méthode principale qui sera exécutée au démarrage du programme. System.out.println(\"Hello World\"); Affiche le message \"Hello World\" dans la console. 🧪 Compilation et exécution d’un programme Java D’abord, tu dois t’assurer que Java est bien installé sur ton ordinateur\nOuvre une invite de commandes (cmd) sous Windows (Terminal sous Mac/Linux). Tape la commande java -version. Cette commande devrait vous dire la version de Java qui est installé sur votre ordinateur. Tape aussi la commande javac -version. Cette commande devrait te dire la version du compilateur de Java installé sur ton ordinateur Note: Ces commandes fonctionnent seulement si Java et le compilateur de Java sont installés et que le chemin où le répertoire de Java se trouve est mis dans le PATH des variables d’environnement (À expliquer en classe pour que ce soit plus clair) Exécution du code dans le fichier Main.java Ouvre une invite de commandes (cmd) sous Windows (Terminal sous Mac/Linux). Navigue vers le dossier où se trouve votre fichier Main.java Exécute la commande java Main.java. Tu devrais voir le message Hello World dans l’invite de commandes. Traditionnellement, Java fonctionne en deux étapes :\nCompilation : Le code source (.java) est transformé en bytecode (.class) grâce à la commande :\njavac Main.java Exécution : Le bytecode est ensuite exécuté avec la commande :\njava Main 💡 Astuce : Depuis une version relativement récente de Java, il est aussi possible d’exécuter directement un fichier .java sans passer explicitement par l’étape de compilation (javac).\njava Main.java Cela permet d’exécuter rapidement un programme, mais à noter :\nLe fichier .class est généré temporairement. Il est ensuite supprimé automatiquement après l’exécution. 📝 Cette méthode est pratique pour tester du code rapidement, mais dans un projet structuré, on utilise généralement javac suivi de java.\n🖨️ Affichage avec System.out.print et System.out.println Dans la méthode main(), tu peux utiliser :\nSystem.out.println() : pour afficher une ligne de texte suivie d’un retour à la ligne. System.out.print() : pour afficher du texte sans retour à la ligne. ✏️ Pour l’instant, retiens que tu dois utiliser System.out.println(\"ton message\"); pour afficher du texte à l’écran.\n📌 Détail sur System.out Élément Rôle System Classe prédéfinie dans java.lang out Représente le flux de sortie standard System.out Utilisé pour écrire dans la console 🧩 Différence entre print() et println() Méthode Effet print() Affiche le texte sur la même ligne println() Affiche le texte puis passe à la ligne suivante Exemple 1 : sans retour à la ligne System.out.print(\"Bonjour \"); System.out.print(\"tout le monde !\"); 🖥️ Résultat :\nBonjour tout le monde ! Exemple 2 : avec retour à la ligne System.out.println(\"Bonjour\"); System.out.println(\"tout le monde !\"); 🖥️ Résultat :\nBonjour tout le monde ! Exemple 3 : retour à la ligne manuel System.out.print(\"Ligne 1\\nLigne 2\"); 🖥️ Résultat :\nLigne 1 Ligne 2 ✅ En résumé : print() : n’ajoute pas de retour à la ligne. println() : ajoute un retour à la ligne automatiquement. Ces méthodes sont très utilisées pour afficher des messages ou pour déboguer. Le caractère d’échappement \\ Le \\ permet d’insérer des caractères spéciaux dans une chaîne.\nSéquence Résultat Exemple Résultat Console \\n Saut de ligne \"Bonjour\\nSalut\" Bonjour\nSalut \\t Tabulation \"Nom\\tAge\" Nom Age \\\" Guillemets doubles \"Il a dit : \\\"ok\\\"\" Il a dit : “ok” \\\\ Backslash \"C:\\\\Users\\\\Nom\" C:\\Users\\Nom \\' Apostrophe '\\' ' System.out.printf() – Affichage formaté Tu peux fixer la largeur de colonnes avec :\nSystem.out.printf(\"%-15s : %s\\n\", \"Nom\", \"Alice\"); System.out.printf(\"%-15s : %d\\n\", \"Âge\", 30); 🔎 %–15s → champ texte aligné à gauche sur 15 caractères.\n✅ À retenir Commande Utilité principale print() Affiche sur la même ligne. println() Affiche puis saute une ligne. \\ Caractère d’échappement pour mise en forme. printf() Affichage structuré et aligné. 🛠️ Astuce pro : format avancé System.out.printf(\"\"\" Nom complet : Julie MARTIN Âge : 28 Ville : %s \"\"\", \"Paris\" ); 🖥️ Résultat console Nom complet : Julie MARTIN Âge : 28 Ville : Paris ✅ Explication ligne par ligne Élément Rôle \"\"\" (Text block) Permet un texte multiligne propre (Java 15+). %s Placeholder pour une valeur chaîne (String ou objet).",
    "description": "☕ Créer son tout premier programme en Java Avant de plonger dans le code, il est important de savoir qu’en Java, tout le code source doit être enregistré dans un fichier avec l’extension .java.\nEN ligne Si java n’est malheureusement pas installé sur votre ordinateur et que vous ne pouvez pas le faire, vous pouvez tout de même programmer directement sur le web ici",
    "tags": [],
    "title": "Affichage console",
    "uri": "/420-111/1-intro/affichage-console/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Exercices",
    "content": "🧠 Exercices – Choisis le type le plus adapté Tu dois enregistrer les données suivantes dans une variable aussi petite que possible, selon leur type.\nPour chaque donnée, déclare une variable (ou une valeur fixe) en utilisant le type primitif le plus petit possible ou String.\nExo 1 1. La température d’un congélateur : -18 2. Une distance interplanétaire en kilomètres : 150000000000L 3. Le taux de réussite à un examen : 0.987 4. Le message d’accueil : \"Bienvenue sur le système\" 5. Une température corporelle : 36.6 6. Le niveau d’alerte (valeur unique entre ‘A’ et ‘Z’) : 'C' 7. L’âge d’un arbre centenaire : 153 8. La réponse à une question (oui/non) : true 9. Le nom de la planète : \"Terre\" 10. Le nombre d’enfants dans une classe : 28 Exo 2 1. Le taux de remplissage d’un réservoir : 0.735 2. Le code de niveau de sécurité : 'B' 3. Le nombre de jours dans une semaine : 7 (valeur fixe) 4. Le nom du système solaire : \"Système solaire\" 5. La distance Terre-Lune (en km) : 384400 6. L’année de construction d’un pont : 1967 7. La température d’ébullition de l’eau (en °C) : 100 8. La lumière est-elle allumée ? : false 9. Le message d'erreur affiché à l'écran : \"Erreur : accès refusé\" 10. L’identifiant d’un capteur : 120 🎯 Objectif : 1 ligne = 1 variable. Type primitif ou `String`. La plus petite taille possible. Exo 3 1. Le niveau sonore maximal autorisé : 120 2. Le symbole de la touche entrée : '\\n' 3. Le résultat d’un test booléen : true 4. Le prénom du robot assistant : \"EVA\" 5. La masse d’un atome d’hydrogène : 1.00784 6. Le nombre de planètes dans le système solaire : 8 (valeur fixe) 7. Le code d’erreur reçu par un serveur : 404 8. Une température très basse mesurée dans l’espace : -270 9. La distance entre deux étoiles : 9461000000000 (en km) 10. Le slogan affiché à l’accueil : \"Bonjour, humain.\" Exo 4 1. L'âge d’un personnage de jeu vidéo : 32 2. La température idéale pour un serveur : 21.5 3. Le caractère de commande utilisé dans le terminal : '$' 4. Le nombre d’heures dans une journée : 24 (valeur fixe) 5. Le nom du fichier système : \"kernel.sys\" 6. La valeur de l'accélération gravitationnelle (m/s²) : 9.80665 7. Le niveau de batterie d’un drone : 98 8. Est-ce que le drone est actif ? : true 9. Le message système de veille : \"Mise en veille imminente\" 10. Une distance astronomique (en km) : 149600000000 Exo 5 1. Un identifiant d’objet unique : 256 2. Le mot de passe par défaut : \"admin\" 3. La pression moyenne atmosphérique : 1013.25 4. Le caractère spécial de validation : '#' 5. Le nombre de bits dans un octet : 8 (valeur fixe) 6. Le message de confirmation : \"Action enregistrée\" 7. Est-ce que le mode nuit est activé ? : false 8. L’année de fondation de l’entreprise : 2001 9. La température moyenne de Mars : -63 10. La vitesse de la lumière en km/s : 299792 💡 Exercices : Concaténation de chaînes de caractères en Java 🧪 Exo 6 – Concaténation simple avec + Enregistre Alice et Durand dans 2 variables distinctes:\nUtilise les 2 variables créés préalablement pour créer une troisième variable nomComplet qui contient la phrase :\n\"Bonjour Alice Durand\" Affiche-la 3e variable.\n🧪 Exo 7 – Concaténation avec des variables numériques Déclare les variables suivantes :\nString nomProduit = \"Clavier\"; byte quantite = 5; float prixUnitaire = 24.99f; Affiche le message suivant en une seule ligne avec concaténation :\n\"5 Clavier à 24.99$ l’unité\" 🧪 Exo 8 – Concaténation avec concat() Utilise .concat() pour construire la phrase suivante à partir des morceaux :\nString a = \"Java \"; String b = \"est\"; String c = \"super.\"; Résultat attendu : \"Java est super.\"\nNe pas utiliser +\n🧪 Exo 9 – Concaténation multi-lignes À partir des éléments suivants que vous devez enregistrer dans des variables distinctes:\n\"Martin\"; //prenom 29; //age \"Lyon\"; //nom Construit et affiche la phrase suivante (avec retours à la ligne \\n) :\nNom : Martin Âge : 29 Ville : Lyon Solutions",
    "description": "🧠 Exercices – Choisis le type le plus adapté Tu dois enregistrer les données suivantes dans une variable aussi petite que possible, selon leur type.\nPour chaque donnée, déclare une variable (ou une valeur fixe) en utilisant le type primitif le plus petit possible ou String.\nExo 1 1. La température d’un congélateur : -18 2. Une distance interplanétaire en kilomètres : 150000000000L 3. Le taux de réussite à un examen : 0.987 4. Le message d’accueil : \"Bienvenue sur le système\" 5. Une température corporelle : 36.6 6. Le niveau d’alerte (valeur unique entre ‘A’ et ‘Z’) : 'C' 7. L’âge d’un arbre centenaire : 153 8. La réponse à une question (oui/non) : true 9. Le nom de la planète : \"Terre\" 10. Le nombre d’enfants dans une classe : 28 Exo 2 1. Le taux de remplissage d’un réservoir : 0.735 2. Le code de niveau de sécurité : 'B' 3. Le nombre de jours dans une semaine : 7 (valeur fixe) 4. Le nom du système solaire : \"Système solaire\" 5. La distance Terre-Lune (en km) : 384400 6. L’année de construction d’un pont : 1967 7. La température d’ébullition de l’eau (en °C) : 100 8. La lumière est-elle allumée ? : false 9. Le message d'erreur affiché à l'écran : \"Erreur : accès refusé\" 10. L’identifiant d’un capteur : 120 🎯 Objectif : 1 ligne = 1 variable. Type primitif ou `String`. La plus petite taille possible. Exo 3 1. Le niveau sonore maximal autorisé : 120 2. Le symbole de la touche entrée : '\\n' 3. Le résultat d’un test booléen : true 4. Le prénom du robot assistant : \"EVA\" 5. La masse d’un atome d’hydrogène : 1.00784 6. Le nombre de planètes dans le système solaire : 8 (valeur fixe) 7. Le code d’erreur reçu par un serveur : 404 8. Une température très basse mesurée dans l’espace : -270 9. La distance entre deux étoiles : 9461000000000 (en km) 10. Le slogan affiché à l’accueil : \"Bonjour, humain.\" Exo 4 1. L'âge d’un personnage de jeu vidéo : 32 2. La température idéale pour un serveur : 21.5 3. Le caractère de commande utilisé dans le terminal : '$' 4. Le nombre d’heures dans une journée : 24 (valeur fixe) 5. Le nom du fichier système : \"kernel.sys\" 6. La valeur de l'accélération gravitationnelle (m/s²) : 9.80665 7. Le niveau de batterie d’un drone : 98 8. Est-ce que le drone est actif ? : true 9. Le message système de veille : \"Mise en veille imminente\" 10. Une distance astronomique (en km) : 149600000000 Exo 5 1. Un identifiant d’objet unique : 256 2. Le mot de passe par défaut : \"admin\" 3. La pression moyenne atmosphérique : 1013.25 4. Le caractère spécial de validation : '#' 5. Le nombre de bits dans un octet : 8 (valeur fixe) 6. Le message de confirmation : \"Action enregistrée\" 7. Est-ce que le mode nuit est activé ? : false 8. L’année de fondation de l’entreprise : 2001 9. La température moyenne de Mars : -63 10. La vitesse de la lumière en km/s : 299792 💡 Exercices : Concaténation de chaînes de caractères en Java 🧪 Exo 6 – Concaténation simple avec + Enregistre Alice et Durand dans 2 variables distinctes:",
    "tags": [],
    "title": "Série 2",
    "uri": "/420-111/exercices/serie2/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Structures De Controles",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Break Continue",
    "uri": "/420-111/9-structures-de-controles/break-continue/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Structures De Controles \u003e Boucles",
    "content": "🔁 La boucle do-while en Java La boucle do-while permet de répéter une série d’instructions au moins une fois, puis tant qu’une condition est vraie.\nC’est la seule boucle en Java où la condition est testée après l’exécution du bloc.\n🧱 Structure d’une boucle do-while do { // instructions à exécuter } while (condition); Élément Rôle bloc de code S’exécute au moins une fois, puis à chaque tour condition Est testée après chaque itération 🔂 Exemple simple int i = 0; do { System.out.println(\"i vaut : \" + i); i++; } while (i \u003c 5); 🔎 Ce code va afficher :\ni vaut : 0 i vaut : 1 i vaut : 2 i vaut : 3 i vaut : 4 💡 Même si la condition est fausse dès le départ, le bloc s’exécute au moins une fois :\nint i = 10; do { System.out.println(\"Exécuté !\"); } while (i \u003c 5); ➡️ Résultat : Exécuté !\n🎯 Quand utiliser do-while ? Utilise do-while quand :\nTu veux forcer au moins une exécution Tu veux demander une action, puis vérifier si elle doit être répétée C’est utile pour les menus, saisies utilisateur, etc. 🔁 Exemple pratique : demander un mot de passe Scanner scanner = new Scanner(System.in); String motDePasse; do { System.out.print(\"Entrez le mot de passe : \"); motDePasse = scanner.nextLine(); } while (!motDePasse.equals(\"secret123\")); ⚠️ Attention Comme dans while, si la condition reste vraie, la boucle ne s’arrête jamais. Bien penser à modifier les variables qui influencent la condition. 🧠 À retenir La boucle do-while s’exécute toujours au moins une fois. Elle teste la condition après chaque tour. Idéale pour les saisies utilisateur, les menus interactifs, etc. 🔹 Exercice 1 : Afficher les nombres de 1 à 5 Utilise une boucle do-while pour afficher les nombres de 1 à 5.\npublic class Exo1 { public static void main(String[] args) { // Initialisation de la variable // Boucle do-while de 1 à 5 } } Sortie attendue 1 2 3 4 5 🔹 Exercice 2 : Compte à rebours Utilise une boucle do-while pour afficher un compte à rebours de 5 à 1, puis affiche \"Go !\".\npublic class Exo2 { public static void main(String[] args) { // Initialisation de la variable // Boucle do-while de décompte // Affichage final \"Go !\" } } Sortie attendue 5 4 3 2 1 Go ! 🔹 Exercice 3 : Somme croissante Utilise une boucle do-while pour additionner des valeurs de 2 en 2, en partant de 0, et affiche la somme à chaque étape, tant que la somme est inférieure ou égale à 10.\npublic class Exo3 { public static void main(String[] args) { // Initialisation de la somme // Boucle do-while d’addition } } Sortie attendue Somme : 2 Somme : 4 Somme : 6 Somme : 8 Somme : 10",
    "description": "🔁 La boucle do-while en Java La boucle do-while permet de répéter une série d’instructions au moins une fois, puis tant qu’une condition est vraie.\nC’est la seule boucle en Java où la condition est testée après l’exécution du bloc.\n🧱 Structure d’une boucle do-while do { // instructions à exécuter } while (condition); Élément Rôle bloc de code S’exécute au moins une fois, puis à chaque tour condition Est testée après chaque itération 🔂 Exemple simple int i = 0; do { System.out.println(\"i vaut : \" + i); i++; } while (i \u003c 5); 🔎 Ce code va afficher :",
    "tags": [],
    "title": "Do While",
    "uri": "/420-111/9-structures-de-controles/boucles/3-do-while/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Structures De ControlesConditionnelles",
    "content": "🎛️ Les instructions switch en Java L’instruction switch permet de tester la valeur d’une variable et d’exécuter différents blocs de code selon son contenu exact.\nC’est une alternative plus claire aux chaînes de if...else if quand on compare une même variable à plusieurs valeurs possibles.\n🧰 Syntaxe de base switch (variable) { case valeur1: // Code si variable == valeur1 break; case valeur2: // Code si variable == valeur2 break; default: // Code si aucune des valeurs ne correspond } 🧱 Éléments clés : Mot-clé Rôle case Spécifie une valeur à tester break Termine le switch, évite les “chutes” default (optionnel) Bloc exécuté par défaut 📦 Exemple simple int jour = 3; switch (jour) { case 1: System.out.println(\"Lundi\"); break; case 2: System.out.println(\"Mardi\"); break; case 3: System.out.println(\"Mercredi\"); break; default: System.out.println(\"Jour inconnu\"); } ➡️ Affichera : Mercredi\n⚠️ Le break est important ! Sans le break, le programme continue dans les cases suivantes, même si elles ne correspondent pas :\nint x = 2; switch (x) { case 1: System.out.println(\"Un\"); case 2: System.out.println(\"Deux\"); case 3: System.out.println(\"Trois\"); } ➡️ Affichera :\nDeux Trois 🧠 Le bloc default Le mot-clé default permet de gérer les cas non prévus :\nchar lettre = 'z'; switch (lettre) { case 'a': System.out.println(\"Voyelle A\"); break; case 'e': System.out.println(\"Voyelle E\"); break; default: System.out.println(\"Autre lettre\"); } 🔁 Compatibilité du switch En Java, tu peux utiliser switch avec les types suivants :\nType autorisé Exemples int, short, byte, char switch (entier) String (depuis Java 7) switch (nom) enum switch (couleur) ❌ Pas compatible avec float, double, boolean, ni avec des expressions complexes.\n🔥 À retenir switch est pratique pour tester des cas précis. Utilise break pour éviter les exécutions non désirées. Le bloc default est optionnel mais utile. Compatible avec int, char, String, enum, etc. Plus lisible que plusieurs else if quand on compare la même variable. 🔹 Exercice 1 : Jour de la semaine Crée une variable int jour, puis utilise une instruction switch pour afficher le nom du jour correspondant :\n1 → \"Lundi\" 2 → \"Mardi\" 3 → \"Mercredi\" Autre → \"Jour inconnu\" public class Exo1 { public static void main(String[] args) { // Déclaration du jour // Switch selon le jour } } Sortie attendue (si jour = 2) Mardi 🔹 Exercice 2 : Type de boisson Crée une variable String choix, qui peut valoir \"café\", \"thé\" ou \"jus\". Utilise switch pour afficher :\n\"Vous avez choisi du café\" \"Vous avez choisi du thé\" \"Vous avez choisi du jus\" Sinon : \"Boisson inconnue\" public class Exo2 { public static void main(String[] args) { // Déclaration de la boisson // Switch sur le choix } } Sortie attendue (si choix = \"thé\") Vous avez choisi du thé 🔹 Exercice 3 : Note en lettre Crée une variable char note qui peut être 'A', 'B', 'C' ou une autre lettre. Utilise switch pour afficher :\n'A' → \"Excellent\" 'B' → \"Très bien\" 'C' → \"Bien\" Autre → \"Note invalide\" public class Exo3 { public static void main(String[] args) { // Déclaration de la note // Switch sur la note } } Sortie attendue (si note = 'B') Très bien",
    "description": "🎛️ Les instructions switch en Java L’instruction switch permet de tester la valeur d’une variable et d’exécuter différents blocs de code selon son contenu exact.\nC’est une alternative plus claire aux chaînes de if...else if quand on compare une même variable à plusieurs valeurs possibles.\n🧰 Syntaxe de base switch (variable) { case valeur1: // Code si variable == valeur1 break; case valeur2: // Code si variable == valeur2 break; default: // Code si aucune des valeurs ne correspond } 🧱 Éléments clés : Mot-clé Rôle case Spécifie une valeur à tester break Termine le switch, évite les “chutes” default (optionnel) Bloc exécuté par défaut 📦 Exemple simple int jour = 3; switch (jour) { case 1: System.out.println(\"Lundi\"); break; case 2: System.out.println(\"Mardi\"); break; case 3: System.out.println(\"Mercredi\"); break; default: System.out.println(\"Jour inconnu\"); } ➡️ Affichera : Mercredi",
    "tags": [],
    "title": "Switch",
    "uri": "/420-111/9-structures-de-controles/conditionnelles/switch/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Opérateurs",
    "content": "Les opérateurs logiques permettent de combiner des conditions. Ils sont essentiels pour construire des expressions complexes dans les structures comme if, while, etc.\nIls s’appliquent sur des booléens (true ou false) et renvoient eux-mêmes un booléen.\n🧪 Les 3 opérateurs logiques principaux Opérateur Nom Fonction principale Exemple Résultat \u0026\u0026 ET logique Vrai seulement si les deux conditions sont vraies true \u0026\u0026 true true || OU logique Vrai si au moins une condition est vraie true || false true ! NON logique Inverse la valeur (vrai devient faux, et vice-versa) !true false 🧠 Tableau de vérité 1. \u0026\u0026 (ET logique) A B A \u0026\u0026 B true true true true false false false true false false false false 2. || (OU logique) A B A || B true true true true false true false true true false false false 3. ! (NON logique) A !A true false false true 💬 Exemples simples int age = 20; boolean citoyen = true; // Vrai seulement si les deux conditions sont vraies if (age \u003e= 18 \u0026\u0026 citoyen) { System.out.println(\"Tu peux voter !\"); } boolean ilPleut = true; boolean aParapluie = false; if (ilPleut \u0026\u0026 !aParapluie) { System.out.println(\"Tu vas être mouillé !\"); } ⚠️ Attention à la priorité des opérateurs Priorité (ordre d’évaluation) Opérateur Haute ! Moyenne \u0026\u0026 Basse || Tu peux utiliser des parenthèses pour forcer l’ordre :\nif ((age \u003e 18 || citoyen) \u0026\u0026 !malade) { // ... } 📦 Utilisation typique : combiner plusieurs conditions Exemple :\nint note = 85; if (note \u003e= 60 \u0026\u0026 note \u003c= 100) { System.out.println(\"Réussi !\"); } 🔍 Résumé visuel Symbole Nom Utilité principale \u0026\u0026 ET Toutes les conditions doivent être vraies || OU Une seule condition doit être vraie ! NON Inverse une condition 🎯 Astuce logique Tu peux combiner plusieurs opérateurs :\nif ((age \u003e= 18 \u0026\u0026 citoyen) || estMajeurEmancipe) { System.out.println(\"Tu es légalement un adulte.\"); } 🧪 Mini quiz (mental) boolean a = true; boolean b = false; System.out.println(a \u0026\u0026 b); // ? System.out.println(a || b); // ? System.out.println(!a); // ? Réponses false true false 🟢 Exercice 1 – Vrai ou faux ? (Quiz rapide) boolean a = true; boolean b = false; System.out.println(a \u0026\u0026 b); // ? System.out.println(!b); // ? System.out.println(a || b); // ? System.out.println(!(a \u0026\u0026 b)); // ? ✏️ Question : Indique ce qui s’affiche à chaque ligne.\n🟡 Exercice 2 – Peut-il conduire ? Écris une comparaison qui vérifie si une personne peut conduire en fonction de son age et si elle a le permis.\nCritères pour pouvoir conduire:\nElle a 18 ans ou plus et elle possède un permis. int age = 20; boolean aLePermis = true; // Complète ici 💡 Astuce : Utilise \u0026\u0026 pour combiner les deux conditions.\n🟡 Exercice 3 – Accès restreint On veut donner accès à un site seulement si l’utilisateur est :\nMembre ou admin, Et pas banni. Complète :\nboolean estMembre = true; boolean estAdmin = false; boolean estBanni = false; 💡 Tu devras utiliser || et !.\n🟠 Exercice 4 – Pluie et parapluie Écris un programme qui affiche true si tu es mouillé:\nboolean ilPleut = true; boolean aParapluie = false; // Complète ici",
    "description": "Les opérateurs logiques permettent de combiner des conditions. Ils sont essentiels pour construire des expressions complexes dans les structures comme if, while, etc.\nIls s’appliquent sur des booléens (true ou false) et renvoient eux-mêmes un booléen.\n🧪 Les 3 opérateurs logiques principaux Opérateur Nom Fonction principale Exemple Résultat \u0026\u0026 ET logique Vrai seulement si les deux conditions sont vraies true \u0026\u0026 true true || OU logique Vrai si au moins une condition est vraie true || false true ! NON logique Inverse la valeur (vrai devient faux, et vice-versa) !true false 🧠 Tableau de vérité 1. \u0026\u0026 (ET logique) A B A \u0026\u0026 B true true true true false false false true false false false false 2. || (OU logique) A B A || B true true true true false true false true true false false false 3. ! (NON logique) A !A true false false true 💬 Exemples simples int age = 20; boolean citoyen = true; // Vrai seulement si les deux conditions sont vraies if (age \u003e= 18 \u0026\u0026 citoyen) { System.out.println(\"Tu peux voter !\"); } boolean ilPleut = true; boolean aParapluie = false; if (ilPleut \u0026\u0026 !aParapluie) { System.out.println(\"Tu vas être mouillé !\"); } ⚠️ Attention à la priorité des opérateurs Priorité (ordre d’évaluation) Opérateur Haute ! Moyenne \u0026\u0026 Basse || Tu peux utiliser des parenthèses pour forcer l’ordre :",
    "tags": [],
    "title": "⚙️ Les opérateurs logiques en Java",
    "uri": "/420-111/5-operateurs/logique/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Variables \u0026 Types",
    "uri": "/420-111/variables-types/variables/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Exercices",
    "content": "🧪 Exercice 1 Déclare une chaîne de caractères :\nProgrammation Java. Trouve le nombre de caractères dans la chaîne.\nAffiche :\n\"La phrase contient 19 caractères\" (sans compter manuellement !)\n🧪 Exercice 2 À partir de :\nordinateur Affiche le premier caractère Affiche le dernier caractère Affiche le caractère à l’index 3 o r i 🧪 Exercice 3 Déclare :\nBienvenue dans le monde Java Extrais et affiche “Bienvenue” Extrais et affiche “monde Java” Extrais les 5 premiers caractères de la phrase et affiche-les Bienvenue monde Java Bienv 🧪 Exercice 4 Déclare :\nBonjour Le Monde Affiche le texte entièrement en majuscules Affiche le texte entièrement en minuscules 🧪 Exercice 5 Crée les variables suivantes :\nLéa 23 Utilise String.format() ou System.out.printf() pour générer cette phrase (sans utiliser +) :\n\"Léa a 23 ans.\" Puis affiche-la.\n🧪 Exercice 6 Déclare :\nDisque dur 129.995678 Utilise String.format() pour afficher :\nLe produit Disque dur coûte 130.00$ ⚠️ Arrondir à 2 chiffres après la virgule.\n🧪 Exercice 7 Déclare :\nString prenom = \"julie\"; String nom = \"martin\"; int age = 28; String ville = \"paris\"; Affiche le message suivant, avec formatage correct :\nNom complet : Julie MARTIN Âge : 28 ans Ville : Paris Contraintes :\nPremière lettre du prénom en majuscule, le reste en minuscule Nom en majuscules Ville avec première lettre en majuscule Utilise String.format() pour aligner le tout 🧪 Exercice 8 À partir des données suivantes :\nString prenom = \"Harry\"; String nom = \"Morin\"; String anneeNaissance = \"1995\"; Génère un identifiant unique sous cette forme :\nIdentifiant généré : MORIN_harry95 Contraintes :\nNom en majuscules Prénom en minuscules Les deux derniers chiffres de l’année de naissance 🧪 Exercice 9 – Formater une facture Déclare les variables suivantes :\nString client = \"Nora\" String produit = \"Casque audio\" int quantite = 2; double prixUnitaire = 59.99; Affiche une facture formatée :\nFacture Client : Nora Produit : Casque audio Quantité : 2 Prix unitaire : 59.99 $ Total HT : 119.98 $ Contraintes :\nCalcule le total avec quantite * prixUnitaire Affiche le total avec 2 décimales seulement Solutions",
    "description": "🧪 Exercice 1 Déclare une chaîne de caractères :\nProgrammation Java. Trouve le nombre de caractères dans la chaîne.\nAffiche :\n\"La phrase contient 19 caractères\" (sans compter manuellement !)\n🧪 Exercice 2 À partir de :\nordinateur Affiche le premier caractère Affiche le dernier caractère Affiche le caractère à l’index 3 o r i 🧪 Exercice 3 Déclare :\nBienvenue dans le monde Java Extrais et affiche “Bienvenue” Extrais et affiche “monde Java” Extrais les 5 premiers caractères de la phrase et affiche-les Bienvenue monde Java Bienv 🧪 Exercice 4 Déclare :",
    "tags": [],
    "title": "Série 3",
    "uri": "/420-111/exercices/serie3/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Structures De Controles \u003e Boucles",
    "content": "🔁 La boucle for-each en Java La boucle for-each (ou boucle améliorée for) permet de parcourir facilement les éléments d’un tableau ou d’une collection, sans se soucier des indices.\nElle est plus lisible et plus sûre que la boucle for classique quand tu n’as pas besoin de manipuler les indices manuellement.\n🧱 Structure d’une boucle for-each for (Type element : collection) { // instructions à exécuter pour chaque élément } Élément Rôle Type Le type des éléments (ex : int, String) element Une variable temporaire pour chaque valeur collection Un tableau (array) ou une collection (List, etc.) 🔂 Exemple simple avec un tableau int[] notes = {12, 15, 8, 17}; for (int note : notes) { System.out.println(\"Note : \" + note); } 🔎 Ce code affiche :\nNote : 12 Note : 15 Note : 8 Note : 17 💡 À chaque tour, la variable note prend la valeur d’un élément du tableau, dans l’ordre.\n🧑‍🏫 Exemple avec des chaînes de caractères String[] prenoms = {\"Alice\", \"Bob\", \"Claire\"}; for (String nom : prenoms) { System.out.println(\"Bonjour \" + nom + \" !\"); } 🎯 Quand utiliser for-each ? Utilise for-each quand :\nTu veux parcourir tous les éléments d’un tableau ou d’une liste Tu n’as pas besoin de connaître l’indice actuel Tu veux du code plus clair et moins sujet aux erreurs ⚠️ Limitations Tu ne peux pas modifier les éléments d’un tableau directement avec for-each. Tu n’as pas accès à l’indice (i) de l’élément courant. Pas adapté si tu as besoin de parcourir partiellement une structure ou de sauter des éléments. 🔁 Comparaison avec la boucle for classique // Boucle for classique for (int i = 0; i \u003c notes.length; i++) { System.out.println(notes[i]); } // Boucle for-each for (int note : notes) { System.out.println(note); } ✅ Même résultat, mais code plus lisible avec for-each (s’il n’y a pas besoin de i).\n🧠 À retenir La boucle for-each est idéale pour lire les éléments d’un tableau ou d’une collection. Elle est plus concise et plus sûre qu’une boucle for classique. À éviter si tu as besoin de l’indice ou de modifier les éléments. 🔹 Exercice 1 : Afficher les éléments d’un tableau Déclare un tableau fruits contenant les éléments suivants : \"Pomme\", \"Banane\", \"Cerise\", \"Date\".\nUtilise une boucle for-each pour afficher chaque fruit.\npublic class Exo1 { public static void main(String[] args) { // Déclaration et initialisation du tableau // Parcours avec for-each et affichage } } Sortie attendue Pomme Banane Cerise Date 🔹 Exercice 2 : Somme des valeurs d’un tableau Déclare un tableau nombres avec les valeurs : 5, 8, 12, 20.\nCalcule la somme des éléments en utilisant une boucle for-each puis affiche le résultat.\npublic class Exo2 { public static void main(String[] args) { // Initialisation du tableau // Calcul de la somme avec for-each // Affichage de la somme } } Sortie attendue Somme : 45 🔹 Exercice 3 : Compter les mots Déclare un tableau mots contenant : \"chat\", \"chien\", \"oiseau\", \"poisson\", \"chat\".\nUtilise une boucle for-each pour compter le nombre de fois que le mot \"chat\" apparaît, puis affiche ce nombre.\npublic class Exo3 { public static void main(String[] args) { // Initialisation du tableau // Compteur et boucle for-each pour compter \"chat\" // Affichage du résultat } } Sortie attendue Le mot \"chat\" apparaît 2 fois. 🔹 Exercice 4 : Afficher un tableau Utilise une boucle for-each pour afficher le tableau suivant : {43,256,3,796,35,67}\npublic class Exo3 { public static void main(String[] args) { // Compte à rebours } } Sortie attendue 43 256 3 796 35 67 🔹 Exercice 5 : Afficher un tableau sexy Utilise une boucle for-each pour afficher le tableau suivant : {43,256,3,796,35,67}\npublic class Exo3 { public static void main(String[] args) { // Compte à rebours } } Sortie attendue [43,256,3,796,35,67]",
    "description": "🔁 La boucle for-each en Java La boucle for-each (ou boucle améliorée for) permet de parcourir facilement les éléments d’un tableau ou d’une collection, sans se soucier des indices.\nElle est plus lisible et plus sûre que la boucle for classique quand tu n’as pas besoin de manipuler les indices manuellement.\n🧱 Structure d’une boucle for-each for (Type element : collection) { // instructions à exécuter pour chaque élément } Élément Rôle Type Le type des éléments (ex : int, String) element Une variable temporaire pour chaque valeur collection Un tableau (array) ou une collection (List, etc.) 🔂 Exemple simple avec un tableau int[] notes = {12, 15, 8, 17}; for (int note : notes) { System.out.println(\"Note : \" + note); } 🔎 Ce code affiche :",
    "tags": [],
    "title": "For Each",
    "uri": "/420-111/9-structures-de-controles/boucles/4-for-each/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Opérateurs",
    "content": "En Java, comme en mathématiques, certaines opérations sont effectuées avant d’autres. C’est ce qu’on appelle la priorité des opérateurs.\n🪜 Diagramme de priorité (du plus fort au plus faible) ╔════════════════════════════════════╗ ║ () ║ ➤ Parenthèses : forcent la priorité ╠════════════════════════════════════╣ ║ ++ -- ! ║ ➤ Incrément, décrément, NON logique ╠════════════════════════════════════╣ ║ * / % ║ ➤ Multiplication, division, modulo ╠════════════════════════════════════╣ ║ + - ║ ➤ Addition, soustraction ╠════════════════════════════════════╣ ║ \u003c \u003c= \u003e \u003e= ║ ➤ Comparaisons ╠════════════════════════════════════╣ ║ == != ║ ➤ Égalité / inégalité ╠════════════════════════════════════╣ ║ \u0026\u0026 ║ ➤ ET logique (et court-circuité) ╠════════════════════════════════════╣ ║ || ║ ➤ OU logique (et court-circuité) ╠════════════════════════════════════╣ ║ = += -= *= /= %= ║ ➤ Affectations simples et composées ╚════════════════════════════════════╝ 🎓 Exemple d’analyse : sans parenthèses boolean resultat = 4 + 2 * 3 \u003e 10 || !false; 🔍 Étapes d’évaluation :\n2 * 3 → 6 4 + 6 → 10 10 \u003e 10 → false !false → true false || true → true ✅ Résultat final : true\n🧪 À retenir Java suit un ordre strict de priorité, mais ne lit pas toujours de gauche à droite. Les opérateurs comme *, /, % sont évalués avant les + et -. Les opérateurs logiques \u0026\u0026 et \\|\\| viennent après les comparateurs (\u003c, \u003e, ==, etc.). L’opérateur ! (NON logique) a une priorité très élevée, il est évalué rapidement. Les affectations (=, +=, etc.) sont toujours faites en dernier. 🧩 Exemple 1 : Opérations arithmétiques + comparaisons + logique boolean res1 = 10 + 2 * 5 \u003c 30 \u0026\u0026 (4 + 3 * 2 == 10 || false); ✳️ Étapes d’évaluation : Multiplications : 2 * 5 → 10 3 * 2 → 6\nAdditions : 10 + 10 → 20 4 + 6 → 10\nComparaisons : 20 \u003c 30 → true 10 == 10 → true\nOU logique : true || false → true\nET logique : true \u0026\u0026 true → true\n✅ Résultat final :\nres1 = true; 🧠 Exemple 2 : Avec modulos, NON logique, ET / OU boolean res2 = !(15 % 4 == 3) || (8 / 2 + 1 \u003e 4 \u0026\u0026 true); ✳️ Étapes d’évaluation : Modulo : 15 % 4 → 3\nComparaison : 3 == 3 → true\nNON logique : !(true) → false\nDivision \u0026 addition : 8 / 2 → 4 4 + 1 → 5\nComparaison : 5 \u003e 4 → true\nET logique : true \u0026\u0026 true → true\nOU logique : false || true → true\n✅ Résultat final :\nres2 = true; 💡 Astuce Même si Java respecte cet ordre, écrire avec des parenthèses explicites améliore grandement la lisibilité et réduit les erreurs :\nboolean res2 = (!(15 % 4 == 3)) || ((8 / 2 + 1 \u003e 4) \u0026\u0026 true); 🟢 Exercice 1 – Simple priorité arithmétique + logique boolean ex1 = 5 + 3 * 2 \u003e 10 \u0026\u0026 !false; ✏️ Question : Que vaut ex1 ? Explique étape par étape comme dans les exemples.\n🟡 Exercice 2 – Parenthèses et inversion logique boolean ex2 = !(6 + 4 / 2 \u003c= 7) || false; 🟠 Exercice 3 – Comparaisons croisées et OU logique boolean ex3 = 3 * 3 == 9 || 8 - 3 \u003e 10 \u0026\u0026 true; ✏️ Attention : l’opérateur \u0026\u0026 est plus prioritaire que ||. Analyse bien.\n🔴 Exercice 4 – Plusieurs niveaux de priorité + modulo boolean ex4 = 18 % 5 + 1 == 4 \u0026\u0026 !(2 * 2 \u003e= 5); 🔍 À toi de jouer ! Résous-le à la main (ou à tête).\n🔴 Exercice 5 – Affectation + expressions mixtes boolean ex5; ex5 = (10 - 2 * 3 != 4) || (6 / 3 == 2 \u0026\u0026 false); 🔍 À toi de jouer ! Résous-le à la main (ou à tête).\nExercice 6 boolean mystere = !(7 + 1 == 8) \u0026\u0026 (5 * 2 \u003c 11 || false); 🔍 À toi de jouer ! Résous-le à la main (ou à tête).",
    "description": "En Java, comme en mathématiques, certaines opérations sont effectuées avant d’autres. C’est ce qu’on appelle la priorité des opérateurs.\n🪜 Diagramme de priorité (du plus fort au plus faible) ╔════════════════════════════════════╗ ║ () ║ ➤ Parenthèses : forcent la priorité ╠════════════════════════════════════╣ ║ ++ -- ! ║ ➤ Incrément, décrément, NON logique ╠════════════════════════════════════╣ ║ * / % ║ ➤ Multiplication, division, modulo ╠════════════════════════════════════╣ ║ + - ║ ➤ Addition, soustraction ╠════════════════════════════════════╣ ║ \u003c \u003c= \u003e \u003e= ║ ➤ Comparaisons ╠════════════════════════════════════╣ ║ == != ║ ➤ Égalité / inégalité ╠════════════════════════════════════╣ ║ \u0026\u0026 ║ ➤ ET logique (et court-circuité) ╠════════════════════════════════════╣ ║ || ║ ➤ OU logique (et court-circuité) ╠════════════════════════════════════╣ ║ = += -= *= /= %= ║ ➤ Affectations simples et composées ╚════════════════════════════════════╝ 🎓 Exemple d’analyse : sans parenthèses boolean resultat = 4 + 2 * 3 \u003e 10 || !false; 🔍 Étapes d’évaluation :",
    "tags": [],
    "title": "🧭 Ordre de priorité des opérations en Java",
    "uri": "/420-111/5-operateurs/ordre-priorite/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation",
    "content": "Les chaînes de caractères 🍥 Lien vers la classe String de l’API Java\nLes Strings c’est quoi? En Java, une chaîne de caractères (ou String) est un objet qui représente une séquence de caractères. Contrairement à certains langages où les chaînes sont simplement des tableaux de caractères (char[]), en Java, elles sont des objets de la classe String.\nExemple :\nString message = \"Bonjour !\"; Utilisation simple Créer une chaîne :\nString nom = \"Alice\"; //Afficher une chaîne : System.out.println(nom); Connaître la longueur :\nint longueur = nom.length(); // renvoie 5 Concaténation La concaténation permet de combiner plusieurs chaînes en une seule.\nUtilisation de l’opérateur + : String prenom = \"Alice\"; String message = \"Bonjour, \" + prenom + \" !\"; System.out.println(message); // Bonjour, Alice ! Concaténation avec des nombres : int age = 20; String info = \"Elle a \" + age + \" ans.\"; System.out.println(info); // Elle a 20 ans. Voici un exercice adapté à ton cours sur les chaînes de caractères en Java :\n🧠 Exercice – Manipulation de chaînes de caractères 🎯 Objectif : Utiliser les notions de création de chaînes, longueur, concaténation, et affichage en Java.\n📝 Consigne : Écris un programme Java qui fait les étapes suivantes :\nCrée deux variables String : une pour un prénom et une pour un nom de famille (par exemple : \"Alice\" et \"Durand\"). Concatène ces deux chaînes pour former le nom complet, séparé par un espace. Affiche le message : \"Bonjour, [nom complet] !\", en utilisant la concaténation. Affiche ensuite la longueur du nom complet (en incluant l’espace). Affiche enfin cette phrase : \"Votre nom complet contient [X] caractères.\" (où X est le nombre de caractères). 🧪 Exemple attendu (si prenom = \"Alice\" et nom = \"Durand\") : Bonjour, Alice Durand ! Votre nom complet contient 12 caractères. 🧩 Astuces : Utilise + pour concaténer. La méthode .length() fonctionne sur les objets de type String. 🔎 À quoi sert String.format() ? String.format() permet de formater des chaînes de caractères de façon précise, en insérant des variables dans un modèle (template) à l’aide de spécificateurs (%s, %d, %f, etc.).\nC’est très utile pour :\néviter les concaténations multiples avec + générer du texte proprement aligné formater des nombres (arrondis, alignements, unités) ✍️ Syntaxe de base String prenom = \"Mathieu\"; int points = 42; String message = String.format(\"Joueur : %s | Score : %d\", prenom, points); System.out.println(message); // Affiche : Joueur : Mathieu | Score : 42 📚 Spécificateurs de format les plus utilisés Spécificateur Signification Exemple %s Chaîne de caractères \"Nom : %s\" %d Entier \"Score : %d\" %f Nombre décimal \"Poids : %.2f kg\" %% Pourcentage littéral \"Progression : 100%%\" 🔧 Formatage avancé 📌 Arrondir un double à 2 décimales double note = 15.6789; String resultat = String.format(\"Note finale : %.2f / 20\", note); System.out.println(resultat); // Note finale : 15.68 / 20 📌 Aligner proprement des colonnes (facture ou tableau) String ligne = String.format(\"%-12s %5d %10.2f\", \"Stylo\", 10, 2.5); System.out.println(ligne); // Stylo 10 2.50 🧩 Explications :\n%-12s : chaîne alignée à gauche sur 12 caractères %5d : entier aligné à droite sur 5 caractères %10.2f : nombre flottant avec 2 décimales sur 10 caractères (à droite) 🧠 Exercice – Formatage de profil utilisateur 🎯 Objectif : Utiliser String.format() pour construire une sortie propre et lisible à partir de plusieurs données.\n📝 Consignes : Crée les variables suivantes :\nString nom = \"Julie\"; String ville = \"Toulouse\"; int age = 27; double taille = 1.72; Affiche ce message formaté :\nNom : Julie Ville : Toulouse Âge : 27 ans Taille : 1.72 m Utilise String.format() pour aligner les libellés (colonne de gauche) et les valeurs.\n🧩 Astuces : %s pour les chaînes %d pour les entiers %.2f pour un double avec deux décimales %-7s pour aligner les libellés proprement à gauche",
    "description": "Les chaînes de caractères 🍥 Lien vers la classe String de l’API Java\nLes Strings c’est quoi? En Java, une chaîne de caractères (ou String) est un objet qui représente une séquence de caractères. Contrairement à certains langages où les chaînes sont simplement des tableaux de caractères (char[]), en Java, elles sont des objets de la classe String.\nExemple :\nString message = \"Bonjour !\"; Utilisation simple Créer une chaîne :\nString nom = \"Alice\"; //Afficher une chaîne : System.out.println(nom); Connaître la longueur :",
    "tags": [],
    "title": "String",
    "uri": "/420-111/4-string/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Exercices",
    "content": "🔢 Exercices – Opérateurs en Java 🧪 Exercice 1 – Opérations simples Déclare deux entiers a = 12 et b = 5. Affiche :\nLa somme La différence entre a et b Le produit Le quotient entier de la division de b par a Le reste de la division de a par b Sortie attendue La somme de 12 et 5 est : 17 La différence entre 12 et 5 : 7 Le produit de 12 et 5 est : 60 Le quotient entier de la division de b par a est de 0 Le reste de la division de a par b est de 2 🧪 Exercice 2 – Comparaisons simples Déclare :\nint x = 15; int y = 10; Détermine mentalement les résultats (booléens) des expressions suivantes :\nx \u003e y x == y x \u003c= y 🧪 Exercice 3 – Longueur d’un mot et comparaison Déclare :\nString mot = \"Bonjour\"; Affiche :\nLe nombre de lettres dans le mot Si ce nombre est supérieur ou égal à 5 Si ce nombre est différent de 7 Sortie attendue Le mot \"Bonjour\" contient 7 lettres Le mot contient au moins 5 lettres : true Le mot a un nombre de lettres différent de 7 : false 🧪 Exercice 4 – Nombres pairs et impairs Déclare un entier n = 9. Affiche :\nSi ce nombre est pair Sortie attendue Le reste de 9 divisé par 2 est : 1 Le nombre 9 est pair : false 🧪 Exercice 5 – Logique simple Déclare :\nint a = 8; int b = 12; Calcule mentalement les résultats suivants :\na \u003c 10 \u0026\u0026 b \u003e 10 a \u003e 10 || b \u003e 10 !(a == b) 🧪 Exercice 6 – Comparaison de deux sommes Déclare :\nint a = 5 + 4; int b = 3 * 3; Affiche :\nLes deux résultats Si les deux résultats sont égaux (a == b) Sortie attendue La valeur de a est : 9 La valeur de b est : 9 Les deux valeurs sont égales : true 🧪 Exercice 7 – Priorité des opérations Calcule mentalement la valeur de chaque expression suivante :\nint x = 4 + 2 * 3; int y = (4 + 2) * 3; 🧪 Exercice 8 – Expression logique complexe Calcule mentalement la valeur de chaque expression suivante :\nint a = 20; int b = 15; int c = 25; Le résultat de : (a \u003e b \u0026\u0026 b \u003c c) || (a == c) Le résultat de : !(a \u003c c \u0026\u0026 b != 15) 🧪 Exercice 9 – Chaînes et longueurs Déclare deux chaînes :\nString s1 = \"Java\"; String s2 = \"Programmation\"; Affiche :\nLa longueur de chaque chaîne Si s1 est plus court que s2 Si les deux chaînes font exactement 4 caractères Sortie attendue La chaîne s1 \"Java\" contient 4 caractères La chaîne s2 \"Programmation\" contient 13 caractères s1 est plus court que s2 : true Les deux chaînes font exactement 4 caractères : false 🧪 Exercice 10 – Expressions combinées int x = 6; int y = 4; int z = 3; Calcule mentalement la valeur de chaque expression suivante :\nx + y * z (x + y) % z x * y \u003e z + 10 (x \u003e y) \u0026\u0026 (y \u003e z) 🔁 Conversions de type \u0026 arguments 🧪 Exercice 11 – Conversion implicite (promotion automatique) Déclare une variable int x = 10; Assigne-la à une variable double et affiche-la.\n➕ Objectif : Comprendre qu’un int peut être converti en double sans cast explicite.\n🧪 Exercice 12 – Conversion explicite (cast) Déclare une variable double x = 12.9; Convertis-la en int en forçant le cast, puis affiche la valeur.\n➕ Objectif : Observer que la partie décimale est perdue.\n🧪 Exercice 13 – Addition avec cast Déclare :\nint a = 5; double b = 3.7; Calcule leur somme en entier, puis en décimal (2 versions avec cast explicite).\n🧪 Exercice 14 – Conversion de String vers int Déclare :\nString texte = \"42\"; Convertis texte en int, puis multiplie-le par 2 et affiche le résultat.\n🧪 Exercice 15 – Conversion de String vers double Déclare :\nString prix = \"19.99\"; Convertis cette chaîne en double, ajoute-lui 5.50, puis affiche le total.\n🧪 Exercice 16 – Conversion de int vers String Déclare un entier x = 75; Convertis-le en String, puis concatène-le avec \" kg\" et affiche le résultat.\n🧪 Exercice 17 – Lire un argument en ligne de commande Utilise :\npublic static void main(String[] args) Récupère le premier argument args[0] supposé être un prénom, et affiche : \"Bonjour, [prénom]!\"\n🧪 Exercice 18 – Addition d’arguments numériques Récupère deux arguments en ligne de commande (args[0] et args[1]) Supposés être des entiers. Additionne-les et affiche le résultat.\n🧪 Exercice 19 – Moyenne de trois notes passées en arguments Attends 3 arguments (args[0], args[1], args[2]), chacun une note sur 20. Affiche la moyenne des 3 notes (en double, arrondie à 2 décimales).\n🧪 Exercice 20 – Vérification d’un âge avec argument Le programme reçoit un argument args[0], supposé être un âge. Affiche :\nÂge saisi : [valeur] Est-ce un majeur ? : true/false 🧩 Convertir l’argument en int et tester avec \u003e= 18 (sans if, juste afficher l’expression booléenne)\nSolutions",
    "description": "🔢 Exercices – Opérateurs en Java 🧪 Exercice 1 – Opérations simples Déclare deux entiers a = 12 et b = 5. Affiche :\nLa somme La différence entre a et b Le produit Le quotient entier de la division de b par a Le reste de la division de a par b Sortie attendue La somme de 12 et 5 est : 17 La différence entre 12 et 5 : 7 Le produit de 12 et 5 est : 60 Le quotient entier de la division de b par a est de 0 Le reste de la division de a par b est de 2 🧪 Exercice 2 – Comparaisons simples Déclare :",
    "tags": [],
    "title": "Série 4",
    "uri": "/420-111/exercices/serie04/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Structures De Controles \u003e Boucles",
    "content": "🔁🔁 Les boucles imbriquées en Java Une boucle imbriquée (ou boucle dans une boucle) permet de répéter un ensemble d’instructions à l’intérieur d’une autre boucle. C’est très utile pour travailler avec des tableaux à plusieurs dimensions, afficher des grilles, ou répéter des structures complexes.\n🧱 Structure d’une boucle imbriquée for (int i = 0; i \u003c 3; i++) { for (int j = 0; j \u003c 4; j++) { // Instructions exécutées à chaque combinaison de i et j } } 💡 Ici, pour chaque valeur de i, la boucle j s’exécute complètement.\n🔂 Exemple : afficher une grille for (int ligne = 0; ligne \u003c 3; ligne++) { for (int col = 0; col \u003c 5; col++) { System.out.print(\"* \"); } System.out.println(); // retour à la ligne } 🔎 Résultat :\n* * * * * * * * * * * * * * * 💡 Comment ça marche ? ligne col Affichage 0 0→4 * * * * * 1 0→4 * * * * * 2 0→4 * * * * * 👉 La boucle intérieure se termine à chaque tour de la boucle extérieure.\n🎯 Quand utiliser des boucles imbriquées ? Utilise-les pour :\nParcourir des tableaux à deux dimensions Créer des formes, grilles ou tableaux Effectuer des comparaisons multiples ou des comptages croisés 🔁 Exemple : tableau à 2 dimensions int[][] matrice = { {1, 2, 3}, {4, 5, 6} }; for (int i = 0; i \u003c matrice.length; i++) { for (int j = 0; j \u003c matrice[i].length; j++) { System.out.print(matrice[i][j] + \" \"); } System.out.println(); } 🔎 Affiche :\n1 2 3 4 5 6 ⚠️ Attention Les boucles imbriquées peuvent être coûteuses en performance si trop profondes (ex : triple ou quadruple boucle). Toujours bien nommer tes variables (i, j, k, etc.) pour garder ton code lisible. Ne pas oublier les retours à la ligne (System.out.println()) si tu fais de l’affichage. 🧠 À retenir Une boucle imbriquée est une boucle dans une autre boucle. La boucle intérieure s’exécute entièrement à chaque tour de la boucle extérieure. Très utile pour les grilles, matrices, et structures répétitives. 🔹 Exercice 1 : Grille de * avec deux for Utilise deux boucles for imbriquées pour afficher une grille de 4 lignes et 6 colonnes remplie de *.\npublic class Exo1 { public static void main(String[] args) { // Boucle extérieure : lignes for (int i = 0; i \u003c 4; i++) { // Boucle intérieure : colonnes for (int j = 0; j \u003c 6; j++) { System.out.print(\"* \"); } System.out.println(); // Retour à la ligne } } } Sortie attendue * * * * * * * * * * * * * * * * * * * * * * * * 🔹 Exercice 2 : Afficher une matrice de nombres Crée une matrice 2D d’entiers et affiche son contenu ligne par ligne avec deux boucles imbriquées.\npublic class Exo2 { public static void main(String[] args) { int[][] matrice = { {10, 20}, {30, 40}, {50, 60} }; // Parcours de la matrice for (int i = 0; i \u003c matrice.length; i++) { for (int j = 0; j \u003c matrice[i].length; j++) { System.out.print(matrice[i][j] + \" \"); } System.out.println(); } } } Sortie attendue 10 20 30 40 50 60 🔹 Exercice 3 : Triangle d’étoiles croissant Utilise des boucles imbriquées pour afficher un triangle d’étoiles. La première ligne contient 1 étoile, la deuxième 2, etc.\npublic class Exo3 { public static void main(String[] args) { for (int i = 1; i \u003c= 5; i++) { for (int j = 0; j \u003c i; j++) { System.out.print(\"*\"); } System.out.println(); } } } Sortie attendue * ** *** **** ***** 🧩 Défi visuel : Dessiner un damier # et . Affiche un damier de 6 lignes par 6 colonnes, avec des # et . en alternance (comme un échiquier).\npublic class DefiDamier { public static void main(String[] args) { for (int ligne = 0; ligne \u003c 6; ligne++) { for (int col = 0; col \u003c 6; col++) { if ((ligne + col) % 2 == 0) { System.out.print(\"# \"); } else { System.out.print(\". \"); } } System.out.println(); // Retour à la ligne } } } Sortie attendue # . # . # . . # . # . # # . # . # . . # . # . # # . # . # . . # . # . # 🎯 Objectif Utiliser deux boucles imbriquées Alterner les symboles selon la position dans la grille S’appuyer sur l’expression (ligne + col) % 2 pour alterner",
    "description": "🔁🔁 Les boucles imbriquées en Java Une boucle imbriquée (ou boucle dans une boucle) permet de répéter un ensemble d’instructions à l’intérieur d’une autre boucle. C’est très utile pour travailler avec des tableaux à plusieurs dimensions, afficher des grilles, ou répéter des structures complexes.\n🧱 Structure d’une boucle imbriquée for (int i = 0; i \u003c 3; i++) { for (int j = 0; j \u003c 4; j++) { // Instructions exécutées à chaque combinaison de i et j } } 💡 Ici, pour chaque valeur de i, la boucle j s’exécute complètement.",
    "tags": [],
    "title": "Boucles Imbriquees",
    "uri": "/420-111/9-structures-de-controles/boucles/5-boucles-imbriquees/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Opérateurs",
    "uri": "/420-111/operateurs/arithmetique/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Exercices",
    "content": "🧪 Exercice 1 (3 pts) Déclare les variables suivantes : String mot = \"Programmation\"; int n = 12; Affiche les informations suivantes : Le nombre de lettres dans le mot Si ce nombre est supérieur ou égal à 10 Si ce nombre est pair ou impair Si le nombre de lettres du mot est égal au nombre n Sortie attendue (exemple) Le mot \"Programmation\" contient 13 lettres Le mot contient au moins 10 lettres : true Le mot a un nombre de lettres pair : false La longueur du mot est égale au nombre : false Exercice 2 (3 pts) Déclare la plus petite variable pour chacune de ces données et initie-la:\nLe nombre d'élève à Marie-Victorin : 3885 L'âge d'une personne (Sera toujours moins de 120) : 111 Si oui ou non tu aimes les pommes : true La masse d’un atome d’hydrogène : 1.00784 Le nombre de planètes dans le système solaire : 8 (valeur fixe) La distance entre deux étoiles : 9461000000000 (en km) Le slogan affiché à l’accueil : \"Bonjour, humain.\" Sortie attendue Aucune sortie attenue, seulement la déclaration et l’initialisation sont nécessaire\nExercice 3 (4 pts) À partir des données suivantes :\nString prenom = \"Sophie\"; String nom = \"Lefebvre\"; String anneeNaissance = \"1988\"; Génère un identifiant unique sous cette forme :\nIdentifiant généré : LEFEBVRE_S88 Contraintes :\nNom en majuscules La première lettre du prénom en majuscule(S ici) Les deux derniers chiffres de l’année de naissance",
    "description": "🧪 Exercice 1 (3 pts) Déclare les variables suivantes : String mot = \"Programmation\"; int n = 12; Affiche les informations suivantes : Le nombre de lettres dans le mot Si ce nombre est supérieur ou égal à 10 Si ce nombre est pair ou impair Si le nombre de lettres du mot est égal au nombre n Sortie attendue (exemple) Le mot \"Programmation\" contient 13 lettres Le mot contient au moins 10 lettres : true Le mot a un nombre de lettres pair : false La longueur du mot est égale au nombre : false Exercice 2 (3 pts) Déclare la plus petite variable pour chacune de ces données et initie-la:",
    "tags": [],
    "title": "Série 5",
    "uri": "/420-111/exercices/serie05/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Exercices",
    "content": "🧮 Exercices – Tableaux en Java (sans boucle) avec sorties attendues 🧪 Exercice 1 – Création et accès Crée un tableau de 3 entiers :\n10, 20, 30 Affiche le premier et le dernier élément.\nSortie attendue Premier élément : 10 Dernier élément : 30 🧪 Exercice 2 – Longueur d’un tableau Crée un tableau de chaînes :\nAlice, Bob, Carla, Dan Affiche la longueur du tableau.\nSortie attendue Nombre de prénoms : 4 🧪 Exercice 3 – Concaténation de plusieurs éléments Crée :\nChien, Chat, Lapin Concatène les 3 éléments dans une phrase.\nSortie attendue Chien, Chat et Lapin 🧪 Exercice 4 – Somme manuelle Crée :\n14, 16, 12 Calcule et affiche la somme des notes.\nSortie attendue Somme des notes : 42 🧪 Exercice 5 – Moyenne sans boucle Fait un tableau avec les entiers suivants:\n14, 16, 11 Calcule la moyenne en double.\nSortie attendue La moyenne est de : 13.7 🧪 Exercice 6 – Accès avec opérations Fait un tableau avec les entiers suivants:\n4, 8, 2, 10 Affiche la somme du 1er et du dernier élément, multipliée par 2.\nSortie attendue (4 + 10) * 2 = 28 🧪 Exercice 7 – Conversion de String[] en int Crée :\nString[] nombresTextes = {\"5\", \"8\", \"3\"}; Convertis et additionne les éléments.\nSortie attendue Somme convertie : 16 🧪 Exercice 8 – Tableaux et String.format() À partir de :\nString[] user = {\"Lucie\", \"Ginette\", \"Jean-Michel\"}; int[] age = {32, 43, 78}; Utilise String.format(...) pour produire l’affichage suivant :\nSortie attendue Lucie : 32 Ginette : 43 Jean-Michel : 78 🧪 Exercice 9 – Longueur des mots Crée :\nString[] mots = {\"Bonjour\", \"à\", \"tous\"}; Affiche la longueur de chaque mot.\nSortie attendue \"Bonjour\" contient 7 lettres \"à\" contient 1 lettres \"tous\" contient 4 lettres 🧪 Exercice 10 – args[] et calcul Crée un programme qui reçoit 2 entiers depuis la ligne de commande : Par exemple :\njava MonProgramme 25 30 Additionne les 2 valeurs.\nSortie attendue Arguments reçus : 25 et 30 Somme : 55 🧮 **Exercices – Tableaux 2D en Java (sans boucle) ✅ Autorisé : Accès manuel aux éléments, opérations, concaténation, String.format, etc. 🚫 Interdit : for, while, do while\n🧪 **Exercice 11 Crée une matrice 2x2 contenant:\n1, 2 3, 4 Affiche le 1 et le 4.\nSortie attendue 1 4 🧪 **Exercice 12 Crée une matrice 2x2 contenant:\nAlice, Bob Carla, Dan Affiche la deuxième ligne complète.\nSortie attendue Carla Dan 🧪 **Exercice 13 Crée une matrice 2x2 contenant:\nJean, Luc Sophie, Marie Affiche une phrase pour chaque prénom : Bonjour, [prenom] !\nSortie attendue Bonjour, Jean ! Bonjour, Luc ! Bonjour, Sophie ! Bonjour, Marie ! 🧪 **Exercice 14 Crée une matrice 2x2 contenant:\n5, 7 4, 9 Affiche la somme totale des éléments.\nSortie attendue Somme totale : 25 🧪 **Exercice 15 Avec :\n12.5, 13.5 14.0, 10.0 Calcule la moyenne des 4 valeurs (en double, précision 1 chiffre).\nSortie attendue Moyenne : 12.5 🧪 **Exercice 16 Crée une matrice 2x3 contenant:\n2, 4, 6 1, 3, 5 Additionne la première valeur de la première ligne avec la dernière valeur de la deuxième ligne.\nSortie attendue 2 + 5 = 7 Solutions",
    "description": "🧮 Exercices – Tableaux en Java (sans boucle) avec sorties attendues 🧪 Exercice 1 – Création et accès Crée un tableau de 3 entiers :\n10, 20, 30 Affiche le premier et le dernier élément.\nSortie attendue Premier élément : 10 Dernier élément : 30 🧪 Exercice 2 – Longueur d’un tableau Crée un tableau de chaînes :\nAlice, Bob, Carla, Dan Affiche la longueur du tableau.\nSortie attendue Nombre de prénoms : 4 🧪 Exercice 3 – Concaténation de plusieurs éléments Crée :",
    "tags": [],
    "title": "Série 6",
    "uri": "/420-111/exercices/serie06/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation",
    "content": "🔄 Conversion implicite vs explicite en Java La conversion permet de changer le type d’une donnée pour l’adapter à une autre variable ou expression.\n1. Conversion implicite (promotion automatique) Java effectue automatiquement la conversion quand il n’y a pas de risque de perte de données. Se produit souvent quand on passe d’un type plus petit à un type plus grand. Exemples classiques : De Vers Exemple int double double d = 5; byte int int x = 10; int a = 10; double b = a; // Conversion implicite 2. Conversion explicite (casting) Nécessaire quand il y a un risque de perte de données ou incompatibilité. Le programmeur doit forcer la conversion avec un cast (type). Exemples classiques : De Vers Exemple double int int x = (int) 9.99; long int int y = (int) 100000L; double x = 9.99; int y = (int) x; // Conversion explicite, décimale perdue 3. Différences clés Aspect Conversion implicite Conversion explicite Nécessite une action ? Non, automatique Oui, cast obligatoire (type) Risque de perte Non Oui Sens Du plus petit au plus grand Du plus grand au plus petit Exemples int → double double → int 4. En résumé Conversion implicite = sûre, automatique, du type petit vers grand. Conversion explicite = risquée, forcée, du type grand vers petit. Utilise toujours le casting explicite pour éviter les erreurs de compilation. 🧠 À retenir Java convertit tout seul quand c’est sûr. Pour tout ce qui peut perdre des infos, il faut caster manuellement. Sois vigilant avec les conversions explicites, elles peuvent tronquer ou modifier la valeur. Conversion_des_types Le terme le plus utilisé pour la technique de conversion est « Casting ».\nCas 1 Conversion 1 : String vers les numériques Conversion 2 : Les numériques vers une String en utilisant la méthode valueOf() Conversion 3 : Les numériques vers une String en utilisant la méthode toString() Conversion 4 : String vers les primitifs Conversion 5 : Primitifs vers String Conversion 6 : Les primitifs vers une String en utilisant la méthode valueOf() Automatique vs manuelle Conversion automatique : il s’agit d’une conversion d’un type plus petit en un type plus grand\nbyte -\u003e short -\u003e char -\u003e int -\u003e long -\u003e float -\u003e double\nCas 2 Conversion manuelle :\nil s’agit de la conversion d’un type plus grand en un type de taille plus petite. Il suffit de rajouter le casting du type voulu à droite.\ndouble -\u003e float -\u003e long -\u003e int -\u003e char -\u003e short -\u003e byte double d = 2000.23; float f = (float)d; long l = (long) f;\nQuand on diminue la taille il y a parfois une perte d’information comme si l’on passe de float à int:\nfloat a = 4.53F; System.out.println((int) a); //4 Pour résumer : Dans le cas d’une conversion de petit vers grand ➔ on ne fait rien. Dans le cas d’une conversion d’un grand vers un petit ➔ il faut « Caster » la partie droite en type du petit. 🧪 Exercice 1 : Fusion de types Objectif : Comprendre la promotion automatique des types.\n🧾 Consignes :\nCrée une variable byte avec une valeur (ex. byte b = 10;) Crée une variable int et affecte-lui la valeur de b (sans cast) Affiche la valeur de l’int Explique dans un commentaire pourquoi ça fonctionne sans cast 🔧 Concepts : conversion implicite byte → int\n✂️ Exercice 2 : Tronquage d’un flottant Objectif : Observer la perte de données lors d’un cast.\n🧾 Consignes :\nDéclare une variable double avec une valeur décimale (ex. double d = 123.456;) Caste-la en int et stocke le résultat dans une nouvelle variable Affiche les deux valeurs Constate la perte des décimales 🔧 Concepts : conversion explicite double → int\n🔁 Exercice 3 : Enchaînement de cast Objectif : Appliquer plusieurs conversions manuelles successives.\n🧾 Consignes :\nDéclare une variable double avec une valeur (ex. double x = 1000.99;) Convertis-la en float, puis en long, puis en int Affiche chaque étape Observe l’évolution de la donnée à chaque cast 🔧 Concepts : conversion explicite en chaîne : double → float → long → int\n📥 Passage d’arguments par la ligne de commande en Java 1. 🔍 Qu’est-ce que c’est ? En Java, on peut passer des valeurs à un programme au moment de son exécution, directement depuis la ligne de commande.\nCes valeurs sont appelées arguments et sont transmis au programme via le tableau String[] args de la méthode main.\n2. 📌 Syntaxe ✅ Déclaration classique public class MonProgramme { public static void main(String[] args) { // args est un tableau de chaînes } } ✅ Exécution (en ligne de commande) java MonProgramme argument1 argument2 argument3 Ces argument1, argument2, etc. seront accessibles dans le tableau args.\n3. 🧪 Exemple simple public class ExempleArgs { public static void main(String[] args) { System.out.println(\"Premier argument : \" + args[0]); System.out.println(\"Deuxième argument : \" + args[1]); } } ⚠️ Important args[0] = premier argument args[1] = deuxième argument args.length = nombre total d’arguments 4. 🛑 Gestion des erreurs Il faut toujours vérifier la taille du tableau args pour éviter les erreurs :\nif (args.length \u003c 2) { System.out.println(\"Erreur : il faut au moins 2 arguments.\"); return; } 5. 🔄 Conversion de type Les arguments sont des chaînes de caractères (String) par défaut. Pour utiliser des nombres :\nint age = Integer.parseInt(args[0]); // Convertit en int double taille = Double.parseDouble(args[1]); // Convertit en double ⚠️ Attention aux erreurs si l’utilisateur entre des valeurs non numériques.\n6. 🎯 Utilisation typique Fournir des paramètres (nom, âge, etc.) à un programme. Contrôler le comportement du programme (mode test, options, etc.). Éviter de coder en dur des valeurs. 7. 📦 Exemple complet public class BonjourNom { public static void main(String[] args) { if (args.length == 0) { System.out.println(\"Usage : java BonjourNom \u003cnom\u003e\"); return; } System.out.println(\"Bonjour \" + args[0] + \" !\"); } } 🧠 À retenir Élément Détail String[] args Tableau contenant les arguments args.length Nombre d’arguments passés args[i] iᵉ argument (indexé à partir de 0) Conversion Utiliser Integer.parseInt(), Double.parseDouble(), etc. Bonne pratique Vérifier la longueur du tableau avant d’accéder aux éléments 🧩 Exercice 1 : Convertisseur Celsius → Fahrenheit 🎯 Objectif : Lire une température en degrés Celsius en argument, et afficher sa conversion en Fahrenheit.\n🔧 Consigne : Le programme prend un seul argument numérique.\nIl affiche :\n\u003cvaleur\u003e°C équivaut à \u003cvaleur_fahrenheit\u003e°F Utilise la formule : F = C × 9/5 + 32\n📝 Exemple attendu : java Convertisseur 25 25°C équivaut à 77.0°F 🛑 Ajoute une vérification si aucun argument n’est donné ou si l’entrée n’est pas un nombre.\n🧮 Exercice 2 : Nombre pair ou impair 🎯 Objectif : Vérifier si un nombre entier donné en argument est pair ou impair.\n🔧 Consigne : Le programme prend un entier en argument.\nIl affiche :\n“Nombre pair” si divisible par 2 “Nombre impair” sinon 📝 Exemple attendu : java Parite 41 Nombre impair 🛑 Ajoute une gestion d’erreur si l’argument est absent ou non entier.\n📚 Exercice 3 : Compteur de mots 🎯 Objectif : Compter le nombre total de mots passés en argument.\n🔧 Consigne : Le programme prend n’importe quel nombre de mots (chaînes) en arguments.\nIl affiche :\nNombre de mots : X 📝 Exemple attendu : java Compteur Bonjour à tous les étudiants Nombre de mots : 5 🛡️ Gère le cas où aucun mot n’est fourni (afficher un message).",
    "description": "🔄 Conversion implicite vs explicite en Java La conversion permet de changer le type d’une donnée pour l’adapter à une autre variable ou expression.\n1. Conversion implicite (promotion automatique) Java effectue automatiquement la conversion quand il n’y a pas de risque de perte de données. Se produit souvent quand on passe d’un type plus petit à un type plus grand. Exemples classiques : De Vers Exemple int double double d = 5; byte int int x = 10; int a = 10; double b = a; // Conversion implicite 2. Conversion explicite (casting) Nécessaire quand il y a un risque de perte de données ou incompatibilité. Le programmeur doit forcer la conversion avec un cast (type). Exemples classiques : De Vers Exemple double int int x = (int) 9.99; long int int y = (int) 100000L; double x = 9.99; int y = (int) x; // Conversion explicite, décimale perdue 3. Différences clés Aspect Conversion implicite Conversion explicite Nécessite une action ? Non, automatique Oui, cast obligatoire (type) Risque de perte Non Oui Sens Du plus petit au plus grand Du plus grand au plus petit Exemples int → double double → int 4. En résumé Conversion implicite = sûre, automatique, du type petit vers grand. Conversion explicite = risquée, forcée, du type grand vers petit. Utilise toujours le casting explicite pour éviter les erreurs de compilation. 🧠 À retenir Java convertit tout seul quand c’est sûr. Pour tout ce qui peut perdre des infos, il faut caster manuellement. Sois vigilant avec les conversions explicites, elles peuvent tronquer ou modifier la valeur. Conversion_des_types Le terme le plus utilisé pour la technique de conversion est « Casting ».",
    "tags": [],
    "title": "Conversions De Types",
    "uri": "/420-111/6-conversions-de-types/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Exercices",
    "content": "🔀 Exercices – Structures de contrôle conditionnelles (if/else) en Java 🧪 Exercice 1 Déclare un entier int x = -3; Affiche s’il est positif ou négatif avec un message correspondant au résultat.\nSortie attendue Le nombre est négatif. 🧪 Exercice 2 Déclare int n = 7; Affiche si le nombre est pair ou impair.\nSortie attendue Le nombre 7 est impair. 🧪 Exercice 3 Déclare :\nint a = 12; int b = 20; Affiche lequel est le plus grand. Affiche a et b sont égaux si c’est le cas.\nSortie attendue b est plus grand que a. 🧪 Exercice 4 Reçois une note en argument.\nAffiche :\n“Excellent” si note \u003e= 16 “Bien” si note \u003e= 14 “Passable” si note \u003e= 12 “Échec” sinon Sortie attendue Excellent 🧪 Exercice 5 Exécution :\njava Main admin 1234 Si le nom est \"admin\" et le mot de passe est \"1234\", affiche “Bienvenue admin”, sinon “Identifiants incorrects”.\nSortie attendue Bienvenue admin L'année est bissextile. 🧪 **Exercice 6 ** Exécution :\njava Main 12 16 10 12 Si la moyenne des 4 notes est supérieure ou égale à 12, affiche “Réussite”, sinon “Échec”.\nSortie attendue Réussite 🧪 Exercice 7 Exécution :\njava Main bonjour bonjour Compare les deux arguments (args[0] et args[1]) et affiche s’ils sont identiques.\nIndice : Le if-else est-il vraiment nécessaire ici?\nSortie attendue bonjour et bonjour sont identiques : true 🧪 Exercice 8 String[] mots = {\"bonjour\", \"test\", \"interdit\"}; Si un des éléments du tableau est \"interdit\", affiche “Attention : mot interdit détecté.”\nSortie attendue Attention : mot interdit détecté. 🧪 Exercice 9 Exécution :\njava Main unMot affiche :\n“Mot court” si \u003c 5 lettres “Mot moyen” si ≤ 7 lettres “Mot long” sinon Sortie attendue Mot : unMot Longueur : 5 Mot moyen 🧪 Exercice 10 int a = 5; int b = 5; int c = 5; Affiche :\n“Équilatéral” si les 3 côtés sont égaux “Isocèle” si 2 côtés sont égaux “Scalène” sinon Sortie attendue Triangle équilatéral 🧪 Exercice 11 – Couleur selon code Exécution :\njava Main G Utilise switch pour :\n\"R\" → Rouge \"G\" → Vert \"B\" → Bleu Autre → Inconnu Sortie attendue Code : G Couleur : Vert 🎯 Exercices – if ternaire (?:) en Java 🧪 Exercice 12 – Pair ou impair (ternaire) En une seule ligne de code determine si n est pair et affiche-le.\nint n = 7; Sortie attendue Le nombre 7 est impair 🧪 Exercice 13 Exécution :\njava Main 12 En une ligne de code affiche si l’âge entré en argument est considéré comme mineur ou majeur au Qc.\nSortie attendue Mineur 🧠 Exercices – switch en Java 🧪 Exercice 14 – Menu utilisateur String choix = \"B\"; Affiche selon :\n“A” → Accueil “B” → Profil “C” → Déconnexion Sinon → Option inconnue Sortie attendue Profil 🧪 Exercice 15 – Commande depuis les arguments Exécution :\njava Main start Utilise switch pour :\n“start” → Lancement du programme “stop” → Arrêt demandé “reset” → Réinitialisation Sinon → Commande inconnue Sortie attendue Lancement du programme Solutions",
    "description": "🔀 Exercices – Structures de contrôle conditionnelles (if/else) en Java 🧪 Exercice 1 Déclare un entier int x = -3; Affiche s’il est positif ou négatif avec un message correspondant au résultat.\nSortie attendue Le nombre est négatif. 🧪 Exercice 2 Déclare int n = 7; Affiche si le nombre est pair ou impair.\nSortie attendue Le nombre 7 est impair. 🧪 Exercice 3 Déclare :\nint a = 12; int b = 20; Affiche lequel est le plus grand. Affiche a et b sont égaux si c’est le cas.",
    "tags": [],
    "title": "Série 7",
    "uri": "/420-111/exercices/serie07/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation",
    "content": "📦 Les tableaux 1D en Java Un tableau (array) permet de stocker plusieurs valeurs dans une même variable, toutes du même type (int, double, etc.).\nLes tableaux à une dimension (1D) sont comme une liste ordonnée de valeurs, accessibles grâce à leur indice.\n🏗️ Déclaration et création ✏️ Déclarer un tableau int[] notes; // déclaration 🛠️ Créer un tableau notes = new int[5]; // tableau de 5 entiers (tous à 0) Ou, préférablement, tout en une ligne :\nint[] notes = new int[5]; 💡 Tous les éléments sont automatiquement initialisés :\nType Valeur par défaut int 0 double 0.0 boolean false String null 🧊 Accès aux éléments Un tableau utilise des indices qui commencent à 0 !\nnotes[0] = 17; // affecte 17 au premier élément System.out.println(notes[0]); // affiche 17 💥 Accéder à un indice hors-limites provoque une erreur :\nnotes[5] = 20; // ❌ Erreur : IndexOutOfBoundsException 🪞 Initialisation rapide On peut directement donner des valeurs au moment de la création :\nint[] jours = {31, 28, 31, 30, 31, 30}; 📏 La propriété .length Chaque tableau possède une propriété spéciale :\nint taille = notes.length; // ici : 5 ❗ Ce n’est pas une méthode (pas de parenthèses !)\n🧪 Exemples simples int[] valeurs = {10, 20, 30}; System.out.println(valeurs[1]); // 20 System.out.println(valeurs.length); // 3 valeurs[2] = 40; System.out.println(valeurs[2]); // 40 🧠 À retenir Un tableau stocke plusieurs valeurs du même type. Les indices commencent à 0. .length donne le nombre d’éléments du tableau. Ne jamais dépasser les bornes du tableau ! Très bien ! Voici une nouvelle version des 3 exercices sur les tableaux 1D en Java, cette fois avec différents types de données (int, double, String, boolean) comme dans la matière vue.\n🔹 Exercice 1 : Tableaux de double Crée un tableau temperatures qui contient 4 températures mesurées : 22.5, 19.8, 21.0, 23.3 Puis affiche la première et la dernière température.\npublic class Exo1 { public static void main(String[] args) { // Création avec initialisation directe // Affichage } } Sortie attendue Première : 22.5 Dernière : 23.3 🔹 Exercice 2 : Tableaux de String Déclare un tableau jours de 7 chaînes (String) pour stocker les jours de la semaine. Affecte les valeurs manuellement, puis affiche l’avant dernier jour : (samedi).\npublic class Exo2 { public static void main(String[] args) { // Déclaration et initialisation // Affectation manuelle // Affichage du jour du week-end } } Sortie attendue Avant dernier jours : samedi 🔹 Exercice 3 : Tableau de boolean et .length Un tableau reponses contient les réponses à un QCM (true si bonne réponse, false sinon).\nInitialise un tableau de 3 réponses : true, false, true Affiche le nombre total de réponses et la 2e réponse. public class Exo3 { public static void main(String[] args) { boolean[] reponses = _______________________________________; System.out.println(\"Nombre de réponses : \" + ___________________); System.out.println(\"Deuxième réponse : \" + ______________________); } }",
    "description": "📦 Les tableaux 1D en Java Un tableau (array) permet de stocker plusieurs valeurs dans une même variable, toutes du même type (int, double, etc.).\nLes tableaux à une dimension (1D) sont comme une liste ordonnée de valeurs, accessibles grâce à leur indice.\n🏗️ Déclaration et création ✏️ Déclarer un tableau int[] notes; // déclaration 🛠️ Créer un tableau notes = new int[5]; // tableau de 5 entiers (tous à 0) Ou, préférablement, tout en une ligne :",
    "tags": [],
    "title": "Tableaux",
    "uri": "/420-111/8-tableaux/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Structures De Controles",
    "uri": "/420-111/9-structures-de-controles/conditionnelles/if-else/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Exercices",
    "content": "🔁 Exercices – Boucles for en Java avec args[] et tableaux 🧪 Exercice 1 💡 Utilise une boucle for pour afficher tous les arguments passés à l’exécution.\nExécution :\njava Main Alice Bob Carla Objectif : Afficher :\nArgument 0 : Alice Argument 1 : Bob Argument 2 : Carla 🧪 Exercice 2 int[] nombres = {4, 7, 2, 9}; Utilise une boucle for pour calculer et afficher la somme des éléments.\nSortie attendue Somme des éléments : 22 🧪 Exercice 3 String[] mots = {\"Java\", \"Programmation\", \"Code\", \"Tableau\", \"if\"}; Utilise une boucle for et if pour compter combien de mots ont une longueur ≥ 5.\nSortie attendue Mots de 5 lettres ou plus : 2 🧪 Exercice 4 Exécution :\njava Main 10 15 20 Convertis chaque argument en int et calcule la moyenne avec une boucle for.\nSortie attendue Nombres reçus : 10 15 20 Moyenne : 15.0 🧪 Exercice 5 int[][] matrice = { {1, 2, 3}, {4, 5, 6} }; Utilise deux for pour afficher tous les éléments ligne par ligne.\nSortie attendue 1 2 3 4 5 6 🔁 Exercices – Boucle while en Java 🧪 Exercice 6 Utilise une boucle while pour afficher les entiers de 1 à 5.\nSortie attendue 1 2 3 4 5 🧪 Exercice 7 Exécution :\njava Main Bonjour stop Encore Utilise while pour afficher chaque mot de args[] jusqu’à ce que le mot \"stop\" soit rencontré.\nNe pas afficher \"stop\" lui-même.\nSortie attendue Argument 0 : Bonjour 🧪 Exercice 8 int[] notes = {12, 15, 9}; Utilise while pour afficher chaque note.\nSortie attendue Note 0 : 12 Note 1 : 15 Note 2 : 9 🧪 Exercice 9 int a = 3; int b = 10; Utilise while pour afficher les entiers pairs uniquement entre a et b inclus.\nSortie attendue Nombre pair : 4 Nombre pair : 6 Nombre pair : 8 Nombre pair : 10 🧪 Exercice 10 Exécution :\njava Main 2 4 6 8 Utilise while pour convertir chaque args[i] en int et calculer leur somme.\nSortie attendue Somme : 20 🧪 Exercice 11 Utilise une boucle do...while pour afficher les entiers de 1 à 5.\nSortie attendue 1 2 3 4 5 🧪 Exercice 12 int[] nombres = {10, 20, 30}; Utilise une boucle do...while pour afficher tous les éléments du tableau.\nSortie attendue Élément 0 : 10 Élément 1 : 20 Élément 2 : 30 🧪 Exercice 13 String mot = \"Java\"; Utilise une boucle do...while\nSortie attendue Lettre 0 : J Lettre 1 : a Lettre 2 : v Lettre 3 : a 🔁 Exercices – Boucles for-each en Java 🧪 Exercice 14 Exécution :\njava Main ChatGPT OpenAI Java Affiche tous les arguments avec une boucle for-each.\nSortie attendue Argument : ChatGPT Argument : OpenAI Argument : Java 🧪 Exercice 15 int[] nombres = {3, 6, 9, 12}; Utilise for-each pour calculer et afficher la somme.\nSortie attendue Somme des éléments : 30 🧪 Exercice 16 String mot = \"Hello\"; Utilise une boucle for-each (sur un tableau de char) pour afficher chaque lettre.\nSortie attendue H e l l o 🧪 Exercice 17 – Table de multiplication Affiche la table de multiplication de 1 à 5.\nUtilise deux boucles for imbriquées.\nSortie attendue 1 x 1 = 1 1 x 2 = 2 1 x 3 = 3 1 x 4 = 4 1 x 5 = 5 2 x 1 = 2 2 x 2 = 4 2 x 3 = 6 2 x 4 = 8 2 x 5 = 10 3 x 1 = 3 3 x 2 = 6 3 x 3 = 9 3 x 4 = 12 3 x 5 = 15 4 x 1 = 4 4 x 2 = 8 4 x 3 = 12 4 x 4 = 16 4 x 5 = 20 5 x 1 = 5 5 x 2 = 10 5 x 3 = 15 5 x 4 = 20 5 x 5 = 25 🧪 Exercice 18 Affiche un escalier (*).\nSortie attendue * ** *** **** ***** 🧪 Exercice 19 int[][] A = { {1, 2}, {3, 4} }; int[][] B = { {5, 6}, {7, 8} }; Utilise des boucles imbriquées pour additionner A et B élément par élément, puis affiche la matrice résultat.\nSortie attendue 6 8 10 12 🧪 Exercice 20 Suppose que args[] contient 6 mots.\nAffiche les mots en grille 2 lignes x 3 colonnes, chaque colonne fait 8 espaces de large.\nExécution :\njava Main un deux trois quatre cinq six Sortie attendue un deux trois quatre cinq six 🧪 **Exercice 21 ** Utilise une boucle for et un break pour afficher les nombres de 1 à 10, mais arrête la boucle dès que le nombre atteint 6.\nSortie attendue 1 2 3 4 5 6 🧪 Exercice 22 Utilise une boucle for et un continue pour afficher les nombres de 1 à 10, mais saute le nombre 5 (ne l’affiche pas).\nSortie attendue 1 2 3 4 6 7 8 9 10 🧪 Exercice 23 String[] mots = {\"chat\", \"chien\", \"\", \"oiseau\"}; Parcours le tableau avec une boucle for. Affiche la position du premier mot vide (\"\") et arrête la boucle grâce à break.\nSortie attendue Première chaîne vide à l’indice : 2 🧪 **Exercice 24 ** String[] mots = {\"arbre\", \"Grizzly\", \"chat\", \"animal\", \"chien\"}; Utilise continue dans une boucle for pour n’afficher que les mots qui ne contiennent pas la lettre 'a'.\nSortie attendue Grizzly chien 🧪 Exercice 25 À partir de l’adresse suivante :\nString email = \"alexandre.durand@example.com\" Affiche une version “masquée” :\na***************@example.com Solutions",
    "description": "🔁 Exercices – Boucles for en Java avec args[] et tableaux 🧪 Exercice 1 💡 Utilise une boucle for pour afficher tous les arguments passés à l’exécution.\nExécution :\njava Main Alice Bob Carla Objectif : Afficher :\nArgument 0 : Alice Argument 1 : Bob Argument 2 : Carla 🧪 Exercice 2 int[] nombres = {4, 7, 2, 9}; Utilise une boucle for pour calculer et afficher la somme des éléments.",
    "tags": [],
    "title": "Série 9",
    "uri": "/420-111/exercices/serie09/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Exercices",
    "content": "🧪 Exercice 1 Crée une fonction saluer qui prend un paramètre String nom et affiche : Bonjour [nom]!\n🧪 Exercice 2 Crée une fonction somme qui prend deux entiers en paramètres et retourne leur somme. Affiche le résultat de somme(5, 7).\n🧪 Exercice 3 Crée une fonction max qui prend deux entiers et retourne le plus grand. Teste-la avec les valeurs 8 et 12.\n🧪 Exercice 4 Crée une fonction moyenne qui prend trois double et retourne leur moyenne. Affiche la moyenne de 12.5, 15.0, 17.5.\n🧪 Exercice 5 Crée une fonction estPair qui prend un entier et retourne true si le nombre est pair, sinon false. Teste-la avec le nombre 11.\n🧪 Exercice 6 Crée une fonction factorielle qui calcule la factorielle d’un entier positif (exemple : factorielle(5) = 120). Affiche la factorielle de 5.\n🧪 Exercice 7 Crée une fonction inverse qui prend une chaîne String en paramètre et retourne la chaîne inversée. Teste-la avec \"Java\".\n🧪 Exercice 8 Crée une fonction maxTableau qui prend un tableau d’entiers et retourne la valeur maximale. Teste-la avec {3, 9, 2, 14, 5}.\nVoici une reformulation plus claire et fluide de l’exercice :\nExercice 9 Écrivez une fonction qui prend en paramètre un entier nbElement et retourne un tableau contenant nbElement entiers aléatoires compris entre 0 et 100 (inclus). (Astuce : utilisez Math.random).\nDans la fonction principale (main), appelez cette fonction pour générer un tableau avec nbElement valeurs, puis affichez chaque valeur du tableau sur une ligne différente.\nExemple de sortie attendue pour nbElement = 5 : 45 30 56 77 34 Exo_10 Exercice :\nFaites une fonction pour afficher le tableau généré à la question précédente sous un format plus esthétique\nExemple de sortie attendue :\n[45,30,56,77,34] Exo_11 Exercice :\nReprenez le code de la question précédente.\nTrouvez le maximum et le minimum du tableau, puis affichez-les. Utiliser 2 méthodes (findMax et findMin) Exemple de sortie attendue :\n[45,30,56,77,34] Le maximum est : 77 Le minimum est : 30 Exo_12 - Utilisation du return Exercice :\nÉcrivez une méthode qui reçoit 2 tableaux d’entiers en paramètre. Il affiche les 2 tableaux. Il affiche ensuite identique si les 2 tableaux ont le même nombre d’éléments et que tous les éléments au même index sont égaux, sinon il affiche différent.\n[5,1,2,2,1,4,5,6,6,7] [5,1,2,2,1,4,5,6,6,7] Identique [5,1,2,2,1,4,5,6,6,7] [5,1,2,2,0,4,5,6,6,7] Différent Exo_13 Exercice :\nCréez une méthode pour compter combien de voyelles (a, e, i, o, u, y) il y a dans un tableau de caractères passée en paramètre.\nCréez un tableau de caractères : ['a', 'b', 'e', 'f', 'i', 'o', 'u', 'p']. Utilisez une boucle pour compter combien de voyelles il y a dans le tableau et affichez le résultat. Exemple de sortie attendue :\nIl y a 5 voyelles dans le tableau. Exo_14 Faites une méthode qui vérifie et retourne un booléen si un mots est un palindrome (le mot est identique lorsqu’il est lu de gauche à droite ou de droite à gauche). (Ex: laval)\nExemple de sortie attendue :\ntrue //Laval false // Patate Exo_15 Exercice :\nFaites une méthode qui prend en paramètre un tableau de int et un int. Renvoi true si le 2e paramètre est dans le tableau. Exemple de sortie attendue :\ntrue Exo_16 Exercice :\nRemplacer une lettre donnée dans une chaîne par une autre lettre.\nCréez une chaîne de caractères. Remplacez toutes les occurrences d’un caractère spécifique par un autre caractère. Exemple de chaîne : \"banana\"\nRemplacer 'a' par 'o'\nExemple de sortie attendue :\nLa chaîne après remplacement est : bonono Exo_17 Niveau : 3 ⭐\nCompter combien de fois un caractère apparaît dans une chaîne.\nExercice :\nFaites une méthode qui prend en paramètre une chaîne de caractères. Comptez et affichez combien de fois un caractère spécifique (par exemple 'o') apparaît dans la chaîne. Exemple de chaîne : \"Hello World\"\nExemple de sortie attendue :\n2 Exo_18 Exercice :\npublic static int[] fusionTab(int[] tab1, int[] tab2) { } Fusionner deux tableaux dans un seul tableau.\npublic static void main(String[] args) { int[] tab1 = {1 , 2 , 3}; int[] tab2 = {4 , 5 , 6}; int[] tab3; tab3 = fusionTab(tab1, tab2); afficherTableau(tab3); } Exemple de sortie attendue :\nTableau fusionné : [1, 2, 3, 4, 5, 6] Exo_19 Exercice :\nCréez une méthode qui reçois l’entier n.\nCréez un tableau d’entiers de taille n. Remplissez le de n nombres aléatoires entre 0 et 100. Affichez le Inverser l’ordre des éléments du tableau. Affichez le Exemple de sortie attendue :\n[45,30,56,77,34] [34,77,56,30,45] Solutions",
    "description": "🧪 Exercice 1 Crée une fonction saluer qui prend un paramètre String nom et affiche : Bonjour [nom]!\n🧪 Exercice 2 Crée une fonction somme qui prend deux entiers en paramètres et retourne leur somme. Affiche le résultat de somme(5, 7).\n🧪 Exercice 3 Crée une fonction max qui prend deux entiers et retourne le plus grand. Teste-la avec les valeurs 8 et 12.\n🧪 Exercice 4 Crée une fonction moyenne qui prend trois double et retourne leur moyenne. Affiche la moyenne de 12.5, 15.0, 17.5.",
    "tags": [],
    "title": "Série 10",
    "uri": "/420-111/exercices/serie010/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Exercices",
    "content": "📥 Exercices – Entrées utilisateur en Java 🧪 Exercice 1 – Lire un prénom Demande à l’utilisateur de saisir son prénom (chaine de caractères) et affiche : Bonjour, [prénom] !\n🧪 Exercice 3 – Lire deux entiers et afficher leur somme Demande à l’utilisateur de saisir deux entiers, puis affiche la somme.\n🧪 Exercice 4 – Lire un nombre à virgule Demande à l’utilisateur de saisir un nombre à virgule (double) et affiche ce nombre arrondi à 2 décimales.\n🧪 Exercice 6 – Lire une phrase complète Demande à l’utilisateur de saisir une phrase complète (avec espaces), puis affiche-la.\n🧪 Exercice 7 – Calculer la moyenne de 3 notes Demande à l’utilisateur de saisir 3 notes (double) séparées par un espace sur la même ligne, calcule la moyenne et affiche-la arrondie à 2 décimales.\nExo_55 Niveau : 3 ⭐\nExercice :\nVérification de l’année bissextile : Écrivez un programme qui demande à l’utilisateur de saisir une année, puis affiche “Année bissextile” si l’année est divisible par 4 et non divisible par 100, ou si elle est divisible par 400. Sinon, affiche “Année non bissextile”.\nEntrez une année : 2025 Année non bissextile 🧪 Exercice 1 – Menu simple de salutation Affiche ce menu :\n1. Dire bonjour 2. Dire au revoir 3. Quitter Lis le choix de l’utilisateur (entier). Affiche :\n\"Bonjour !\" si choix = 1 \"Au revoir !\" si choix = 2 \"Fin du programme.\" si choix = 3 🧪 Exercice 2 – Menu calculatrice simple Affiche ce menu :\n1. Addition 2. Soustraction 3. Multiplication 4. Division 5. Quitter Lis le choix, puis demande deux nombres (entiers). Effectue l’opération choisie et affiche le résultat. Si division par zéro, affiche un message d’erreur.\n🧪 Exercice 4 – Menu gestion de tableau Déclare un tableau d’entiers vide de taille 5. Propose ce menu en boucle jusqu’à ce que l’utilisateur choisisse de quitter :\n1. Ajouter un nombre au tableau 2. Afficher le tableau 3. Quitter Si 1 : demande un entier et ajoute-le dans la première case libre du tableau (si possible). Si 2 : affiche le contenu du tableau. Si 3 : termine le programme. Exo_71 Niveau : 4 ⭐\nCréer un menu pour gérer un reçu avec des options pour ajouter ou retirer des items.\nExercice :\nCréez un tableau de String pour les noms des plats : [\"Crevette\", \"Salade\", \"Frite\", \"Hamburger\", \"Gâteau\"]. Créez un tableau de float pour les prix des plats correspondants : [8.99, 5.60, 6.40, 10.99, 7.99]. Implémentez un menu interactif avec les options suivantes : Ajouter un item. Retirer un item. Afficher le reçu (afficher les plats ajoutés et le total). Terminer la transaction (Afficher le reçu, écrire un message d’adieu et arrête le programme). À chaque ajout d’item, le prix du plat sera ajouté au total de la facture. À chaque retrait d’item, le prix du plat sera soustrait du total de la facture. Exemple de sortie attendue :\nMenu : 1. Ajouter un item 2. Retirer un item 3. Afficher le reçu 4. Terminer la transaction Total de la facture actuelle : 0.00$ Entrez votre choix : 1 Choisissez un item à ajouter : 1. Crevette 8.99$ 2. Salade 5.60$ 3. Frite 6.40$ 4. Hamburger 10.99$ 5. Gâteau 7.99$ Entrez le numéro de l'item : 1 Plat ajouté : Crevette Total de la facture actuelle : 8.99$ Menu : 1. Ajouter un item 2. Retirer un item 3. Afficher le reçu 4. Terminer la transaction Total de la facture actuelle : 8.99$ Entrez votre choix : 3 Reçu : Crevette 8.99$ --------------------------- Total 8.99$ Menu : 1. Ajouter un item 2. Retirer un item 3. Afficher le reçu 4. Terminer la transaction Total de la facture actuelle : 8.99$ Entrez votre choix : 4 Crevette 8.99$ --------------------------- Total 8.99$ Merci pour votre visite! Solutions",
    "description": "📥 Exercices – Entrées utilisateur en Java 🧪 Exercice 1 – Lire un prénom Demande à l’utilisateur de saisir son prénom (chaine de caractères) et affiche : Bonjour, [prénom] !\n🧪 Exercice 3 – Lire deux entiers et afficher leur somme Demande à l’utilisateur de saisir deux entiers, puis affiche la somme.\n🧪 Exercice 4 – Lire un nombre à virgule Demande à l’utilisateur de saisir un nombre à virgule (double) et affiche ce nombre arrondi à 2 décimales.",
    "tags": [],
    "title": "Série 12",
    "uri": "/420-111/exercices/serie012/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Exercices",
    "content": "📂 Exercices – Lecture de fichiers en Java 🧪 Exercice 1 – Lire un fichier texte ligne par ligne Crée un fichier texte data.txt contenant plusieurs lignes. Écris un programme qui ouvre ce fichier et affiche chaque ligne à la console.\n🧪 Exercice 2 – Compter le nombre de lignes Modifie le programme précédent pour compter et afficher le nombre total de lignes dans le fichier.\n🧪 Exercice 3 – Lire un fichier et afficher les lignes contenant un mot Demande à l’utilisateur de saisir un mot clé. Affiche uniquement les lignes du fichier qui contiennent ce mot.\n🧪 Exercice 4 – Calculer la somme des nombres dans un fichier Suppose que le fichier contient un nombre entier par ligne. Lis toutes les lignes, convertis-les en entiers et affiche la somme.\n🧪 Exercice 5 – Extraire et afficher la première colonne Suppose un fichier CSV où chaque ligne contient des valeurs séparées par des virgules. Lis le fichier et affiche uniquement la première colonne de chaque ligne.\n💾 Exercices – Écriture de fichiers en Java 🧪 Exercice 1 – Écrire une simple ligne Écris un programme qui crée un fichier output.txt et y écrit la ligne suivante : Bonjour, fichier !\n🧪 Exercice 2 – Écrire plusieurs lignes Modifie le programme pour écrire plusieurs lignes dans output.txt :\nPremière ligne Deuxième ligne Troisième ligne 🧪 Exercice 3 – Ajouter du texte sans écraser Écris un programme qui ajoute une ligne à la fin d’un fichier existant log.txt sans effacer son contenu.\n🧪 Exercice 4 – Écrire les résultats d’un tableau Déclare un tableau int[] avec les valeurs {10, 20, 30, 40}. Écris chaque valeur sur une nouvelle ligne dans un fichier valeurs.txt.\n🧪 Exercice 5 – Écrire un tableau 2D au format CSV Déclare un tableau 2D de chaînes :\nString[][] data = { {\"Alice\", \"24\", \"Paris\"}, {\"Bob\", \"30\", \"Lyon\"}, {\"Claire\", \"28\", \"Marseille\"} }; Écris ce tableau dans un fichier contacts.csv au format CSV (séparé par des virgules).\n🔄 Exercices – Lecture et écriture de fichiers en Java 🧪 Exercice 1 – Copier le contenu d’un fichier Lis un fichier source.txt ligne par ligne et écris chaque ligne dans un nouveau fichier copie.txt.\n🧪 Exercice 2 – Lire, transformer et écrire Lis un fichier noms.txt contenant une liste de noms. Pour chaque nom, convertis-le en majuscule et écris-le dans un fichier noms_maj.txt.\n🧪 Exercice 3 – Filtrer des lignes Lis un fichier data.txt ligne par ligne. Écris uniquement les lignes contenant le mot \"important\" dans un fichier filtre.txt.\n🧪 Exercice 4 – Somme des nombres et sauvegarde Lis un fichier nombres.txt contenant un entier par ligne. Calcule la somme des nombres et écris le résultat dans un fichier resultat.txt.\n🧪 Exercice 5 – Traitement CSV simple Lis un fichier contacts.csv avec des données séparées par des virgules : nom, âge, ville. Écris dans un nouveau fichier contacts_adultes.csv uniquement les lignes où l’âge est supérieur ou égal à 18.\nSolutions",
    "description": "📂 Exercices – Lecture de fichiers en Java 🧪 Exercice 1 – Lire un fichier texte ligne par ligne Crée un fichier texte data.txt contenant plusieurs lignes. Écris un programme qui ouvre ce fichier et affiche chaque ligne à la console.\n🧪 Exercice 2 – Compter le nombre de lignes Modifie le programme précédent pour compter et afficher le nombre total de lignes dans le fichier.\n🧪 Exercice 3 – Lire un fichier et afficher les lignes contenant un mot Demande à l’utilisateur de saisir un mot clé. Affiche uniquement les lignes du fichier qui contiennent ce mot.",
    "tags": [],
    "title": "Série 13",
    "uri": "/420-111/exercices/serie013/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation",
    "content": "This is a new chapter.",
    "description": "This is a new chapter.",
    "tags": [],
    "title": "Exercices",
    "uri": "/420-111/exercices/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Plans de cours 📋 Maxime Fournier : Plan de cours\n📋 Samuel Fostiné : Plan de cours\nHoraire et disponibilités des enseignants ✔️ Maxime Fournier : Lien vers mon horaire et mes disponibilités\n✔️ Samuel Fostiné : Lien vers mon horaire et mes disponibilités\nMaxime Fournier Nom de l’évaluation Pondération Date de l’évaluation Laboratoire 1 10 % Semaine 5 Laboratoire 2 10 % Semaine 11 Laboratoire 3 15 % Semaine 14 5 Quiz 3 meilleures notes 15 % Semaine 2 à 13 Examen 1 20 % Semaine 8 Examen Final 30 % ESO Samuel Fostiné Nom de l’évaluation Pondération Date de l’évaluation Devoir Scratch 5% Semaine 3 Laboratoire 1 10 % Semaine 6 Laboratoire 2 10 % Semaine 11 Laboratoire 3 15 % Semaine 14 Quiz (entre 12 quiz) 10 meilleures notes 10 % Semaine 3 à 14 Examen 1 20 % Semaine 9 Examen Final 30 % ESO",
    "description": "Plans de cours 📋 Maxime Fournier : Plan de cours\n📋 Samuel Fostiné : Plan de cours\nHoraire et disponibilités des enseignants ✔️ Maxime Fournier : Lien vers mon horaire et mes disponibilités\n✔️ Samuel Fostiné : Lien vers mon horaire et mes disponibilités\nMaxime Fournier Nom de l’évaluation Pondération Date de l’évaluation Laboratoire 1 10 % Semaine 5 Laboratoire 2 10 % Semaine 11 Laboratoire 3 15 % Semaine 14 5 Quiz 3 meilleures notes 15 % Semaine 2 à 13 Examen 1 20 % Semaine 8 Examen Final 30 % ESO Samuel Fostiné Nom de l’évaluation Pondération Date de l’évaluation Devoir Scratch 5% Semaine 3 Laboratoire 1 10 % Semaine 6 Laboratoire 2 10 % Semaine 11 Laboratoire 3 15 % Semaine 14 Quiz (entre 12 quiz) 10 meilleures notes 10 % Semaine 3 à 14 Examen 1 20 % Semaine 9 Examen Final 30 % ESO",
    "tags": [],
    "title": "Introduction à la programmation",
    "uri": "/420-111/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Tableaux",
    "content": "🧮 Les tableaux 2D en Java Un tableau 2D permet de stocker des valeurs dans un tableau de tableaux — comme un tableau à double entrée, ou matrice.\nC’est très utile pour représenter des grilles, tableaux de données, plateaux de jeu, etc.\n🏗️ Déclaration et création ✏️ Déclarer un tableau 2D int[][] matrice; 🛠️ Créer un tableau 2D matrice = new int[3][4]; // 3 lignes, 4 colonnes Ou tout en une ligne :\nint[][] matrice = new int[3][4]; 💡 Tous les éléments sont initialisés à 0 (ou à la valeur par défaut du type).\n🧊 Accès aux éléments On accède à un élément avec 2 indices : [ligne][colonne]\nmatrice[0][2] = 7; // Affecte 7 à la ligne 0, colonne 2 System.out.println(matrice[0][2]); // Affiche 7 ❌ Hors limites ? → ArrayIndexOutOfBoundsException\n🪞 Initialisation rapide On peut remplir un tableau 2D directement :\nint[][] matrice = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }; 📏 Taille d’un tableau 2D Expression Signification matrice.length Nombre de lignes matrice[0].length Nombre de colonnes (ligne 0) ⚠️ Les tableaux 2D peuvent être irréguliers (pas le même nombre de colonnes partout).\n🧪 Exemples simples int[][] grille = new int[2][3]; grille[0][0] = 1; grille[1][2] = 9; System.out.println(grille[1][2]); // 9 System.out.println(grille.length); // 2 lignes System.out.println(grille[0].length); // 3 colonnes 🔥 À retenir Un tableau 2D est un tableau de tableaux. On accède à une case avec [ligne][colonne]. .length fonctionne à chaque niveau (matrice.length, matrice[i].length). Attention aux indices hors limites et aux lignes irrégulières. 🔹 Exercice 1 : Matrice de int Crée un tableau 2D matrice de 2 lignes et 3 colonnes, et affecte les valeurs suivantes :\n1 2 3 4 5 6 Puis affiche l’élément qui contient un 5.\npublic class Exo1 { public static void main(String[] args) { // Déclaration et création // Affectation manuelle // Affichage d’un élément } } Sortie attendue Élément : 5 🔹 Exercice 2 : Grille de String Initialise directement un tableau 2D mots avec les valeurs suivantes :\n\"Bonjour\" \"le\" \"monde\" \"!\" Puis affiche le mot “monde” à l’aide de ses indices.\npublic class Exo2 { public static void main(String[] args) { // Initialisation rapide // Affichage du mot \"monde\" } } Sortie attendue Mot : monde 🔹 Exercice 3 : Tableau 2D de boolean et .length Un tableau cases indique si certaines cases d’un jeu sont accessibles (true) ou bloquées (false). Initialise le tableau suivant :\n{ {true, false, true}, {true, true, false} } Puis affiche :\nLe nombre de lignes Le nombre de colonnes de la première ligne L’état de la dernière case de la premier ligne public class Exo3 { public static void main(String[] args) { // Initialisation du tableau // Affichage des informations } } Sortie attendue Lignes : 2 Colonnes : 3 Dernière case de la première ligne accessible ? true",
    "description": "🧮 Les tableaux 2D en Java Un tableau 2D permet de stocker des valeurs dans un tableau de tableaux — comme un tableau à double entrée, ou matrice.\nC’est très utile pour représenter des grilles, tableaux de données, plateaux de jeu, etc.\n🏗️ Déclaration et création ✏️ Déclarer un tableau 2D int[][] matrice; 🛠️ Créer un tableau 2D matrice = new int[3][4]; // 3 lignes, 4 colonnes Ou tout en une ligne :",
    "tags": [],
    "title": "Tableaux 2D",
    "uri": "/420-111/8-tableaux/tableaux2d/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e String",
    "content": "🍥 Lien vers la classe String de l’API Java\n1. Méthodes Statistiques de la classe String Les méthodes statiques de la classe String ne nécessitent pas de créer une instance de String pour les utiliser. Vous les appelez directement sur la classe elle-même. Voici quelques exemples de méthodes statiques courantes :\nExemple 1 : String.format() Cette méthode statique permet de formater une chaîne de caractères en utilisant des espaces réservés (placeholders).\npublic class ExempleStringStatic { public static void main(String[] args) { String name = \"Alice\"; int age = 30; String formattedString = String.format(\"Nom : %s, Âge : %d\", name, age); System.out.println(formattedString); } } Sortie attendue :\nNom : Alice, Âge : 30 2. Méthodes Non Statiques de la classe String Les méthodes non-statiques nécessitent une instance de la classe String pour être utilisées. Vous devez créer un objet String pour appeler ces méthodes. Voici quelques exemples :\nExemple 1 : length() Cette méthode retourne la longueur (nombre de caractères) de la chaîne de caractères.\npublic class ExempleStringNonStatic { public static void main(String[] args) { String message = \"Bonjour\"; int length = message.length(); // Appel de la méthode non statique System.out.println(\"La longueur de la chaîne est : \" + length); } } Sortie attendue :\nLa longueur de la chaîne est : 7 Exemple 2 : charAt() Cette méthode retourne le caractère situé à une position spécifiée dans la chaîne.\npublic class ExempleStringNonStatic { public static void main(String[] args) { String message = \"Java\"; char character = message.charAt(2); // Récupère le caractère à l'indice 2 System.out.println(\"Le caractère à l'indice 2 est : \" + character); } } Sortie attendue :\nLe caractère à l'indice 2 est : v Exemple 3 : substring() Cette méthode retourne une sous-chaîne de la chaîne principale en fonction des indices donnés.\npublic class ExempleStringNonStatic { public static void main(String[] args) { String message = \"Bienvenue\"; String substring = message.substring(3, 7); // Extrait de l'indice 3 à 6 System.out.println(\"Sous-chaîne : \" + substring); } } Sortie attendue :\nSous-chaîne : nven Exemple 4 : toLowerCase() et toUpperCase() Ces méthodes convertissent tous les caractères de la chaîne en minuscules ou en majuscules.\npublic class ExempleStringNonStatic { public static void main(String[] args) { String message = \"Java Programming\"; String lower = message.toLowerCase(); // Convertir en minuscules String upper = message.toUpperCase(); // Convertir en majuscules System.out.println(\"En minuscules : \" + lower); System.out.println(\"En majuscules : \" + upper); } } Sortie attendue :\nEn minuscules : java programming En majuscules : JAVA PROGRAMMING Exemple 5 : contains() Cette méthode permet de vérifier si une chaîne contient une sous-chaîne spécifiée.\npublic class ExempleStringNonStatic { public static void main(String[] args) { String message = \"Java est génial!\"; boolean contains = message.contains(\"génial\"); // Vérifie si \"génial\" est dans la chaîne System.out.println(\"La chaîne contient 'génial' ? \" + contains); } } Sortie attendue :\nLa chaîne contient 'génial' ? true Résumé des différences entre les méthodes statiques et non-statiques : Méthodes statiques :\nAppelées sur la classe elle-même, pas besoin d’instance. Exemples : String.valueOf(), String.format(), String.join(). Méthodes non-statiques :\nAppelées sur une instance de la classe String. Exemples : length(), charAt(), substring(), toLowerCase().",
    "description": "🍥 Lien vers la classe String de l’API Java\n1. Méthodes Statistiques de la classe String Les méthodes statiques de la classe String ne nécessitent pas de créer une instance de String pour les utiliser. Vous les appelez directement sur la classe elle-même. Voici quelques exemples de méthodes statiques courantes :\nExemple 1 : String.format() Cette méthode statique permet de formater une chaîne de caractères en utilisant des espaces réservés (placeholders).\npublic class ExempleStringStatic { public static void main(String[] args) { String name = \"Alice\"; int age = 30; String formattedString = String.format(\"Nom : %s, Âge : %d\", name, age); System.out.println(formattedString); } } Sortie attendue :",
    "tags": [],
    "title": "Méthodes de String",
    "uri": "/420-111/4-string/methodestring/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Intro",
    "content": "🟨 Règles de base en Java 🔤 Sensibilité à la casse → Java distingue majuscules et minuscules. nom ≠ Nom ≠ NOM.\n🧱 Délimitation des blocs → Tout bloc de code (classe, méthode, boucle, condition, etc.) est entouré par accolades {}.\n🔚 Fin des instructions → Chaque ligne d’instruction se termine par un point-virgule ;.\n💬 Commentaires dans le code :\nType Syntaxe Usage Commentaire une ligne // Pour un commentaire bref Commentaire multi-ligne /* ... */ Pour expliquer un bloc de code // Ceci est un commentaire simple /* Ceci est un commentaire sur plusieurs lignes */ 🟦 Nomenclature Java ✅ Une fonction dans une classe = une méthode. Elle appartient à la classe dans laquelle elle est définie. 🟩 Conventions de nommage (cours) Élément Convention Exemple Technique utilisée Classe Majuscule initiale Animal, VoitureBleue PascalCase Méthode Minuscule initiale afficherNom() camelCase Variable Minuscule initiale nomClient, ageMoyen camelCase Constante MAJUSCULE + _ TAUX_DE_TAXE SNAKE_CASE Variable locale simple Lettre courte i, j (dans les boucles) — Les variables à une seule lettre sont permises uniquement pour un usage local (dans une boucle for, par exemple) par exemple i ou j. Toutes les autres variables doivent avoir un nom significatif. Les tableau doivent avoir un nom qui sous-entend la pluralité.\n🟧 Indentation et lisibilité ✏️ L’indentation ne change pas le comportement du code, mais elle :\nrend le code plus lisible, montre la structure logique du programme. 📌 Règles : Indentation = tabulation (ou 4 espaces selon le style). Chaque bloc ({}) augmente le niveau d’indentation. Respecter la cohérence : ne pas mélanger tabulations et espaces. Bien aligner les blocs imbriqués : boucles, conditions, classes, etc. Exemple : public class Exemple { public static void main(String[] args) { int age = 18; if (age \u003e= 18) { System.out.println(\"Majeur\"); } else { System.out.println(\"Mineur\"); } } } ✅ Résumé Élément Exemple Rappel Classe MaClasse PascalCase Méthode afficherProfil() camelCase Variable ageUtilisateur camelCase Constante TAUX_DE_TVA MAJUSCULES + _ Commentaire // ou /* ... */ pour documenter Bloc de code { ... } avec indentation Fin d’instruction ; obligatoire 🟨 Conventions d’espacement en Java Les espaces sont essentiels pour la lisibilité du code, mais doivent être utilisés de manière cohérente.\n📌 1. Autour des opérateurs ✅ Toujours mettre un espace avant et après les opérateurs :\nint total = a + b - c * 2; 🚫 Mauvais :\nint total=a+b-c*2; 📌 2. Après les virgules ✅ Un espace après chaque virgule, pas avant :\nSystem.out.println(nom, age, ville); 🚫 Mauvais :\nSystem.out.println(nom,age,ville); 📌 3. Après les mots-clés (if, for, while, etc.) ✅ Mettre un espace entre le mot-clé et la parenthèse ouvrante :\nif (age \u003e= 18) { System.out.println(\"Majeur\"); } 🚫 Mauvais :\nif(age\u003e=18){ 📌 4. Entre les parenthèses et le contenu ✅ Aucun espace juste après ( ou juste avant ) :\nSystem.out.println(nom); 🚫 Mauvais :\nSystem.out.println( nom ); 📌 5. Autour des accolades { } ✅ L’accolade ouvrante est généralement placée à la fin de la ligne de déclaration, puis le bloc est indenté :\npublic class Exemple { public static void main(String[] args) { if (x \u003e 0) { System.out.println(\"Positif\"); } } } 🚫 Mauvais :\npublic class Exemple { public static void main(String[] args) { if(x\u003e0) { System.out.println(\"Positif\"); } } } Note : Certaines équipes préfèrent les accolades sur une ligne séparée, mais l’important est d’être cohérent dans tout le projet.\n📌 6. Pas d’espace avant un point . ✅ Éviter tout espace avant ou après un point utilisé pour accéder aux membres :\nutilisateur.getNom(); 🚫 Mauvais :\nutilisateur . getNom (); ✅ Résumé des règles d’espacement Cas Bonne pratique Opérateurs a + b, x == y, etc. Après une virgule f(x, y) Mots-clés (if, for, etc.) if ( et non if( Parenthèses (x + 1) et non ( x + 1 ) Accès à un membre (.) objet.methode() Accolade ouvrante { Sur la même ligne",
    "description": "🟨 Règles de base en Java 🔤 Sensibilité à la casse → Java distingue majuscules et minuscules. nom ≠ Nom ≠ NOM.\n🧱 Délimitation des blocs → Tout bloc de code (classe, méthode, boucle, condition, etc.) est entouré par accolades {}.\n🔚 Fin des instructions → Chaque ligne d’instruction se termine par un point-virgule ;.\n💬 Commentaires dans le code :\nType Syntaxe Usage Commentaire une ligne // Pour un commentaire bref Commentaire multi-ligne /* ... */ Pour expliquer un bloc de code // Ceci est un commentaire simple /* Ceci est un commentaire sur plusieurs lignes */ 🟦 Nomenclature Java ✅ Une fonction dans une classe = une méthode. Elle appartient à la classe dans laquelle elle est définie. 🟩 Conventions de nommage (cours) Élément Convention Exemple Technique utilisée Classe Majuscule initiale Animal, VoitureBleue PascalCase Méthode Minuscule initiale afficherNom() camelCase Variable Minuscule initiale nomClient, ageMoyen camelCase Constante MAJUSCULE + _ TAUX_DE_TAXE SNAKE_CASE Variable locale simple Lettre courte i, j (dans les boucles) — Les variables à une seule lettre sont permises uniquement pour un usage local (dans une boucle for, par exemple) par exemple i ou j. Toutes les autres variables doivent avoir un nom significatif. Les tableau doivent avoir un nom qui sous-entend la pluralité.",
    "tags": [],
    "title": "Règles/conventions",
    "uri": "/420-111/1-intro/regles/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation \u003e Intro",
    "content": "🧠 Qu’est-ce qu’un commentaire ? Un commentaire est une partie du code ignorée par le compilateur Java.\nIl sert à :\nExpliquer le code aux humains (programmeurs). Documenter le fonctionnement des classes, des méthodes, etc. Faciliter la relecture et la maintenance du programme. ✍️ 1. Commentaire sur une ligne (//) 🔹 Syntaxe : // Ceci est un commentaire sur une ligne int age = 25; // Stocke l’âge ✅ Utilisation : Expliquer une ligne de code. Ajouter une remarque rapide. 🧾2. Commentaire sur plusieurs lignes (/* … */) 🔹 Syntaxe : /* Ceci est un commentaire sur plusieurs lignes. Il peut couvrir un bloc de texte. */ ✅ Utilisation : Fournir une explication plus longue. Désactiver temporairement un bloc de code. Avancé Nous verrons peut être cette théorie plus tard\n📚 3. Commentaire de documentation (/** … */) 🔹 Syntaxe :\n/** * Cette méthode affiche un message de bienvenue. * @param nom Le nom de l’utilisateur. */ public void direBonjour(String nom) { System.out.println(\"Bonjour \" + nom); } ✅ Utilisation : Générer une documentation HTML avec Javadoc. Documenter les classes, méthodes, constructeurs, etc.",
    "description": "🧠 Qu’est-ce qu’un commentaire ? Un commentaire est une partie du code ignorée par le compilateur Java.\nIl sert à :\nExpliquer le code aux humains (programmeurs). Documenter le fonctionnement des classes, des méthodes, etc. Faciliter la relecture et la maintenance du programme. ✍️ 1. Commentaire sur une ligne (//) 🔹 Syntaxe : // Ceci est un commentaire sur une ligne int age = 25; // Stocke l’âge ✅ Utilisation : Expliquer une ligne de code. Ajouter une remarque rapide. 🧾2. Commentaire sur plusieurs lignes (/* … */) 🔹 Syntaxe : /* Ceci est un commentaire sur plusieurs lignes. Il peut couvrir un bloc de texte. */ ✅ Utilisation : Fournir une explication plus longue. Désactiver temporairement un bloc de code. Avancé Nous verrons peut être cette théorie plus tard",
    "tags": [],
    "title": "Commentaires",
    "uri": "/420-111/1-intro/commentaires/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/420-111/categories/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/420-111/tags/index.html"
  }
]
