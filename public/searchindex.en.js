var relearn_searchindex = [
  {
    "breadcrumb": "Introduction √† la programmation informatique (420-111-MV)",
    "content": "This is a new chapter.",
    "description": "This is a new chapter.",
    "tags": [],
    "title": "Intro",
    "uri": "/420-111/intro/index.html"
  },
  {
    "breadcrumb": "Introduction √† la programmation informatique (420-111-MV)¬†\u003e¬†Intro",
    "content": "Introduction C‚Äôest quoi un language de programmation? Java est l‚Äôun des langages les plus populaires en 2025 selon TIOBE https://www.tiobe.com/tiobe-index/\nJava fonctionne sur plusieurs syst√®mes d‚Äôexploitation (Windows, Mac, Linux, Raspberry Pi, etc.) Java est assez facile √† apprendre, surtout pour les d√©butants, et il est agr√©able √† utiliser.\nSi vous connaissez d√©j√† un peu C++ ou C#, passer √† Java est simple, et l‚Äôinverse aussi. Il facilite donc la transition pour les d√©veloppeurs entre ces langages\nComme Java est un langage orient√© objet, il permet d‚Äô√©crire du code bien organis√© et r√©utilisable, ce qui facilite la cr√©ation de programmes.\nIl peut √™tre utilis√© pour:\ncr√©er des applications mobiles, surtout sur les t√©l√©phones Android ; d√©velopper des logiciels pour ordinateur (Windows, Mac, etc.) ; concevoir des applications web, comme les sites internet interactifs ; mettre en place des serveurs web et des serveurs d‚Äôapplications ; programmer des jeux vid√©o ; se connecter √† des bases de donn√©es pour lire ou sauvegarder des informations ; et bien d‚Äôautres choses encore ! Qu‚Äôest-ce que Java ? Java est un langage de programmation orient√© objet et ind√©pendant de la plateforme, ce qui signifie que vous pouvez √©crire du code Java sur un syst√®me d‚Äôexploitation (par exemple Windows) et l‚Äôex√©cuter sur n‚Äôimporte quel autre syst√®me (par exemple Linux, Mac) sans modification. Java suit le principe du ‚Äúwrite once, run anywhere‚Äù.\nIntroduction_√†_l‚Äôenvironnement_Java POUR LINUX wget https://www.oracle.com/java/technologies/downloads/?er=221886 sudo dpkg -i Downloads/jdk-23_linux-x64_bin.deb OU\nsudo apt update sudo apt install openjdk-11-jdk POUR WINDOWS Aller sur le site officiel de oracle\nNotepad++ Jusqu‚Äô√† nouvel ordre vous ne pourrez coder exclusivement qu‚Äôavec Notepad++ dans mon cours.\nVous pouvez changer les couleurs. Je sugg√®re DansLeRush-Dark, mais vous pouvez le personnaliser comme vous voulez.",
    "description": "Introduction C‚Äôest quoi un language de programmation? Java est l‚Äôun des langages les plus populaires en 2025 selon TIOBE https://www.tiobe.com/tiobe-index/\nJava fonctionne sur plusieurs syst√®mes d‚Äôexploitation (Windows, Mac, Linux, Raspberry Pi, etc.) Java est assez facile √† apprendre, surtout pour les d√©butants, et il est agr√©able √† utiliser.",
    "tags": [],
    "title": "Java",
    "uri": "/420-111/intro/java/index.html"
  },
  {
    "breadcrumb": "Introduction √† la programmation informatique (420-111-MV)¬†\u003e¬†Exercices",
    "content": "Exo 1 Objectif : Cr√©er un programme Java qui affiche ceci.\n‚û°Ô∏è Sortie attendu :\nNom : Alice √Çge : 23 Ville : Toulouse Instructions :\nUtilise System.out.println(). Respecte l‚Äôindentation. N‚Äôoublie pas le point-virgule ; √† chaque ligne. Exo 2 Objectif : Reproduis le m√™me affichage que l‚Äôexercice 1, mais sur une seule ligne.\n‚û°Ô∏è Exemple attendu :\nNom : Alice | √Çge : 23 | Ville : Toulouse Instructions :\nUtilise System.out.print() (sans println()). Utilise \\n si besoin. Respecte les espaces entre les mots (convention d‚Äôespacement). Exo 3 Objectif : Cr√©er un programme qui affiche les lignes suivantes :\nNom : \"Alice\" Chemin du fichier : C:\\Users\\Alice Instructions :\nUtilise System.out.println(). Utilise les caract√®res \\\" et \\\\. Exo 4 Question √©crite (pas de code) :\nDans le programme ci-dessous, rel√®ve 5 erreurs de convention de nommage ou d‚Äôespacement, puis corrige-les.\npublic class profilUtilisateur{ public static void main(String[]args){ int AgeUtilisateur=25; System.out.println( \"Age :\"+AgeUtilisateur ); } } Exo 5 R√©√©cris proprement le programme suivant avec une indentation correcte, sans modifier le code fonctionnel :\npublic class Bonjour{ public static void main(String[]args){ System.out.println(\"Bonjour\"); if(true){ System.out.println(\"Ceci est un test\"); } } } Exo 6 Objectif : Cr√©er et compiler ton fichier Java dans ton terminal (Notepad++ + commande).\nCr√©e un fichier nomm√© Bienvenue.java. √âcris un programme qui affiche : Bienvenue dans le monde de Java ! Compile avec : javac Bienvenue.java Ex√©cute avec : java Bienvenue Exo 7 Objectif : Affiche un profil format√© et align√© gr√¢ce √† System.out.printf() :\n‚û°Ô∏è Exemple attendu :\nNom complet : Julie MARTIN √Çge : 28 Ville : Lyon Instructions :\nUtilise une cha√Æne multiligne (\"\"\") Exo 8 R√©√©cris proprement le programme suivant\nimport java.util.Scanner; public class solution1_8{ /* * 0 1 2 * 3 4 5 * 6 7 8 */ public static void main(String[] args) { Scanner scan = new Scanner(System.in); char curPlayer ='y'; int nbTours = 0; char[][] grille ={ {' ', ' ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '} }; while (!checkIfCharWon(curPlayer, grille)\u0026\u0026 nbTours \u003c 9){ afficherGrille(grille); if (curPlayer == 'x') { curPlayer= 'o'; } else{ curPlayer = 'x'; } System.out.println(\"C'est au tour de : \"+curPlayer); System.out.print(\"Choisissez une case : \"); int choix = scan.nextInt(); scan.nextLine(); grille[choix/3][choix % 3] = curPlayer; nbTours++; } afficherGrille(grille); if (checkIfCharWon(curPlayer, grille)){ System.out.println(\"Le gagnant est : \" + curPlayer); } else { System.out.println(\"Draw\"); } } public static void afficherGrille(char[][] grille) { System.out.println(); for (int i= 0; i \u003c grille.length; i++) { for (int j = 0; j\u003cgrille.length; j++) { System.out.print(\" \" + grille[i][j]); if (j % 3 != 2) { System.out.print(\" |\"); } else{ System.out.print(\"\\n\"); } } if(i % 3 != 2){ System.out.println(\"-----------\"); } } System.out.println(); } public static boolean checkIfCharWon(char joueur, char[][] grille) { int somme; for (int i = 0; i \u003c grille.length; i++) { somme = 0; for (int j = 0; j \u003c grille.length; j++) { if (grille[i][j] == joueur){ somme++; } } if (somme == 3) { return true; } } for (int i = 0; i \u003c grille.length; i++) { somme = 0; for (int j = 0; j \u003c grille.length; j++) { if (grille[j][i]==joueur){ somme ++; } } if(somme == 3) { return true; } } if (grille[0][0] == joueur \u0026\u0026 grille[1][1] == joueur \u0026\u0026 grille[2][2] == joueur){ return true; } if (grille[2][0] == joueur \u0026\u0026 grille[1][1]==joueur \u0026\u0026 grille[0][2] == joueur) { return true; } return false; } } Solutions\nExo 9 √âcris un code, sans copier-coller de nulle part, qui affiche Hello World. Id√©alement, ne regarde pas les notes de cours.",
    "description": "Exo 1 Objectif : Cr√©er un programme Java qui affiche ceci.\n‚û°Ô∏è Sortie attendu :\nNom : Alice √Çge : 23 Ville : Toulouse Instructions :\nUtilise System.out.println(). Respecte l‚Äôindentation. N‚Äôoublie pas le point-virgule ; √† chaque ligne. Exo 2 Objectif : Reproduis le m√™me affichage que l‚Äôexercice 1, mais sur une seule ligne.\n‚û°Ô∏è Exemple attendu :\nNom : Alice | √Çge : 23 | Ville : Toulouse Instructions :\nUtilise System.out.print() (sans println()). Utilise \\n si besoin. Respecte les espaces entre les mots (convention d‚Äôespacement). Exo 3 Objectif : Cr√©er un programme qui affiche les lignes suivantes :",
    "tags": [],
    "title": "S√©rie 1",
    "uri": "/420-111/exercices/serie1/index.html"
  },
  {
    "breadcrumb": "Introduction √† la programmation informatique (420-111-MV)",
    "content": "This is a new chapter.",
    "description": "This is a new chapter.",
    "tags": [],
    "title": "Variables \u0026 Types",
    "uri": "/420-111/variables-types/index.html"
  },
  {
    "breadcrumb": "Introduction √† la programmation informatique (420-111-MV)¬†\u003e¬†Intro",
    "content": "‚òï Cr√©er son tout premier programme en Java Avant de plonger dans le code, il est important de savoir qu‚Äôen Java, tout le code source doit √™tre enregistr√© dans un fichier avec l‚Äôextension .java.\nEN ligne Si java n‚Äôest malheureusement pas install√© sur votre ordinateur et que vous ne pouvez pas le faire, vous pouvez tout de m√™me programmer directement sur le web ici\nüîß √âtapes : Cr√©e un nouveau fichier et nomme-le Main.java. Tape (de pr√©f√©rence manuellement) le code suivant dans ce fichier : public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } } üí° Astuce : Prends le temps de taper le code au lieu de simplement le copier-coller. Cela t‚Äôaidera √† bien comprendre chaque ligne.\nüß© Comprendre la notion de classe En Java, tout le code ex√©cutable doit √™tre contenu dans une classe.\nCe concept sera expliqu√© en d√©tail plus tard, mais retiens pour l‚Äôinstant qu‚Äôune classe est indispensable. Dans notre exemple, cela correspond √† la ligne public class Main. Par convention, le nom d‚Äôune classe commence par une majuscule (ce n‚Äôest pas obligatoire, mais recommand√©). Le nom du fichier doit √™tre identique au nom de la classe, suivi de l‚Äôextension .java. Ici, la classe s‚Äôappelle Main, donc le fichier s‚Äôappelle Main.java. Le mot-cl√© public est un modificateur d‚Äôacc√®s indiquant que cette classe est accessible depuis d‚Äôautres classes (nous y reviendrons plus tard). üèÅ La m√©thode main() La m√©thode main() est le point d‚Äôentr√©e de tout programme Java. Tout le code √† l‚Äôint√©rieur de cette m√©thode sera ex√©cut√© au lancement du programme. üîç Ne t‚Äôinqui√®te pas pour le moment des autres mots-cl√©s comme static ou void. Tu les comprendras avec le temps.\nüîÑ R√©sum√© ligne par ligne Ligne de code Explication public class Main D√©clare une classe publique appel√©e Main. public static void main(String[] args) D√©clare la m√©thode principale qui sera ex√©cut√©e au d√©marrage du programme. System.out.println(\"Hello World\"); Affiche le message \"Hello World\" dans la console. üß™ Compilation et ex√©cution d‚Äôun programme Java D‚Äôabord, tu dois t‚Äôassurer que Java est bien install√© sur ton ordinateur\nOuvre une invite de commandes (cmd) sous Windows (Terminal sous Mac/Linux). Tape la commande java -version. Cette commande devrait vous dire la version de Java qui est install√© sur votre ordinateur. Tape aussi la commande javac -version. Cette commande devrait te dire la version du compilateur de Java install√© sur ton ordinateur Note: Ces commandes fonctionnent seulement si Java et le compilateur de Java sont install√©s et que le chemin o√π le r√©pertoire de Java se trouve est mis dans le PATH des variables d‚Äôenvironnement (√Ä expliquer en classe pour que ce soit plus clair) Ex√©cution du code dans le fichier Main.java Ouvre une invite de commandes (cmd) sous Windows (Terminal sous Mac/Linux). Navigue vers le dossier o√π se trouve votre fichier Main.java Ex√©cute la commande java Main.java. Tu devrais voir le message Hello World dans l‚Äôinvite de commandes. Traditionnellement, Java fonctionne en deux √©tapes :\nCompilation : Le code source (.java) est transform√© en bytecode (.class) gr√¢ce √† la commande :\njavac Main.java Ex√©cution : Le bytecode est ensuite ex√©cut√© avec la commande :\njava Main üí° Astuce : Depuis une version relativement r√©cente de Java, il est aussi possible d‚Äôex√©cuter directement un fichier .java sans passer explicitement par l‚Äô√©tape de compilation (javac).\njava Main.java Cela permet d‚Äôex√©cuter rapidement un programme, mais √† noter :\nLe fichier .class est g√©n√©r√© temporairement. Il est ensuite supprim√© automatiquement apr√®s l‚Äôex√©cution. üìù Cette m√©thode est pratique pour tester du code rapidement, mais dans un projet structur√©, on utilise g√©n√©ralement javac suivi de java.\nüñ®Ô∏è Affichage avec System.out.print et System.out.println Dans la m√©thode main(), tu peux utiliser :\nSystem.out.println() : pour afficher une ligne de texte suivie d‚Äôun retour √† la ligne. System.out.print() : pour afficher du texte sans retour √† la ligne. ‚úèÔ∏è Pour l‚Äôinstant, retiens que tu dois utiliser System.out.println(\"ton message\"); pour afficher du texte √† l‚Äô√©cran.\nüìå D√©tail sur System.out √âl√©ment R√¥le System Classe pr√©d√©finie dans java.lang out Repr√©sente le flux de sortie standard System.out Utilis√© pour √©crire dans la console üß© Diff√©rence entre print() et println() M√©thode Effet print() Affiche le texte sur la m√™me ligne println() Affiche le texte puis passe √† la ligne suivante Exemple 1 : sans retour √† la ligne System.out.print(\"Bonjour \"); System.out.print(\"tout le monde !\"); üñ•Ô∏è R√©sultat :\nBonjour tout le monde ! Exemple 2 : avec retour √† la ligne System.out.println(\"Bonjour\"); System.out.println(\"tout le monde !\"); üñ•Ô∏è R√©sultat :\nBonjour tout le monde ! Exemple 3 : retour √† la ligne manuel System.out.print(\"Ligne 1\\nLigne 2\"); üñ•Ô∏è R√©sultat :\nLigne 1 Ligne 2 ‚úÖ En r√©sum√© : print() : n‚Äôajoute pas de retour √† la ligne. println() : ajoute un retour √† la ligne automatiquement. Ces m√©thodes sont tr√®s utilis√©es pour afficher des messages ou pour d√©boguer. Le caract√®re d‚Äô√©chappement \\ Le \\ permet d‚Äôins√©rer des caract√®res sp√©ciaux dans une cha√Æne.\nS√©quence R√©sultat Exemple R√©sultat Console \\n Saut de ligne \"Bonjour\\nSalut\" Bonjour\nSalut \\t Tabulation \"Nom\\tAge\" Nom‚ÄÉAge \\\" Guillemets doubles \"Il a dit : \\\"ok\\\"\" Il a dit : ‚Äúok‚Äù \\\\ Backslash \"C:\\\\Users\\\\Nom\" C:\\Users\\Nom \\' Apostrophe '\\' ' üñ•Ô∏è R√©sultat console attendu Nom complet : Julie MARTIN √Çge : 28 Ville : Paris System.out.printf() ‚Äì Affichage format√© Tu peux fixer la largeur de colonnes avec :\nSystem.out.printf(\"%-15s : %s\\n\", \"Nom\", \"Alice\"); System.out.printf(\"%-15s : %d\\n\", \"√Çge\", 30); üîé %‚Äì15s ‚Üí champ texte align√© √† gauche sur 15 caract√®res.\n‚úÖ √Ä retenir Commande Utilit√© principale print() Affiche sur la m√™me ligne. println() Affiche puis saute une ligne. \\ Caract√®re d‚Äô√©chappement pour mise en forme. printf() Affichage structur√© et align√©. üõ†Ô∏è Astuce pro : format avanc√© System.out.printf(\"\"\" Nom complet : %s √Çge : %s Ville : %s \"\"\", prenom.substring(0, 1).toUpperCase() + prenom.substring(1) + \" \" + nom.toUpperCase(), age, ville.substring(0, 1).toUpperCase() + ville.substring(1)); ‚úÖ Explication ligne par ligne √âl√©ment R√¥le \"\"\" (Text block) Permet un texte multiligne propre (Java 15+). %s Placeholder pour une valeur cha√Æne (String ou objet). prenom.substring(0,1).toUpperCase() Met la 1re lettre en majuscule. nom.toUpperCase() Nom enti√®rement en majuscule. ville.substring(0,1).toUpperCase() Ville avec 1re lettre en majuscule. üß† M√™me si age est un int, %s fonctionne gr√¢ce √† l‚Äôautoboxing.",
    "description": "‚òï Cr√©er son tout premier programme en Java Avant de plonger dans le code, il est important de savoir qu‚Äôen Java, tout le code source doit √™tre enregistr√© dans un fichier avec l‚Äôextension .java.\nEN ligne Si java n‚Äôest malheureusement pas install√© sur votre ordinateur et que vous ne pouvez pas le faire, vous pouvez tout de m√™me programmer directement sur le web ici",
    "tags": [],
    "title": "Affichage console",
    "uri": "/420-111/intro/affichage-console/index.html"
  },
  {
    "breadcrumb": "Introduction √† la programmation informatique (420-111-MV)¬†\u003e¬†Exercices",
    "content": "üß† Exercices ‚Äì Choisis le type le plus adapt√© Tu dois enregistrer les donn√©es suivantes dans une variable aussi petite que possible, selon leur type.\nPour chaque donn√©e, d√©clare une variable (ou une valeur fixe) en utilisant le type primitif ou String le plus petit possible.\nJustifie pour chaque d√©claration ton choix de type\nExo 1 1. La temp√©rature d‚Äôun cong√©lateur : -18 2. Une distance interplan√©taire en kilom√®tres : 150000000000L 3. Le taux de r√©ussite √† un examen : 0.987 4. Le message d‚Äôaccueil : \"Bienvenue sur le syst√®me\" 5. Une temp√©rature corporelle : 36.6 6. Le niveau d‚Äôalerte (valeur unique entre ‚ÄòA‚Äô et ‚ÄòZ‚Äô) : 'C' 7. L‚Äô√¢ge d‚Äôun arbre centenaire : 153 8. La r√©ponse √† une question (oui/non) : true 9. Le nom de la plan√®te : \"Terre\" 10. Le nombre d‚Äôenfants dans une classe : 28 Exo 2 1. Le taux de remplissage d‚Äôun r√©servoir : 0.735 2. Le code de niveau de s√©curit√© : 'B' 3. Le nombre de jours dans une semaine : 7 (valeur fixe) 4. Le nom du syst√®me solaire : \"Syst√®me solaire\" 5. La distance Terre-Lune (en km) : 384400 6. L‚Äôann√©e de construction d‚Äôun pont : 1967 7. La temp√©rature d‚Äô√©bullition de l‚Äôeau (en ¬∞C) : 100 8. La lumi√®re est-elle allum√©e ? : false 9. Le message d'erreur affich√© √† l'√©cran : \"Erreur : acc√®s refus√©\" 10. L‚Äôidentifiant d‚Äôun capteur : 120 üéØ Objectif : 1 ligne = 1 variable. Type primitif ou `String`. La plus petite taille possible. Exo 3 1. Le niveau sonore maximal autoris√© : 120 2. Le symbole de la touche entr√©e : '\\n' 3. Le r√©sultat d‚Äôun test bool√©en : true 4. Le pr√©nom du robot assistant : \"EVA\" 5. La masse d‚Äôun atome d‚Äôhydrog√®ne : 1.00784 6. Le nombre de plan√®tes dans le syst√®me solaire : 8 (valeur fixe) 7. Le code d‚Äôerreur re√ßu par un serveur : 404 8. Une temp√©rature tr√®s basse mesur√©e dans l‚Äôespace : -270 9. La distance entre deux √©toiles : 9461000000000 (en km) 10. Le slogan affich√© √† l‚Äôaccueil : \"Bonjour, humain.\" Exo 4 1. L'√¢ge d‚Äôun personnage de jeu vid√©o : 32 2. La temp√©rature id√©ale pour un serveur : 21.5 3. Le caract√®re de commande utilis√© dans le terminal : '$' 4. Le nombre d‚Äôheures dans une journ√©e : 24 (valeur fixe) 5. Le nom du fichier syst√®me : \"kernel.sys\" 6. La valeur de l'acc√©l√©ration gravitationnelle (m/s¬≤) : 9.80665 7. Le niveau de batterie d‚Äôun drone : 98 8. Est-ce que le drone est actif ? : true 9. Le message syst√®me de veille : \"Mise en veille imminente\" 10. Une distance astronomique (en km) : 149600000000 Exo 5 1. Un identifiant d‚Äôobjet unique : 256 2. Le mot de passe par d√©faut : \"admin\" 3. La pression moyenne atmosph√©rique : 1013.25 4. Le caract√®re sp√©cial de validation : '#' 5. Le nombre de bits dans un octet : 8 (valeur fixe) 6. Le message de confirmation : \"Action enregistr√©e\" 7. Est-ce que le mode nuit est activ√© ? : false 8. L‚Äôann√©e de fondation de l‚Äôentreprise : 2001 9. La temp√©rature moyenne de Mars : -63 10. La vitesse de la lumi√®re en km/s : 299792 üí° Exercices : Concat√©nation de cha√Ænes de caract√®res en Java üß™ Exo 6 ‚Äì Concat√©nation simple avec + Enregistre Alice et Durand dans 2 variables distinctes:\nUtilise les 2 variables cr√©√©s pr√©alablement pour cr√©er une troisi√®me variable nomComplet qui contient la phrase :\n\"Bonjour Alice Durand\" Affiche-la 3e variable.\nüß™ Exo 7 ‚Äì Concat√©nation avec des variables num√©riques D√©clare les variables suivantes :\nString nomProduit = \"Clavier\"; byte quantite = 5; float prixUnitaire = 24.99f; Affiche le message suivant en une seule ligne avec concat√©nation :\n\"5 Clavier √† 24.99$ l‚Äôunit√©\" üß™ Exo 8 ‚Äì Concat√©nation avec concat() Utilise .concat() pour construire la phrase suivante √† partir des morceaux :\nString a = \"Java \"; String b = \"est\"; String c = \"super.\"; R√©sultat attendu : \"Java est super.\"\nNe pas utiliser +\nüß™ Exo 9 ‚Äì Concat√©nation multi-lignes √Ä partir des √©l√©ments suivants que vous devez enregistrer dans des variables distinctes:\n\"Martin\"; //prenom 29; //age \"Lyon\"; //nom Construit et affiche la phrase suivante (avec retours √† la ligne \\n) :\nNom : Martin √Çge : 29 Ville : Lyon",
    "description": "üß† Exercices ‚Äì Choisis le type le plus adapt√© Tu dois enregistrer les donn√©es suivantes dans une variable aussi petite que possible, selon leur type.\nPour chaque donn√©e, d√©clare une variable (ou une valeur fixe) en utilisant le type primitif ou String le plus petit possible.\nJustifie pour chaque d√©claration ton choix de type\nExo 1 1. La temp√©rature d‚Äôun cong√©lateur : -18 2. Une distance interplan√©taire en kilom√®tres : 150000000000L 3. Le taux de r√©ussite √† un examen : 0.987 4. Le message d‚Äôaccueil : \"Bienvenue sur le syst√®me\" 5. Une temp√©rature corporelle : 36.6 6. Le niveau d‚Äôalerte (valeur unique entre ‚ÄòA‚Äô et ‚ÄòZ‚Äô) : 'C' 7. L‚Äô√¢ge d‚Äôun arbre centenaire : 153 8. La r√©ponse √† une question (oui/non) : true 9. Le nom de la plan√®te : \"Terre\" 10. Le nombre d‚Äôenfants dans une classe : 28 Exo 2 1. Le taux de remplissage d‚Äôun r√©servoir : 0.735 2. Le code de niveau de s√©curit√© : 'B' 3. Le nombre de jours dans une semaine : 7 (valeur fixe) 4. Le nom du syst√®me solaire : \"Syst√®me solaire\" 5. La distance Terre-Lune (en km) : 384400 6. L‚Äôann√©e de construction d‚Äôun pont : 1967 7. La temp√©rature d‚Äô√©bullition de l‚Äôeau (en ¬∞C) : 100 8. La lumi√®re est-elle allum√©e ? : false 9. Le message d'erreur affich√© √† l'√©cran : \"Erreur : acc√®s refus√©\" 10. L‚Äôidentifiant d‚Äôun capteur : 120 üéØ Objectif : 1 ligne = 1 variable. Type primitif ou `String`. La plus petite taille possible. Exo 3 1. Le niveau sonore maximal autoris√© : 120 2. Le symbole de la touche entr√©e : '\\n' 3. Le r√©sultat d‚Äôun test bool√©en : true 4. Le pr√©nom du robot assistant : \"EVA\" 5. La masse d‚Äôun atome d‚Äôhydrog√®ne : 1.00784 6. Le nombre de plan√®tes dans le syst√®me solaire : 8 (valeur fixe) 7. Le code d‚Äôerreur re√ßu par un serveur : 404 8. Une temp√©rature tr√®s basse mesur√©e dans l‚Äôespace : -270 9. La distance entre deux √©toiles : 9461000000000 (en km) 10. Le slogan affich√© √† l‚Äôaccueil : \"Bonjour, humain.\" Exo 4 1. L'√¢ge d‚Äôun personnage de jeu vid√©o : 32 2. La temp√©rature id√©ale pour un serveur : 21.5 3. Le caract√®re de commande utilis√© dans le terminal : '$' 4. Le nombre d‚Äôheures dans une journ√©e : 24 (valeur fixe) 5. Le nom du fichier syst√®me : \"kernel.sys\" 6. La valeur de l'acc√©l√©ration gravitationnelle (m/s¬≤) : 9.80665 7. Le niveau de batterie d‚Äôun drone : 98 8. Est-ce que le drone est actif ? : true 9. Le message syst√®me de veille : \"Mise en veille imminente\" 10. Une distance astronomique (en km) : 149600000000 Exo 5 1. Un identifiant d‚Äôobjet unique : 256 2. Le mot de passe par d√©faut : \"admin\" 3. La pression moyenne atmosph√©rique : 1013.25 4. Le caract√®re sp√©cial de validation : '#' 5. Le nombre de bits dans un octet : 8 (valeur fixe) 6. Le message de confirmation : \"Action enregistr√©e\" 7. Est-ce que le mode nuit est activ√© ? : false 8. L‚Äôann√©e de fondation de l‚Äôentreprise : 2001 9. La temp√©rature moyenne de Mars : -63 10. La vitesse de la lumi√®re en km/s : 299792 üí° Exercices : Concat√©nation de cha√Ænes de caract√®res en Java üß™ Exo 6 ‚Äì Concat√©nation simple avec + Enregistre Alice et Durand dans 2 variables distinctes:",
    "tags": [],
    "title": "S√©rie 2",
    "uri": "/420-111/exercices/serie2/index.html"
  },
  {
    "breadcrumb": "Introduction √† la programmation informatique (420-111-MV)",
    "content": "This is a new chapter.",
    "description": "This is a new chapter.",
    "tags": [],
    "title": "Exercices",
    "uri": "/420-111/exercices/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Plans de cours üìã Maxime Fournier : Plan de cours\nHoraire et disponibilit√©s des enseignants ‚úîÔ∏è Maxime Fournier : Lien vers mon horaire et mes disponibilit√©s\nMaxime Fournier | Samuel Fostin√© Nom de l‚Äô√©valuation Pond√©ration Date de l‚Äô√©valuation Laboratoire 1 10 % Semaine 5 Laboratoire 2 10 % Semaine 11 Laboratoire 3 15 % Semaine 14 5 Quiz 3 meilleures notes 15 % Semaine 2 √† 13 Examen 1 20 % Semaine 8 Examen Final 30 % ESO",
    "description": "Plans de cours üìã Maxime Fournier : Plan de cours\nHoraire et disponibilit√©s des enseignants ‚úîÔ∏è Maxime Fournier : Lien vers mon horaire et mes disponibilit√©s\nMaxime Fournier | Samuel Fostin√© Nom de l‚Äô√©valuation Pond√©ration Date de l‚Äô√©valuation Laboratoire 1 10 % Semaine 5 Laboratoire 2 10 % Semaine 11 Laboratoire 3 15 % Semaine 14 5 Quiz 3 meilleures notes 15 % Semaine 2 √† 13 Examen 1 20 % Semaine 8 Examen Final 30 % ESO",
    "tags": [],
    "title": "Introduction √† la programmation informatique (420-111-MV)",
    "uri": "/420-111/index.html"
  },
  {
    "breadcrumb": "Introduction √† la programmation informatique (420-111-MV)¬†\u003e¬†Variables \u0026 Types¬†\u003e¬†String",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Methodes De String",
    "uri": "/420-111/variables-types/string/methodes-de-string/index.html"
  },
  {
    "breadcrumb": "Introduction √† la programmation informatique (420-111-MV)¬†\u003e¬†Variables \u0026 Types",
    "content": "",
    "description": "",
    "tags": [],
    "title": "String",
    "uri": "/420-111/variables-types/string/index.html"
  },
  {
    "breadcrumb": "Introduction √† la programmation informatique (420-111-MV)¬†\u003e¬†Variables \u0026 Types",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Types Primitifs",
    "uri": "/420-111/variables-types/types-primitifs/index.html"
  },
  {
    "breadcrumb": "Introduction √† la programmation informatique (420-111-MV)¬†\u003e¬†Variables \u0026 Types¬†\u003e¬†Variables",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Locale Instance Classe",
    "uri": "/420-111/variables-types/variables/locale-instance-classe/index.html"
  },
  {
    "breadcrumb": "Introduction √† la programmation informatique (420-111-MV)¬†\u003e¬†Variables \u0026 Types¬†\u003e¬†Variables",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Constantes",
    "uri": "/420-111/variables-types/variables/constantes/index.html"
  },
  {
    "breadcrumb": "Introduction √† la programmation informatique (420-111-MV)¬†\u003e¬†Variables \u0026 Types",
    "content": "Une variable, c‚Äôest comme une bo√Æte dans laquelle on range une valeur. Elle a toujours trois √©l√©ments essentiels :\nüëâ type nom = valeur;\nPar exemple :\nint var1 = 42; Ici :\nüßæ int ‚Üí le type de la variable (entier) üè∑Ô∏è var1 ‚Üí le nom de la variable üéÅ 42 ‚Üí la valeur qu‚Äôelle contient üì¢ Afficher une variable Tu peux afficher une variable comme tu afficherais n‚Äôimporte quelle valeur :\nint var1 = 42; System.out.println(var1); // affiche 42 üõ†Ô∏è D√©claration \u0026 Initialisation Quand on √©crit int var1 = 42;, on fait deux choses :\n‚úÖ D√©claration (on dit que var1 existe et qu‚Äôelle est de type int) ‚úÖ Initialisation (on lui donne la valeur 42) -\u003e L‚Äôinitialisation c‚Äôest la premi√®re attribution d‚Äôune valeur √† une variable. C‚Äôest ce qui rend une variable d√©clar√©e utilisable. Mais on peut aussi d√©clarer d‚Äôabord, et initialiser plus tard :\n//D√©claration int var1; //initialisation var1 = 3; System.out.println(var1); // affiche 3 ‚ö†Ô∏è Attention √† l‚Äôutilisation avant l‚Äôinitialisation Si tu d√©clares une variable mais que tu essaies de l‚Äôutiliser sans lui avoir donn√© de valeur, Java ne sera pas content :\nint var1; System.out.println(var1); üî¥ R√©sultat :\nerror: variable var1 might not have been initialized System.out.println(var1); ^ 1 error Java exige que chaque variable soit initialis√©e avant son utilisation. Sinon, il refusera de compiler le programme.\nüéØ Exercice 1 üîß Consigne :\nD√©clare trois variables enti√®res :\nage taille anneeNaissance Initialise-les avec 16, 170 et 2008 respectivement.\nAffiche chaque variable avec System.out.println.\nüìù Exemple attendu √† l‚Äô√©cran :\n16 170 2008 R√©ponse int age = 16; int taille = 170; int anneeNaissance = 2008; System.out.println(age); System.out.println(taille); System.out.println(anneeNaissance);",
    "description": "Une variable, c‚Äôest comme une bo√Æte dans laquelle on range une valeur. Elle a toujours trois √©l√©ments essentiels :\nüëâ type nom = valeur;\nPar exemple :\nint var1 = 42; Ici :\nüßæ int ‚Üí le type de la variable (entier) üè∑Ô∏è var1 ‚Üí le nom de la variable üéÅ 42 ‚Üí la valeur qu‚Äôelle contient üì¢ Afficher une variable Tu peux afficher une variable comme tu afficherais n‚Äôimporte quelle valeur :",
    "tags": [],
    "title": "Variables",
    "uri": "/420-111/variables-types/variables/index.html"
  },
  {
    "breadcrumb": "Introduction √† la programmation informatique (420-111-MV)¬†\u003e¬†Intro",
    "content": "üü® R√®gles de base en Java üî§ Sensibilit√© √† la casse ‚Üí Java distingue majuscules et minuscules. nom ‚â† Nom ‚â† NOM.\nüß± D√©limitation des blocs ‚Üí Tout bloc de code (classe, m√©thode, boucle, condition, etc.) est entour√© par accolades {}.\nüîö Fin des instructions ‚Üí Chaque ligne d‚Äôinstruction se termine par un point-virgule ;.\nüí¨ Commentaires dans le code :\nType Syntaxe Usage Commentaire une ligne // Pour un commentaire bref Commentaire multi-ligne /* ... */ Pour expliquer un bloc de code // Ceci est un commentaire simple /* Ceci est un commentaire sur plusieurs lignes */ üü¶ Nomenclature Java ‚úÖ Une fonction dans une classe = une m√©thode. Elle appartient √† la classe dans laquelle elle est d√©finie. üü© Conventions de nommage (cours) √âl√©ment Convention Exemple Technique utilis√©e Classe Majuscule initiale Animal, VoitureBleue PascalCase M√©thode Minuscule initiale afficherNom() camelCase Variable Minuscule initiale nomClient, ageMoyen camelCase Constante MAJUSCULE + _ TAUX_DE_TAXE SNAKE_CASE Variable locale simple Lettre courte i, j (dans les boucles) ‚Äî Les variables √† une seule lettre sont permises uniquement pour un usage local (dans une boucle for, par exemple) par exemple i ou j. Toutes les autres variables doivent avoir un nom significatif. Les tableau doivent avoir un nom qui sous-entend la pluralit√©.\nüüß Indentation et lisibilit√© ‚úèÔ∏è L‚Äôindentation ne change pas le comportement du code, mais elle :\nrend le code plus lisible, montre la structure logique du programme. üìå R√®gles : Indentation = tabulation (ou 4 espaces selon le style). Chaque bloc ({}) augmente le niveau d‚Äôindentation. Respecter la coh√©rence : ne pas m√©langer tabulations et espaces. Bien aligner les blocs imbriqu√©s : boucles, conditions, classes, etc. Exemple : public class Exemple { public static void main(String[] args) { int age = 18; if (age \u003e= 18) { System.out.println(\"Majeur\"); } else { System.out.println(\"Mineur\"); } } } ‚úÖ R√©sum√© √âl√©ment Exemple Rappel Classe MaClasse PascalCase M√©thode afficherProfil() camelCase Variable ageUtilisateur camelCase Constante TAUX_DE_TVA MAJUSCULES + _ Commentaire // ou /* ... */ pour documenter Bloc de code { ... } avec indentation Fin d‚Äôinstruction ; obligatoire üü® Conventions d‚Äôespacement en Java Les espaces sont essentiels pour la lisibilit√© du code, mais doivent √™tre utilis√©s de mani√®re coh√©rente.\nüìå 1. Autour des op√©rateurs ‚úÖ Toujours mettre un espace avant et apr√®s les op√©rateurs :\nint total = a + b - c * 2; üö´ Mauvais :\nint total=a+b-c*2; üìå 2. Apr√®s les virgules ‚úÖ Un espace apr√®s chaque virgule, pas avant :\nSystem.out.println(nom, age, ville); üö´ Mauvais :\nSystem.out.println(nom,age,ville); üìå 3. Apr√®s les mots-cl√©s (if, for, while, etc.) ‚úÖ Mettre un espace entre le mot-cl√© et la parenth√®se ouvrante :\nif (age \u003e= 18) { System.out.println(\"Majeur\"); } üö´ Mauvais :\nif(age\u003e=18){ üìå 4. Entre les parenth√®ses et le contenu ‚úÖ Aucun espace juste apr√®s ( ou juste avant ) :\nSystem.out.println(nom); üö´ Mauvais :\nSystem.out.println( nom ); üìå 5. Autour des accolades { } ‚úÖ L‚Äôaccolade ouvrante est g√©n√©ralement plac√©e √† la fin de la ligne de d√©claration, puis le bloc est indent√© :\npublic class Exemple { public static void main(String[] args) { if (x \u003e 0) { System.out.println(\"Positif\"); } } } üö´ Mauvais :\npublic class Exemple { public static void main(String[] args) { if(x\u003e0) { System.out.println(\"Positif\"); } } } Note : Certaines √©quipes pr√©f√®rent les accolades sur une ligne s√©par√©e, mais l‚Äôimportant est d‚Äô√™tre coh√©rent dans tout le projet.\nüìå 6. Pas d‚Äôespace avant un point . ‚úÖ √âviter tout espace avant ou apr√®s un point utilis√© pour acc√©der aux membres :\nutilisateur.getNom(); üö´ Mauvais :\nutilisateur . getNom (); ‚úÖ R√©sum√© des r√®gles d‚Äôespacement Cas Bonne pratique Op√©rateurs a + b, x == y, etc. Apr√®s une virgule f(x, y) Mots-cl√©s (if, for, etc.) if ( et non if( Parenth√®ses (x + 1) et non ( x + 1 ) Acc√®s √† un membre (.) objet.methode() Accolade ouvrante { Sur la m√™me ligne",
    "description": "üü® R√®gles de base en Java üî§ Sensibilit√© √† la casse ‚Üí Java distingue majuscules et minuscules. nom ‚â† Nom ‚â† NOM.\nüß± D√©limitation des blocs ‚Üí Tout bloc de code (classe, m√©thode, boucle, condition, etc.) est entour√© par accolades {}.\nüîö Fin des instructions ‚Üí Chaque ligne d‚Äôinstruction se termine par un point-virgule ;.\nüí¨ Commentaires dans le code :\nType Syntaxe Usage Commentaire une ligne // Pour un commentaire bref Commentaire multi-ligne /* ... */ Pour expliquer un bloc de code // Ceci est un commentaire simple /* Ceci est un commentaire sur plusieurs lignes */ üü¶ Nomenclature Java ‚úÖ Une fonction dans une classe = une m√©thode. Elle appartient √† la classe dans laquelle elle est d√©finie. üü© Conventions de nommage (cours) √âl√©ment Convention Exemple Technique utilis√©e Classe Majuscule initiale Animal, VoitureBleue PascalCase M√©thode Minuscule initiale afficherNom() camelCase Variable Minuscule initiale nomClient, ageMoyen camelCase Constante MAJUSCULE + _ TAUX_DE_TAXE SNAKE_CASE Variable locale simple Lettre courte i, j (dans les boucles) ‚Äî Les variables √† une seule lettre sont permises uniquement pour un usage local (dans une boucle for, par exemple) par exemple i ou j. Toutes les autres variables doivent avoir un nom significatif. Les tableau doivent avoir un nom qui sous-entend la pluralit√©.",
    "tags": [],
    "title": "R√®gles/conventions",
    "uri": "/420-111/intro/regles/index.html"
  },
  {
    "breadcrumb": "Introduction √† la programmation informatique (420-111-MV)¬†\u003e¬†Intro",
    "content": "üß† Qu‚Äôest-ce qu‚Äôun commentaire ? Un commentaire est une partie du code ignor√©e par le compilateur Java.\nIl sert √† :\nExpliquer le code aux humains (programmeurs). Documenter le fonctionnement des classes, des m√©thodes, etc. Faciliter la relecture et la maintenance du programme. ‚úçÔ∏è 1. Commentaire sur une ligne (//) üîπ Syntaxe : // Ceci est un commentaire sur une ligne int age = 25; // Stocke l‚Äô√¢ge ‚úÖ Utilisation : Expliquer une ligne de code. Ajouter une remarque rapide. üßæ2. Commentaire sur plusieurs lignes (/* ‚Ä¶ */) üîπ Syntaxe : /* Ceci est un commentaire sur plusieurs lignes. Il peut couvrir un bloc de texte. */ ‚úÖ Utilisation : Fournir une explication plus longue. D√©sactiver temporairement un bloc de code. Avanc√© Nous verrons peut √™tre cette th√©orie plus tard\nüìö 3. Commentaire de documentation (/** ‚Ä¶ */) üîπ Syntaxe :\n/** * Cette m√©thode affiche un message de bienvenue. * @param nom Le nom de l‚Äôutilisateur. */ public void direBonjour(String nom) { System.out.println(\"Bonjour \" + nom); } ‚úÖ Utilisation : G√©n√©rer une documentation HTML avec Javadoc. Documenter les classes, m√©thodes, constructeurs, etc.",
    "description": "üß† Qu‚Äôest-ce qu‚Äôun commentaire ? Un commentaire est une partie du code ignor√©e par le compilateur Java.\nIl sert √† :\nExpliquer le code aux humains (programmeurs). Documenter le fonctionnement des classes, des m√©thodes, etc. Faciliter la relecture et la maintenance du programme. ‚úçÔ∏è 1. Commentaire sur une ligne (//) üîπ Syntaxe : // Ceci est un commentaire sur une ligne int age = 25; // Stocke l‚Äô√¢ge ‚úÖ Utilisation : Expliquer une ligne de code. Ajouter une remarque rapide. üßæ2. Commentaire sur plusieurs lignes (/* ‚Ä¶ */) üîπ Syntaxe : /* Ceci est un commentaire sur plusieurs lignes. Il peut couvrir un bloc de texte. */ ‚úÖ Utilisation : Fournir une explication plus longue. D√©sactiver temporairement un bloc de code. Avanc√© Nous verrons peut √™tre cette th√©orie plus tard",
    "tags": [],
    "title": "Commentaires",
    "uri": "/420-111/intro/commentaires/index.html"
  },
  {
    "breadcrumb": "Introduction √† la programmation informatique (420-111-MV)",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/420-111/categories/index.html"
  },
  {
    "breadcrumb": "Introduction √† la programmation informatique (420-111-MV)",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/420-111/tags/index.html"
  }
]
