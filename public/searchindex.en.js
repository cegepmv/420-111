var relearn_searchindex = [
  {
    "breadcrumb": "Introduction à la programmation informatique (420-111-MV) \u003e Variables \u0026 Types \u003e Variables",
    "content": "En Java, une constante est une variable dont la valeur ne peut plus être modifiée après son initialisation.\nElles sont utilisées pour représenter des valeurs fixes (comme un taux de taxe, un seuil, une unité de mesure, etc.) qui ne doivent pas changer pendant l’exécution du programme.\n✅ Comment déclarer une constante ? Pour déclarer une constante, on utilise le mot-clé final. Cela indique que la valeur ne pourra être assignée qu’une seule fois.\npublic class ExempleConstantes { public static void main(String[] args) { // Déclaration d'une constante locale final double TAUX_TPS = 0.20; System.out.println(TAUX_TPS); // Affiche : 0.20 } } 📝 Remarque : Par convention, on écrit les noms de constantes en majuscules, avec des underscores _ pour séparer les mots.\n❓ Pourquoi utiliser des constantes ? Utiliser des constantes a plusieurs avantages :\n💡 Cela rend le code plus clair : on comprend que la valeur ne changera pas. ✅ Cela évite les erreurs involontaires en empêchant toute modification de la valeur. 📚 C’est aussi une bonne pratique pour centraliser et réutiliser des valeurs fixes. ⚠️ Que se passe-t-il si on essaie de modifier une constante ? Le compilateur Java lève une erreur si on tente de modifier une constante après son initialisation :\npublic class ExempleConstantes { public static void main(String[] args) { final double TAUX_TPS = 0.20; // ❌ Erreur de compilation : impossible de modifier une constante TAUX_TPS = 0.30; System.out.println(TAUX_TPS); } } 🎯 Exercice 1 🔧 Consigne :\nDéclare une constante nommée PI de type double avec la valeur 3.1416. Affiche la valeur de cette constante avec System.out.println. Ensuite, essaie de modifier la valeur de PI en 3.14 pour voir ce que Java affiche. 📝 Exemple attendu à l’écran si on ne modifie pas la constante :\n3.1416 🔍 Tu devrais aussi voir une erreur de compilation si tu essaies de modifier la constante.\nRéponse public class ExempleConstante { public static void main(String[] args) { final double PI = 3.1416; System.out.println(PI); // PI = 3.14; // ❌ Erreur : impossible de modifier une constante } }",
    "description": "En Java, une constante est une variable dont la valeur ne peut plus être modifiée après son initialisation.\nElles sont utilisées pour représenter des valeurs fixes (comme un taux de taxe, un seuil, une unité de mesure, etc.) qui ne doivent pas changer pendant l’exécution du programme.\n✅ Comment déclarer une constante ? Pour déclarer une constante, on utilise le mot-clé final. Cela indique que la valeur ne pourra être assignée qu’une seule fois.",
    "tags": [],
    "title": "Constantes",
    "uri": "/420-111/variables-types/variables/constantes/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation informatique (420-111-MV) \u003e Variables \u0026 Types",
    "content": "Une variable, c’est comme une boîte dans laquelle on range une valeur. Elle a toujours trois éléments essentiels :\n👉 type nom = valeur;\nPar exemple :\nint var1 = 42; Ici :\n🧾 int → le type de la variable (entier) 🏷️ var1 → le nom de la variable 🎁 42 → la valeur qu’elle contient 📢 Afficher une variable Tu peux afficher une variable comme tu afficherais n’importe quelle valeur :\nint var1 = 42; System.out.println(var1); // affiche 42 🛠️ Déclaration \u0026 Initialisation Quand on écrit int var1 = 42;, on fait deux choses :\n✅ Déclaration (on dit que var1 existe et qu’elle est de type int) ✅ Initialisation (on lui donne la valeur 42) -\u003e L’initialisation c’est la première attribution d’une valeur à une variable. C’est ce qui rend une variable déclarée utilisable. Mais on peut aussi déclarer d’abord, et initialiser plus tard :\n//Déclaration int var1; //initialisation var1 = 3; System.out.println(var1); // affiche 3 ⚠️ Attention à l’utilisation avant l’initialisation Si tu déclares une variable mais que tu essaies de l’utiliser sans lui avoir donné de valeur, Java ne sera pas content :\nint var1; System.out.println(var1); 🔴 Résultat :\nerror: variable var1 might not have been initialized System.out.println(var1); ^ 1 error Java exige que chaque variable soit initialisée avant son utilisation. Sinon, il refusera de compiler le programme.\n🎯 Exercice 1 🔧 Consigne :\nDéclare trois variables entières :\nage taille anneeNaissance Initialise-les avec 16, 170 et 2008 respectivement.\nAffiche chaque variable avec System.out.println.\n📝 Exemple attendu à l’écran :\n16 170 2008 Réponse int age = 16; int taille = 170; int anneeNaissance = 2008; System.out.println(age); System.out.println(taille); System.out.println(anneeNaissance);",
    "description": "Une variable, c’est comme une boîte dans laquelle on range une valeur. Elle a toujours trois éléments essentiels :\n👉 type nom = valeur;\nPar exemple :\nint var1 = 42; Ici :\n🧾 int → le type de la variable (entier) 🏷️ var1 → le nom de la variable 🎁 42 → la valeur qu’elle contient 📢 Afficher une variable Tu peux afficher une variable comme tu afficherais n’importe quelle valeur :",
    "tags": [],
    "title": "Variables",
    "uri": "/420-111/variables-types/variables/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation informatique (420-111-MV)",
    "content": "This is a new chapter.",
    "description": "This is a new chapter.",
    "tags": [],
    "title": "Intro",
    "uri": "/420-111/intro/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation informatique (420-111-MV) \u003e Intro",
    "content": "Introduction C’est quoi un language de programmation? Java est l’un des langages les plus populaires en 2025 selon TIOBE https://www.tiobe.com/tiobe-index/\nJava fonctionne sur plusieurs systèmes d’exploitation (Windows, Mac, Linux, Raspberry Pi, etc.) Java est assez facile à apprendre, surtout pour les débutants, et il est agréable à utiliser.\nSi vous connaissez déjà un peu C++ ou C#, passer à Java est simple, et l’inverse aussi. Il facilite donc la transition pour les développeurs entre ces langages\nComme Java est un langage orienté objet, il permet d’écrire du code bien organisé et réutilisable, ce qui facilite la création de programmes.\nIl peut être utilisé pour:\ncréer des applications mobiles, surtout sur les téléphones Android ; développer des logiciels pour ordinateur (Windows, Mac, etc.) ; concevoir des applications web, comme les sites internet interactifs ; mettre en place des serveurs web et des serveurs d’applications ; programmer des jeux vidéo ; se connecter à des bases de données pour lire ou sauvegarder des informations ; et bien d’autres choses encore ! Qu’est-ce que Java ? Java est un langage de programmation orienté objet et indépendant de la plateforme, ce qui signifie que vous pouvez écrire du code Java sur un système d’exploitation (par exemple Windows) et l’exécuter sur n’importe quel autre système (par exemple Linux, Mac) sans modification. Java suit le principe du “write once, run anywhere”.\nIntroduction_à_l’environnement_Java POUR LINUX wget https://www.oracle.com/java/technologies/downloads/?er=221886 sudo dpkg -i Downloads/jdk-23_linux-x64_bin.deb OU\nsudo apt update sudo apt install openjdk-11-jdk POUR WINDOWS Aller sur le site officiel de oracle\nNotepad++ Jusqu’à nouvel ordre vous ne pourrez coder exclusivement qu’avec Notepad++ dans mon cours.\nVous pouvez changer les couleurs. Je suggère DansLeRush-Dark, mais vous pouvez le personnaliser comme vous voulez.",
    "description": "Introduction C’est quoi un language de programmation? Java est l’un des langages les plus populaires en 2025 selon TIOBE https://www.tiobe.com/tiobe-index/\nJava fonctionne sur plusieurs systèmes d’exploitation (Windows, Mac, Linux, Raspberry Pi, etc.) Java est assez facile à apprendre, surtout pour les débutants, et il est agréable à utiliser.",
    "tags": [],
    "title": "Java",
    "uri": "/420-111/intro/java/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation informatique (420-111-MV) \u003e Exercices",
    "content": "Exo 1 Objectif : Créer un programme Java qui affiche ceci.\n➡️ Sortie attendu :\nNom : Alice Âge : 23 Ville : Toulouse Instructions :\nUtilise System.out.println(). Respecte l’indentation. N’oublie pas le point-virgule ; à chaque ligne. Exo 2 Objectif : Reproduis le même affichage que l’exercice 1, mais sur une seule ligne.\n➡️ Exemple attendu :\nNom : Alice | Âge : 23 | Ville : Toulouse Instructions :\nUtilise System.out.print() (sans println()). Utilise \\n si besoin. Respecte les espaces entre les mots (convention d’espacement). Exo 3 Objectif : Créer un programme qui affiche les lignes suivantes :\nNom : \"Alice\" Chemin du fichier : C:\\Users\\Alice Instructions :\nUtilise System.out.println(). Utilise les caractères \\\" et \\\\. Exo 4 Question écrite (pas de code) :\nDans le programme ci-dessous, relève 5 erreurs de convention de nommage ou d’espacement, puis corrige-les.\npublic class profilUtilisateur{ public static void main(String[]args){ int AgeUtilisateur=25; System.out.println( \"Age :\"+AgeUtilisateur ); } } Exo 5 Réécris proprement le programme suivant avec une indentation correcte, sans modifier le code fonctionnel :\npublic class Bonjour{ public static void main(String[]args){ System.out.println(\"Bonjour\"); if(true){ System.out.println(\"Ceci est un test\"); } } } Exo 6 Objectif : Créer et compiler ton fichier Java dans ton terminal (Notepad++ + commande).\nCrée un fichier nommé Bienvenue.java. Écris un programme qui affiche : Bienvenue dans le monde de Java ! Compile avec : javac Bienvenue.java Exécute avec : java Bienvenue Exo 7 Objectif : Affiche un profil formaté et aligné grâce à System.out.printf() :\n➡️ Exemple attendu :\nNom complet : Julie MARTIN Âge : 28 Ville : Lyon Instructions :\nUtilise une chaîne multiligne (\"\"\") Exo 8 Réécris proprement le programme suivant\nimport java.util.Scanner; public class solution1_8{ /* * 0 1 2 * 3 4 5 * 6 7 8 */ public static void main(String[] args) { Scanner scan = new Scanner(System.in); char curPlayer ='y'; int nbTours = 0; char[][] grille ={ {' ', ' ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '} }; while (!checkIfCharWon(curPlayer, grille)\u0026\u0026 nbTours \u003c 9){ afficherGrille(grille); if (curPlayer == 'x') { curPlayer= 'o'; } else{ curPlayer = 'x'; } System.out.println(\"C'est au tour de : \"+curPlayer); System.out.print(\"Choisissez une case : \"); int choix = scan.nextInt(); scan.nextLine(); grille[choix/3][choix % 3] = curPlayer; nbTours++; } afficherGrille(grille); if (checkIfCharWon(curPlayer, grille)){ System.out.println(\"Le gagnant est : \" + curPlayer); } else { System.out.println(\"Draw\"); } } public static void afficherGrille(char[][] grille) { System.out.println(); for (int i= 0; i \u003c grille.length; i++) { for (int j = 0; j\u003cgrille.length; j++) { System.out.print(\" \" + grille[i][j]); if (j % 3 != 2) { System.out.print(\" |\"); } else{ System.out.print(\"\\n\"); } } if(i % 3 != 2){ System.out.println(\"-----------\"); } } System.out.println(); } public static boolean checkIfCharWon(char joueur, char[][] grille) { int somme; for (int i = 0; i \u003c grille.length; i++) { somme = 0; for (int j = 0; j \u003c grille.length; j++) { if (grille[i][j] == joueur){ somme++; } } if (somme == 3) { return true; } } for (int i = 0; i \u003c grille.length; i++) { somme = 0; for (int j = 0; j \u003c grille.length; j++) { if (grille[j][i]==joueur){ somme ++; } } if(somme == 3) { return true; } } if (grille[0][0] == joueur \u0026\u0026 grille[1][1] == joueur \u0026\u0026 grille[2][2] == joueur){ return true; } if (grille[2][0] == joueur \u0026\u0026 grille[1][1]==joueur \u0026\u0026 grille[0][2] == joueur) { return true; } return false; } } Solutions\nExo 9 Écris un code, sans copier-coller de nulle part, qui affiche Hello World. Idéalement, ne regarde pas les notes de cours.",
    "description": "Exo 1 Objectif : Créer un programme Java qui affiche ceci.\n➡️ Sortie attendu :\nNom : Alice Âge : 23 Ville : Toulouse Instructions :\nUtilise System.out.println(). Respecte l’indentation. N’oublie pas le point-virgule ; à chaque ligne. Exo 2 Objectif : Reproduis le même affichage que l’exercice 1, mais sur une seule ligne.\n➡️ Exemple attendu :\nNom : Alice | Âge : 23 | Ville : Toulouse Instructions :\nUtilise System.out.print() (sans println()). Utilise \\n si besoin. Respecte les espaces entre les mots (convention d’espacement). Exo 3 Objectif : Créer un programme qui affiche les lignes suivantes :",
    "tags": [],
    "title": "Série 1",
    "uri": "/420-111/exercices/serie1/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation informatique (420-111-MV) \u003e Variables \u0026 Types \u003e Variables",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Locale/Instance/Classe",
    "uri": "/420-111/variables-types/variables/locale-instance-classe/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation informatique (420-111-MV)",
    "content": "This is a new chapter.",
    "description": "This is a new chapter.",
    "tags": [],
    "title": "Variables \u0026 Types",
    "uri": "/420-111/variables-types/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation informatique (420-111-MV) \u003e Variables \u0026 Types",
    "content": "En Java, les types de données sont divisés en deux grandes familles :\n🧱 Les types primitifs (8 types) 🧩 Les types références (classes comme String, Scanner, etc.) Les types primitifs sont les briques de base de tout programme Java. Ils permettent de représenter les informations simples : nombres, caractères, booléens.\n🎁 Pourquoi différents types de “boîtes” ? En Java (et dans la plupart des langages), il existe plusieurs types de variables — ou “boîtes” — pour deux raisons principales :\n🧬 1. L’encodage est différent selon le contenu Un nombre entier (int, long, etc.) et un nombre à virgule (float, double) sont encodés différemment en mémoire.\nPar exemple, un int ne peut pas stocker de virgule, car son encodage ne prévoit que des nombres entiers. Un float ou un double, eux, utilisent un encodage spécial (norme IEEE 754) pour stocker les parties entière et décimale. 👉 Tu ne peux donc pas mettre un nombre à virgule dans une boîte faite pour des entiers — ça reviendrait à mettre de la soupe dans une boîte avec des trous : ça ne marche pas 😄.\n📦 2. La taille de la boîte varie selon les besoins Chaque type occupe une taille différente en mémoire (1, 2, 4 ou 8 octets). C’est important car :\nPlus la boîte est grosse, plus elle prend de place 🏋️‍♂️ Plus elle est petite, plus tu peux en stocker dans la mémoire 🪶 💡 Un exemple simple Imaginons que tu disposes de 128 bits de mémoire.\nVoici quelques façons de les remplir :\nCombinaison Total utilisé 2 long (2 × 64 bits) 128 bits 1 long (64) + 2 int (2 × 32) 128 bits 3 int (3 × 32) + 1 short (16) + 16 boolean (16 × 1) 128 bits Tu choisis donc le type selon :\n🧠 Ce que tu veux représenter 💾 Et l’espace mémoire que tu veux ou peux utiliser Nombres entiers :\nbyte, short, int, long Nombres à virgule flottante (Des approximations des Réels ou chiffres à virgules) :\nfloat, double Caractères :\nchar (représente un caractère Unicode sur 16 bits) Booléens :\nboolean (valeurs true ou false) 🧮 1. Les nombres entiers Ils servent à stocker des valeurs sans virgule, positives ou négatives. Chaque type utilise un certain nombre d’octets et a une plage de valeurs définie :\nType Taille (bits / octets) Valeur minimale Valeur maximale Exemple byte 8 bits (1 octet) -128 127 byte b = 10; short 16 bits (2 octets) -32 768 32 767 short s = 1000; int 32 bits (4 octets) -2 147 483 648 2 147 483 647 int i = 42; long 64 bits (8 octets) -9 223 372 036 854 775 808 9 223 372 036 854 775 807 long l = 100L; 🧠 Il existe des constantes utiles comme Integer.MAX_VALUE ou Long.MIN_VALUE pour obtenir ces limites sans les retenir.\n➕ Exemples de codage (positifs) : Décimal Binaire (16 bits) Hexadécimal 1 00000000 00000001 0001 2 00000000 00000010 0002 127 00000000 01111111 007F 255 00000000 11111111 00FF 🌊 2. Les nombres à virgule (flottants) Ils permettent de représenter des valeurs décimales (≈ des réels), avec une approximation en base 2.\nType Taille (bits / octets) Précision Valeur min / max Exemple float 32 bits (4 octets) ~7 chiffres significatifs ±1.4×10⁻⁴⁵ → ±3.4×10³⁸ float f = 3.14f; double 64 bits (8 octets) ~15-16 chiffres significatifs ±4.9×10⁻³²⁴ → ±1.8×10³⁰⁸ double d = 2.718; 💡 En Java, les littéraux décimaux sont des double par défaut. Pour un float, on ajoute un f à la fin.\n🔤 3. Le caractère Le type char représente un seul caractère Unicode (lettre, symbole, emoji, etc.) :\nType Taille (bits) Plage Unicode Exemple char 16 bits 0 à 65 535 (U+0000 à U+FFFF) char c = 'A'; 🎨 Les caractères sont entourés de quotes simples ('A') et peuvent contenir aussi des caractères spéciaux ou emojis :\nchar emoji = '💡'; char lettre = 'f'; 🔘 4. Le booléen Un boolean est un type logique qui représente vrai ou faux, souvent utilisé dans les conditions :\nType Valeurs possibles Exemple boolean true ou false boolean actif = false; 💬 Très utile pour représenter des états binaires : activé/désactivé, visible/caché, connecté/non connecté…\nchar estPret = true; char estFini = false; ✨ Récap visuel Catégorie Types Rôle principal 🧮 Entiers byte, short, int, long Stocker des nombres sans virgule 🌊 Flottants float, double Représenter des valeurs décimales 🔤 Caractères char Représenter un caractère Unicode 🔘 Booléens boolean Représenter une valeur vraie ou fausse 🎯 Exercice 1 🔧 Consigne :\nCréer et afficher les variables avec le meilleur type possible\nVariable contenant l’âge d’une personne (moins de 123)\nPopulation du cégep Marie-Victorin (Environ 7 500)\nVariable comptant la population au Qc (Environ 9 millions)\nVariable pour calculer le revenu d’un individu normal\nNombre de gouttes d’eau dans une piscine (environ 960 000 000 gouttes).\nUne variable qui se rappelle si le prof était bon ou pas (true?)\nNote en lettre qu’un étudiant obtient au cours (A)\n📝 Exemple attendu à l’écran :\n32 7512 8905430 45000.25 960540388 true A Réponse byte age = 12; short populationMV = 7512; int populationQC = 8_905_430; float revenu = 45000.25; int nbGoutteEau = 960_540_388 //Un argument pourrait être fait pour utiliser un long en suggérant que la piscine pourrait possiblement être beaucoup plus grande et un long pourrait être plus sécuritaire. boolean leProfEstBon = true; char noteEleve = 'A'; 🎯 Exercice 2 🔧 Consigne :\nCréer et afficher les variables avec le meilleur type possible\nÂge d’un chat domestique (environ 8 ans)\nNombre d’étudiants dans une petite école secondaire (environ 420)\nNombre d’habitants à Montréal (environ 1.7 million)\nSalaire annuel d’un développeur junior (~52 000.75 $)\nNombre de grains de sable dans un seau (~25 000 000)\nUne variable indiquant si une lumière est allumée (false)\nLa lettre de la section d’un cours (par exemple B)\n📝 Exemple attendu à l’écran :\n8 420 1700000 52000.75 25000000 false B Réponse byte ageChat = 8; short nbElevesEcole = 420; int populationMontreal = 1_700_000; float salaireAnnuel = 52000.75f; int nbGrainsSable = 25_000_000; boolean lumiereAllumee = false; char sectionCours = 'B'; 🎯 Exercice 3 🔧 Consigne :\nCréer et afficher les variables avec le meilleur type primitif possible, dans l’ordre ci-dessous :\nUne lettre qui représente une réponse à un quiz (par exemple C) Est-ce que l’alarme est activée (true) ? Le nombre d’habitants dans un petit village (environ 1 200) Âge d’un enfant (environ 5 ans) Le revenu annuel d’un dentiste (~98 500.95 $) Le nombre d’étoiles visibles à l’œil nu (~6 000) Estimation du nombre de cellules dans un corps humain (environ 37 000 000 000 000) 📝 Exemple attendu à l’écran :\nC true 1200 5 98500.95 6000 37000000000000 Réponse char reponseQuiz = 'C'; boolean alarmeActivee = true; short populationVillage = 1200; byte ageEnfant = 5; float revenuDentiste = 98500.95f; short nbEtoilesVisibles = 6000; long nbCellulesHumain = 37_000_000_000_000L;",
    "description": "En Java, les types de données sont divisés en deux grandes familles :\n🧱 Les types primitifs (8 types) 🧩 Les types références (classes comme String, Scanner, etc.) Les types primitifs sont les briques de base de tout programme Java. Ils permettent de représenter les informations simples : nombres, caractères, booléens.\n🎁 Pourquoi différents types de “boîtes” ? En Java (et dans la plupart des langages), il existe plusieurs types de variables — ou “boîtes” — pour deux raisons principales :",
    "tags": [],
    "title": "Types Primitifs",
    "uri": "/420-111/variables-types/types-primitifs/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation informatique (420-111-MV) \u003e Intro",
    "content": "☕ Créer son tout premier programme en Java Avant de plonger dans le code, il est important de savoir qu’en Java, tout le code source doit être enregistré dans un fichier avec l’extension .java.\nEN ligne Si java n’est malheureusement pas installé sur votre ordinateur et que vous ne pouvez pas le faire, vous pouvez tout de même programmer directement sur le web ici\n🔧 Étapes : Crée un nouveau fichier et nomme-le Main.java. Tape (de préférence manuellement) le code suivant dans ce fichier : public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } } 💡 Astuce : Prends le temps de taper le code au lieu de simplement le copier-coller. Cela t’aidera à bien comprendre chaque ligne.\n🧩 Comprendre la notion de classe En Java, tout le code exécutable doit être contenu dans une classe.\nCe concept sera expliqué en détail plus tard, mais retiens pour l’instant qu’une classe est indispensable. Dans notre exemple, cela correspond à la ligne public class Main. Par convention, le nom d’une classe commence par une majuscule (ce n’est pas obligatoire, mais recommandé). Le nom du fichier doit être identique au nom de la classe, suivi de l’extension .java. Ici, la classe s’appelle Main, donc le fichier s’appelle Main.java. Le mot-clé public est un modificateur d’accès indiquant que cette classe est accessible depuis d’autres classes (nous y reviendrons plus tard). 🏁 La méthode main() La méthode main() est le point d’entrée de tout programme Java. Tout le code à l’intérieur de cette méthode sera exécuté au lancement du programme. 🔍 Ne t’inquiète pas pour le moment des autres mots-clés comme static ou void. Tu les comprendras avec le temps.\n🔄 Résumé ligne par ligne Ligne de code Explication public class Main Déclare une classe publique appelée Main. public static void main(String[] args) Déclare la méthode principale qui sera exécutée au démarrage du programme. System.out.println(\"Hello World\"); Affiche le message \"Hello World\" dans la console. 🧪 Compilation et exécution d’un programme Java D’abord, tu dois t’assurer que Java est bien installé sur ton ordinateur\nOuvre une invite de commandes (cmd) sous Windows (Terminal sous Mac/Linux). Tape la commande java -version. Cette commande devrait vous dire la version de Java qui est installé sur votre ordinateur. Tape aussi la commande javac -version. Cette commande devrait te dire la version du compilateur de Java installé sur ton ordinateur Note: Ces commandes fonctionnent seulement si Java et le compilateur de Java sont installés et que le chemin où le répertoire de Java se trouve est mis dans le PATH des variables d’environnement (À expliquer en classe pour que ce soit plus clair) Exécution du code dans le fichier Main.java Ouvre une invite de commandes (cmd) sous Windows (Terminal sous Mac/Linux). Navigue vers le dossier où se trouve votre fichier Main.java Exécute la commande java Main.java. Tu devrais voir le message Hello World dans l’invite de commandes. Traditionnellement, Java fonctionne en deux étapes :\nCompilation : Le code source (.java) est transformé en bytecode (.class) grâce à la commande :\njavac Main.java Exécution : Le bytecode est ensuite exécuté avec la commande :\njava Main 💡 Astuce : Depuis une version relativement récente de Java, il est aussi possible d’exécuter directement un fichier .java sans passer explicitement par l’étape de compilation (javac).\njava Main.java Cela permet d’exécuter rapidement un programme, mais à noter :\nLe fichier .class est généré temporairement. Il est ensuite supprimé automatiquement après l’exécution. 📝 Cette méthode est pratique pour tester du code rapidement, mais dans un projet structuré, on utilise généralement javac suivi de java.\n🖨️ Affichage avec System.out.print et System.out.println Dans la méthode main(), tu peux utiliser :\nSystem.out.println() : pour afficher une ligne de texte suivie d’un retour à la ligne. System.out.print() : pour afficher du texte sans retour à la ligne. ✏️ Pour l’instant, retiens que tu dois utiliser System.out.println(\"ton message\"); pour afficher du texte à l’écran.\n📌 Détail sur System.out Élément Rôle System Classe prédéfinie dans java.lang out Représente le flux de sortie standard System.out Utilisé pour écrire dans la console 🧩 Différence entre print() et println() Méthode Effet print() Affiche le texte sur la même ligne println() Affiche le texte puis passe à la ligne suivante Exemple 1 : sans retour à la ligne System.out.print(\"Bonjour \"); System.out.print(\"tout le monde !\"); 🖥️ Résultat :\nBonjour tout le monde ! Exemple 2 : avec retour à la ligne System.out.println(\"Bonjour\"); System.out.println(\"tout le monde !\"); 🖥️ Résultat :\nBonjour tout le monde ! Exemple 3 : retour à la ligne manuel System.out.print(\"Ligne 1\\nLigne 2\"); 🖥️ Résultat :\nLigne 1 Ligne 2 ✅ En résumé : print() : n’ajoute pas de retour à la ligne. println() : ajoute un retour à la ligne automatiquement. Ces méthodes sont très utilisées pour afficher des messages ou pour déboguer. Le caractère d’échappement \\ Le \\ permet d’insérer des caractères spéciaux dans une chaîne.\nSéquence Résultat Exemple Résultat Console \\n Saut de ligne \"Bonjour\\nSalut\" Bonjour\nSalut \\t Tabulation \"Nom\\tAge\" Nom Age \\\" Guillemets doubles \"Il a dit : \\\"ok\\\"\" Il a dit : “ok” \\\\ Backslash \"C:\\\\Users\\\\Nom\" C:\\Users\\Nom \\' Apostrophe '\\' ' 🖥️ Résultat console attendu Nom complet : Julie MARTIN Âge : 28 Ville : Paris System.out.printf() – Affichage formaté Tu peux fixer la largeur de colonnes avec :\nSystem.out.printf(\"%-15s : %s\\n\", \"Nom\", \"Alice\"); System.out.printf(\"%-15s : %d\\n\", \"Âge\", 30); 🔎 %–15s → champ texte aligné à gauche sur 15 caractères.\n✅ À retenir Commande Utilité principale print() Affiche sur la même ligne. println() Affiche puis saute une ligne. \\ Caractère d’échappement pour mise en forme. printf() Affichage structuré et aligné. 🛠️ Astuce pro : format avancé System.out.printf(\"\"\" Nom complet : %s Âge : %s Ville : %s \"\"\", prenom.substring(0, 1).toUpperCase() + prenom.substring(1) + \" \" + nom.toUpperCase(), age, ville.substring(0, 1).toUpperCase() + ville.substring(1)); ✅ Explication ligne par ligne Élément Rôle \"\"\" (Text block) Permet un texte multiligne propre (Java 15+). %s Placeholder pour une valeur chaîne (String ou objet). prenom.substring(0,1).toUpperCase() Met la 1re lettre en majuscule. nom.toUpperCase() Nom entièrement en majuscule. ville.substring(0,1).toUpperCase() Ville avec 1re lettre en majuscule. 🧠 Même si age est un int, %s fonctionne grâce à l’autoboxing.",
    "description": "☕ Créer son tout premier programme en Java Avant de plonger dans le code, il est important de savoir qu’en Java, tout le code source doit être enregistré dans un fichier avec l’extension .java.\nEN ligne Si java n’est malheureusement pas installé sur votre ordinateur et que vous ne pouvez pas le faire, vous pouvez tout de même programmer directement sur le web ici",
    "tags": [],
    "title": "Affichage console",
    "uri": "/420-111/intro/affichage-console/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation informatique (420-111-MV) \u003e Exercices",
    "content": "🧠 Exercices – Choisis le type le plus adapté Tu dois enregistrer les données suivantes dans une variable aussi petite que possible, selon leur type.\nPour chaque donnée, déclare une variable (ou une valeur fixe) en utilisant le type primitif le plus petit possible ou String.\nExo 1 1. La température d’un congélateur : -18 2. Une distance interplanétaire en kilomètres : 150000000000L 3. Le taux de réussite à un examen : 0.987 4. Le message d’accueil : \"Bienvenue sur le système\" 5. Une température corporelle : 36.6 6. Le niveau d’alerte (valeur unique entre ‘A’ et ‘Z’) : 'C' 7. L’âge d’un arbre centenaire : 153 8. La réponse à une question (oui/non) : true 9. Le nom de la planète : \"Terre\" 10. Le nombre d’enfants dans une classe : 28 Exo 2 1. Le taux de remplissage d’un réservoir : 0.735 2. Le code de niveau de sécurité : 'B' 3. Le nombre de jours dans une semaine : 7 (valeur fixe) 4. Le nom du système solaire : \"Système solaire\" 5. La distance Terre-Lune (en km) : 384400 6. L’année de construction d’un pont : 1967 7. La température d’ébullition de l’eau (en °C) : 100 8. La lumière est-elle allumée ? : false 9. Le message d'erreur affiché à l'écran : \"Erreur : accès refusé\" 10. L’identifiant d’un capteur : 120 🎯 Objectif : 1 ligne = 1 variable. Type primitif ou `String`. La plus petite taille possible. Exo 3 1. Le niveau sonore maximal autorisé : 120 2. Le symbole de la touche entrée : '\\n' 3. Le résultat d’un test booléen : true 4. Le prénom du robot assistant : \"EVA\" 5. La masse d’un atome d’hydrogène : 1.00784 6. Le nombre de planètes dans le système solaire : 8 (valeur fixe) 7. Le code d’erreur reçu par un serveur : 404 8. Une température très basse mesurée dans l’espace : -270 9. La distance entre deux étoiles : 9461000000000 (en km) 10. Le slogan affiché à l’accueil : \"Bonjour, humain.\" Exo 4 1. L'âge d’un personnage de jeu vidéo : 32 2. La température idéale pour un serveur : 21.5 3. Le caractère de commande utilisé dans le terminal : '$' 4. Le nombre d’heures dans une journée : 24 (valeur fixe) 5. Le nom du fichier système : \"kernel.sys\" 6. La valeur de l'accélération gravitationnelle (m/s²) : 9.80665 7. Le niveau de batterie d’un drone : 98 8. Est-ce que le drone est actif ? : true 9. Le message système de veille : \"Mise en veille imminente\" 10. Une distance astronomique (en km) : 149600000000 Exo 5 1. Un identifiant d’objet unique : 256 2. Le mot de passe par défaut : \"admin\" 3. La pression moyenne atmosphérique : 1013.25 4. Le caractère spécial de validation : '#' 5. Le nombre de bits dans un octet : 8 (valeur fixe) 6. Le message de confirmation : \"Action enregistrée\" 7. Est-ce que le mode nuit est activé ? : false 8. L’année de fondation de l’entreprise : 2001 9. La température moyenne de Mars : -63 10. La vitesse de la lumière en km/s : 299792 💡 Exercices : Concaténation de chaînes de caractères en Java 🧪 Exo 6 – Concaténation simple avec + Enregistre Alice et Durand dans 2 variables distinctes:\nUtilise les 2 variables créés préalablement pour créer une troisième variable nomComplet qui contient la phrase :\n\"Bonjour Alice Durand\" Affiche-la 3e variable.\n🧪 Exo 7 – Concaténation avec des variables numériques Déclare les variables suivantes :\nString nomProduit = \"Clavier\"; byte quantite = 5; float prixUnitaire = 24.99f; Affiche le message suivant en une seule ligne avec concaténation :\n\"5 Clavier à 24.99$ l’unité\" 🧪 Exo 8 – Concaténation avec concat() Utilise .concat() pour construire la phrase suivante à partir des morceaux :\nString a = \"Java \"; String b = \"est\"; String c = \"super.\"; Résultat attendu : \"Java est super.\"\nNe pas utiliser +\n🧪 Exo 9 – Concaténation multi-lignes À partir des éléments suivants que vous devez enregistrer dans des variables distinctes:\n\"Martin\"; //prenom 29; //age \"Lyon\"; //nom Construit et affiche la phrase suivante (avec retours à la ligne \\n) :\nNom : Martin Âge : 29 Ville : Lyon",
    "description": "🧠 Exercices – Choisis le type le plus adapté Tu dois enregistrer les données suivantes dans une variable aussi petite que possible, selon leur type.\nPour chaque donnée, déclare une variable (ou une valeur fixe) en utilisant le type primitif le plus petit possible ou String.\nExo 1 1. La température d’un congélateur : -18 2. Une distance interplanétaire en kilomètres : 150000000000L 3. Le taux de réussite à un examen : 0.987 4. Le message d’accueil : \"Bienvenue sur le système\" 5. Une température corporelle : 36.6 6. Le niveau d’alerte (valeur unique entre ‘A’ et ‘Z’) : 'C' 7. L’âge d’un arbre centenaire : 153 8. La réponse à une question (oui/non) : true 9. Le nom de la planète : \"Terre\" 10. Le nombre d’enfants dans une classe : 28 Exo 2 1. Le taux de remplissage d’un réservoir : 0.735 2. Le code de niveau de sécurité : 'B' 3. Le nombre de jours dans une semaine : 7 (valeur fixe) 4. Le nom du système solaire : \"Système solaire\" 5. La distance Terre-Lune (en km) : 384400 6. L’année de construction d’un pont : 1967 7. La température d’ébullition de l’eau (en °C) : 100 8. La lumière est-elle allumée ? : false 9. Le message d'erreur affiché à l'écran : \"Erreur : accès refusé\" 10. L’identifiant d’un capteur : 120 🎯 Objectif : 1 ligne = 1 variable. Type primitif ou `String`. La plus petite taille possible. Exo 3 1. Le niveau sonore maximal autorisé : 120 2. Le symbole de la touche entrée : '\\n' 3. Le résultat d’un test booléen : true 4. Le prénom du robot assistant : \"EVA\" 5. La masse d’un atome d’hydrogène : 1.00784 6. Le nombre de planètes dans le système solaire : 8 (valeur fixe) 7. Le code d’erreur reçu par un serveur : 404 8. Une température très basse mesurée dans l’espace : -270 9. La distance entre deux étoiles : 9461000000000 (en km) 10. Le slogan affiché à l’accueil : \"Bonjour, humain.\" Exo 4 1. L'âge d’un personnage de jeu vidéo : 32 2. La température idéale pour un serveur : 21.5 3. Le caractère de commande utilisé dans le terminal : '$' 4. Le nombre d’heures dans une journée : 24 (valeur fixe) 5. Le nom du fichier système : \"kernel.sys\" 6. La valeur de l'accélération gravitationnelle (m/s²) : 9.80665 7. Le niveau de batterie d’un drone : 98 8. Est-ce que le drone est actif ? : true 9. Le message système de veille : \"Mise en veille imminente\" 10. Une distance astronomique (en km) : 149600000000 Exo 5 1. Un identifiant d’objet unique : 256 2. Le mot de passe par défaut : \"admin\" 3. La pression moyenne atmosphérique : 1013.25 4. Le caractère spécial de validation : '#' 5. Le nombre de bits dans un octet : 8 (valeur fixe) 6. Le message de confirmation : \"Action enregistrée\" 7. Est-ce que le mode nuit est activé ? : false 8. L’année de fondation de l’entreprise : 2001 9. La température moyenne de Mars : -63 10. La vitesse de la lumière en km/s : 299792 💡 Exercices : Concaténation de chaînes de caractères en Java 🧪 Exo 6 – Concaténation simple avec + Enregistre Alice et Durand dans 2 variables distinctes:",
    "tags": [],
    "title": "Série 2",
    "uri": "/420-111/exercices/serie2/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation informatique (420-111-MV)",
    "content": "This is a new chapter.",
    "description": "This is a new chapter.",
    "tags": [],
    "title": "Exercices",
    "uri": "/420-111/exercices/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Plans de cours 📋 Maxime Fournier : Plan de cours\nHoraire et disponibilités des enseignants ✔️ Maxime Fournier : Lien vers mon horaire et mes disponibilités\nMaxime Fournier Nom de l’évaluation Pondération Date de l’évaluation Laboratoire 1 10 % Semaine 5 Laboratoire 2 10 % Semaine 11 Laboratoire 3 15 % Semaine 14 5 Quiz 3 meilleures notes 15 % Semaine 2 à 13 Examen 1 20 % Semaine 8 Examen Final 30 % ESO",
    "description": "Plans de cours 📋 Maxime Fournier : Plan de cours\nHoraire et disponibilités des enseignants ✔️ Maxime Fournier : Lien vers mon horaire et mes disponibilités\nMaxime Fournier Nom de l’évaluation Pondération Date de l’évaluation Laboratoire 1 10 % Semaine 5 Laboratoire 2 10 % Semaine 11 Laboratoire 3 15 % Semaine 14 5 Quiz 3 meilleures notes 15 % Semaine 2 à 13 Examen 1 20 % Semaine 8 Examen Final 30 % ESO",
    "tags": [],
    "title": "Introduction à la programmation informatique (420-111-MV)",
    "uri": "/420-111/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation informatique (420-111-MV) \u003e Variables \u0026 Types \u003e String",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Methodes De String",
    "uri": "/420-111/variables-types/string/methodes-de-string/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation informatique (420-111-MV) \u003e Variables \u0026 Types",
    "content": "",
    "description": "",
    "tags": [],
    "title": "String",
    "uri": "/420-111/variables-types/string/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation informatique (420-111-MV) \u003e Intro",
    "content": "🟨 Règles de base en Java 🔤 Sensibilité à la casse → Java distingue majuscules et minuscules. nom ≠ Nom ≠ NOM.\n🧱 Délimitation des blocs → Tout bloc de code (classe, méthode, boucle, condition, etc.) est entouré par accolades {}.\n🔚 Fin des instructions → Chaque ligne d’instruction se termine par un point-virgule ;.\n💬 Commentaires dans le code :\nType Syntaxe Usage Commentaire une ligne // Pour un commentaire bref Commentaire multi-ligne /* ... */ Pour expliquer un bloc de code // Ceci est un commentaire simple /* Ceci est un commentaire sur plusieurs lignes */ 🟦 Nomenclature Java ✅ Une fonction dans une classe = une méthode. Elle appartient à la classe dans laquelle elle est définie. 🟩 Conventions de nommage (cours) Élément Convention Exemple Technique utilisée Classe Majuscule initiale Animal, VoitureBleue PascalCase Méthode Minuscule initiale afficherNom() camelCase Variable Minuscule initiale nomClient, ageMoyen camelCase Constante MAJUSCULE + _ TAUX_DE_TAXE SNAKE_CASE Variable locale simple Lettre courte i, j (dans les boucles) — Les variables à une seule lettre sont permises uniquement pour un usage local (dans une boucle for, par exemple) par exemple i ou j. Toutes les autres variables doivent avoir un nom significatif. Les tableau doivent avoir un nom qui sous-entend la pluralité.\n🟧 Indentation et lisibilité ✏️ L’indentation ne change pas le comportement du code, mais elle :\nrend le code plus lisible, montre la structure logique du programme. 📌 Règles : Indentation = tabulation (ou 4 espaces selon le style). Chaque bloc ({}) augmente le niveau d’indentation. Respecter la cohérence : ne pas mélanger tabulations et espaces. Bien aligner les blocs imbriqués : boucles, conditions, classes, etc. Exemple : public class Exemple { public static void main(String[] args) { int age = 18; if (age \u003e= 18) { System.out.println(\"Majeur\"); } else { System.out.println(\"Mineur\"); } } } ✅ Résumé Élément Exemple Rappel Classe MaClasse PascalCase Méthode afficherProfil() camelCase Variable ageUtilisateur camelCase Constante TAUX_DE_TVA MAJUSCULES + _ Commentaire // ou /* ... */ pour documenter Bloc de code { ... } avec indentation Fin d’instruction ; obligatoire 🟨 Conventions d’espacement en Java Les espaces sont essentiels pour la lisibilité du code, mais doivent être utilisés de manière cohérente.\n📌 1. Autour des opérateurs ✅ Toujours mettre un espace avant et après les opérateurs :\nint total = a + b - c * 2; 🚫 Mauvais :\nint total=a+b-c*2; 📌 2. Après les virgules ✅ Un espace après chaque virgule, pas avant :\nSystem.out.println(nom, age, ville); 🚫 Mauvais :\nSystem.out.println(nom,age,ville); 📌 3. Après les mots-clés (if, for, while, etc.) ✅ Mettre un espace entre le mot-clé et la parenthèse ouvrante :\nif (age \u003e= 18) { System.out.println(\"Majeur\"); } 🚫 Mauvais :\nif(age\u003e=18){ 📌 4. Entre les parenthèses et le contenu ✅ Aucun espace juste après ( ou juste avant ) :\nSystem.out.println(nom); 🚫 Mauvais :\nSystem.out.println( nom ); 📌 5. Autour des accolades { } ✅ L’accolade ouvrante est généralement placée à la fin de la ligne de déclaration, puis le bloc est indenté :\npublic class Exemple { public static void main(String[] args) { if (x \u003e 0) { System.out.println(\"Positif\"); } } } 🚫 Mauvais :\npublic class Exemple { public static void main(String[] args) { if(x\u003e0) { System.out.println(\"Positif\"); } } } Note : Certaines équipes préfèrent les accolades sur une ligne séparée, mais l’important est d’être cohérent dans tout le projet.\n📌 6. Pas d’espace avant un point . ✅ Éviter tout espace avant ou après un point utilisé pour accéder aux membres :\nutilisateur.getNom(); 🚫 Mauvais :\nutilisateur . getNom (); ✅ Résumé des règles d’espacement Cas Bonne pratique Opérateurs a + b, x == y, etc. Après une virgule f(x, y) Mots-clés (if, for, etc.) if ( et non if( Parenthèses (x + 1) et non ( x + 1 ) Accès à un membre (.) objet.methode() Accolade ouvrante { Sur la même ligne",
    "description": "🟨 Règles de base en Java 🔤 Sensibilité à la casse → Java distingue majuscules et minuscules. nom ≠ Nom ≠ NOM.\n🧱 Délimitation des blocs → Tout bloc de code (classe, méthode, boucle, condition, etc.) est entouré par accolades {}.\n🔚 Fin des instructions → Chaque ligne d’instruction se termine par un point-virgule ;.\n💬 Commentaires dans le code :\nType Syntaxe Usage Commentaire une ligne // Pour un commentaire bref Commentaire multi-ligne /* ... */ Pour expliquer un bloc de code // Ceci est un commentaire simple /* Ceci est un commentaire sur plusieurs lignes */ 🟦 Nomenclature Java ✅ Une fonction dans une classe = une méthode. Elle appartient à la classe dans laquelle elle est définie. 🟩 Conventions de nommage (cours) Élément Convention Exemple Technique utilisée Classe Majuscule initiale Animal, VoitureBleue PascalCase Méthode Minuscule initiale afficherNom() camelCase Variable Minuscule initiale nomClient, ageMoyen camelCase Constante MAJUSCULE + _ TAUX_DE_TAXE SNAKE_CASE Variable locale simple Lettre courte i, j (dans les boucles) — Les variables à une seule lettre sont permises uniquement pour un usage local (dans une boucle for, par exemple) par exemple i ou j. Toutes les autres variables doivent avoir un nom significatif. Les tableau doivent avoir un nom qui sous-entend la pluralité.",
    "tags": [],
    "title": "Règles/conventions",
    "uri": "/420-111/intro/regles/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation informatique (420-111-MV) \u003e Intro",
    "content": "🧠 Qu’est-ce qu’un commentaire ? Un commentaire est une partie du code ignorée par le compilateur Java.\nIl sert à :\nExpliquer le code aux humains (programmeurs). Documenter le fonctionnement des classes, des méthodes, etc. Faciliter la relecture et la maintenance du programme. ✍️ 1. Commentaire sur une ligne (//) 🔹 Syntaxe : // Ceci est un commentaire sur une ligne int age = 25; // Stocke l’âge ✅ Utilisation : Expliquer une ligne de code. Ajouter une remarque rapide. 🧾2. Commentaire sur plusieurs lignes (/* … */) 🔹 Syntaxe : /* Ceci est un commentaire sur plusieurs lignes. Il peut couvrir un bloc de texte. */ ✅ Utilisation : Fournir une explication plus longue. Désactiver temporairement un bloc de code. Avancé Nous verrons peut être cette théorie plus tard\n📚 3. Commentaire de documentation (/** … */) 🔹 Syntaxe :\n/** * Cette méthode affiche un message de bienvenue. * @param nom Le nom de l’utilisateur. */ public void direBonjour(String nom) { System.out.println(\"Bonjour \" + nom); } ✅ Utilisation : Générer une documentation HTML avec Javadoc. Documenter les classes, méthodes, constructeurs, etc.",
    "description": "🧠 Qu’est-ce qu’un commentaire ? Un commentaire est une partie du code ignorée par le compilateur Java.\nIl sert à :\nExpliquer le code aux humains (programmeurs). Documenter le fonctionnement des classes, des méthodes, etc. Faciliter la relecture et la maintenance du programme. ✍️ 1. Commentaire sur une ligne (//) 🔹 Syntaxe : // Ceci est un commentaire sur une ligne int age = 25; // Stocke l’âge ✅ Utilisation : Expliquer une ligne de code. Ajouter une remarque rapide. 🧾2. Commentaire sur plusieurs lignes (/* … */) 🔹 Syntaxe : /* Ceci est un commentaire sur plusieurs lignes. Il peut couvrir un bloc de texte. */ ✅ Utilisation : Fournir une explication plus longue. Désactiver temporairement un bloc de code. Avancé Nous verrons peut être cette théorie plus tard",
    "tags": [],
    "title": "Commentaires",
    "uri": "/420-111/intro/commentaires/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation informatique (420-111-MV)",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/420-111/categories/index.html"
  },
  {
    "breadcrumb": "Introduction à la programmation informatique (420-111-MV)",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/420-111/tags/index.html"
  }
]
